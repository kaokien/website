"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[737],{2212:function(bv,at,au){au.d(at,{"$V":function(){return hv},CP7:function(){return e},D1R:function(){return bJ},EJi:function(){return ba},F5T:function(){return n},FM8:function(){return j},IOt:function(){return bN},Ilk:function(){return g},Kj0:function(){return F},M8C:function(){return bR},Mig:function(){return bk},"N$j":function(){return a0},NMF:function(){return _},OdW:function(){return fT},OoA:function(){return bD},Ox3:function(){return bj},PMe:function(){return bf},Pa4:function(){return a},QRU:function(){return bn},QmN:function(){return bx},RsA:function(){return bw},Syv:function(){return $},TUv:function(){return ai},TlE:function(){return q},Tme:function(){return i},TyD:function(){return bE},UCm:function(){return bK},UY4:function(){return a6},UlW:function(){return bL},Wid:function(){return as},Wl3:function(){return by},YLQ:function(){return bF},ZAu:function(){return aX},Zp0:function(){return hl},ZzF:function(){return m},"_C8":function(){return u},"_fP":function(){return p},aH4:function(){return bG},aLr:function(){return E},aNw:function(){return v},blk:function(){return a5},cPb:function(){return P},cek:function(){return bh},dUE:function(){return bc},dpR:function(){return he},ehD:function(){return bA},ejS:function(){return a4},hH6:function(){return hb},iKG:function(){return ae},iLg:function(){return W},iUV:function(){return h},kB5:function(){return a$},knz:function(){return av},m7l:function(){return g6},nls:function(){return a3},pBf:function(){return y},qyh:function(){return bI},rpg:function(){return bB},u9r:function(){return f},uWy:function(){return bC},vBJ:function(){return aL},vpT:function(){return Q},wem:function(){return bH},woe:function(){return a7},x12:function(){return R},xEZ:function(){return s},xsS:function(){return ah},yC1:function(){return bd},yGw:function(){return c},"z$h":function(){return bM}});const bw={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},bx={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},by=0,bz=1,bA=2,bB=1e3,bC=1001,bD=1002,bE=1003,bF=1004,bG=1005,bH=1006,bI=1007,bJ=1008,bK=1022,$=2300,_=2301,bL=1,bM=2,av=3001,bN=0,bO="300 es";class y{addEventListener(a,c){void 0===this._listeners&&(this._listeners={});const b=this._listeners;void 0===b[a]&&(b[a]=[]),-1===b[a].indexOf(c)&&b[a].push(c)}hasEventListener(a,c){if(void 0===this._listeners)return!1;const b=this._listeners;return void 0!==b[a]&& -1!==b[a].indexOf(c)}removeEventListener(c,d){if(void 0===this._listeners)return;const e=this._listeners,a=e[c];if(void 0!==a){const b=a.indexOf(d);-1!==b&&a.splice(b,1)}}dispatchEvent(a){if(void 0===this._listeners)return;const e=this._listeners,c=e[a.type];if(void 0!==c){a.target=this;const d=c.slice(0);for(let b=0,f=d.length;b<f;b++)d[b].call(this,a);a.target=null}}}let bP=1234567;const aw=Math.PI/180,ax=180/Math.PI,ay=[];for(let B=0;B<256;B++)ay[B]=(B<16?"0":"")+B.toString(16);const bQ="undefined"!=typeof crypto&&"randomUUID"in crypto;function az(){if(bQ)return crypto.randomUUID().toUpperCase();const a=4294967295*Math.random()|0,b=4294967295*Math.random()|0,c=4294967295*Math.random()|0,d=4294967295*Math.random()|0,e=ay[255&a]+ay[a>>8&255]+ay[a>>16&255]+ay[a>>24&255]+"-"+ay[255&b]+ay[b>>8&255]+"-"+ay[b>>16&15|64]+ay[b>>24&255]+"-"+ay[63&c|128]+ay[c>>8&255]+"-"+ay[c>>16&255]+ay[c>>24&255]+ay[255&d]+ay[d>>8&255]+ay[d>>16&255]+ay[d>>24&255];return e.toUpperCase()}function aA(a,b,c){return Math.max(b,Math.min(c,a))}function aB(b,a){return(b%a+a)%a}function aC(c,a,d,b,e){return b+(c-a)*(e-b)/(d-a)}function aD(b,c,a){return(1-a)*b+a*c}function aE(a){return a*aw}function aF(a){return a*ax}function aG(a){return(a&a-1)==0&&0!==a}function aH(a){return Math.pow(2,Math.ceil(Math.log(a)/Math.LN2))}function aI(a){return Math.pow(2,Math.floor(Math.log(a)/Math.LN2))}var bR=Object.freeze({__proto__:null,DEG2RAD:aw,RAD2DEG:ax,generateUUID:az,clamp:aA,euclideanModulo:aB,mapLinear:aC,inverseLerp:function(a,b,c){return a!==b?(c-a)/(b-a):0},lerp:aD,damp:function(d,e,f,g){var a,b,c;return a=d,b=e,(1-(c=1-Math.exp(-f*g)))*a+c*b},pingpong:function(c,a=1){var b;return a-Math.abs((c%(b=2*a)+b)%b-a)},smoothstep:function(a,b,c){return a<=b?0:a>=c?1:(a=(a-b)/(c-b))*a*(3-2*a)},smootherstep:function(a,b,c){return a<=b?0:a>=c?1:(a=(a-b)/(c-b))*a*a*(a*(6*a-15)+10)},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*(.5-Math.random())},seededRandom:function(a){return void 0!==a&&(bP=a%2147483647),((bP=16807*bP%2147483647)-1)/2147483646},degToRad:aE,radToDeg:aF,isPowerOfTwo:aG,ceilPowerOfTwo:aH,floorPowerOfTwo:aI,setQuaternionFromProperEuler:function(c,d,n,e,o){const h=Math.cos,i=Math.sin,a=h(n/2),b=i(n/2),f=h((d+e)/2),g=i((d+e)/2),j=h((d-e)/2),k=i((d-e)/2),l=h((e-d)/2),m=i((e-d)/2);switch(o){case"XYX":c.set(a*g,b*j,b*k,a*f);break;case"YZY":c.set(b*k,a*g,b*j,a*f);break;case"ZXZ":c.set(b*j,b*k,a*g,a*f);break;case"XZX":c.set(a*g,b*m,b*l,a*f);break;case"YXY":c.set(b*l,a*g,b*m,a*f);break;case"ZYZ":c.set(b*m,b*l,a*g,a*f);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+o)}}});class j{constructor(a=0,b=0){this.x=a,this.y=b}get width(){return this.x}set width(a){this.x=a}get height(){return this.y}set height(a){this.y=a}set(a,b){return this.x=a,this.y=b,this}setScalar(a){return this.x=a,this.y=a,this}setX(a){return this.x=a,this}setY(a){return this.y=a,this}setComponent(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;default:throw new Error("index is out of range: "+a)}return this}getComponent(a){switch(a){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+a)}}clone(){return new this.constructor(this.x,this.y)}copy(a){return this.x=a.x,this.y=a.y,this}add(a,b){return void 0!==b?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b)):(this.x+=a.x,this.y+=a.y,this)}addScalar(a){return this.x+=a,this.y+=a,this}addVectors(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this}addScaledVector(a,b){return this.x+=a.x*b,this.y+=a.y*b,this}sub(a,b){return void 0!==b?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b)):(this.x-=a.x,this.y-=a.y,this)}subScalar(a){return this.x-=a,this.y-=a,this}subVectors(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this}multiply(a){return this.x*=a.x,this.y*=a.y,this}multiplyScalar(a){return this.x*=a,this.y*=a,this}divide(a){return this.x/=a.x,this.y/=a.y,this}divideScalar(a){return this.multiplyScalar(1/a)}applyMatrix3(d){const b=this.x,c=this.y,a=d.elements;return this.x=a[0]*b+a[3]*c+a[6],this.y=a[1]*b+a[4]*c+a[7],this}min(a){return this.x=Math.min(this.x,a.x),this.y=Math.min(this.y,a.y),this}max(a){return this.x=Math.max(this.x,a.x),this.y=Math.max(this.y,a.y),this}clamp(a,b){return this.x=Math.max(a.x,Math.min(b.x,this.x)),this.y=Math.max(a.y,Math.min(b.y,this.y)),this}clampScalar(a,b){return this.x=Math.max(a,Math.min(b,this.x)),this.y=Math.max(a,Math.min(b,this.y)),this}clampLength(b,c){const a=this.length();return this.divideScalar(a||1).multiplyScalar(Math.max(b,Math.min(c,a)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(a){return this.x*a.x+this.y*a.y}cross(a){return this.x*a.y-this.y*a.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){const a=Math.atan2(-this.y,-this.x)+Math.PI;return a}distanceTo(a){return Math.sqrt(this.distanceToSquared(a))}distanceToSquared(a){const b=this.x-a.x,c=this.y-a.y;return b*b+c*c}manhattanDistanceTo(a){return Math.abs(this.x-a.x)+Math.abs(this.y-a.y)}setLength(a){return this.normalize().multiplyScalar(a)}lerp(a,b){return this.x+=(a.x-this.x)*b,this.y+=(a.y-this.y)*b,this}lerpVectors(a,b,c){return this.x=a.x+(b.x-a.x)*c,this.y=a.y+(b.y-a.y)*c,this}equals(a){return a.x===this.x&&a.y===this.y}fromArray(a,b=0){return this.x=a[b],this.y=a[b+1],this}toArray(a=[],b=0){return a[b]=this.x,a[b+1]=this.y,a}fromBufferAttribute(a,b,c){return void 0!==c&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=a.getX(b),this.y=a.getY(b),this}rotateAround(a,b){const c=Math.cos(b),d=Math.sin(b),e=this.x-a.x,f=this.y-a.y;return this.x=e*c-f*d+a.x,this.y=e*d+f*c+a.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}j.prototype.isVector2=!0;class l{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(b,c,d,e,f,g,h,i,j){const a=this.elements;return a[0]=b,a[1]=e,a[2]=h,a[3]=c,a[4]=f,a[5]=i,a[6]=d,a[7]=g,a[8]=j,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(c){const a=this.elements,b=c.elements;return a[0]=b[0],a[1]=b[1],a[2]=b[2],a[3]=b[3],a[4]=b[4],a[5]=b[5],a[6]=b[6],a[7]=b[7],a[8]=b[8],this}extractBasis(a,b,c){return a.setFromMatrix3Column(this,0),b.setFromMatrix3Column(this,1),c.setFromMatrix3Column(this,2),this}setFromMatrix4(b){const a=b.elements;return this.set(a[0],a[4],a[8],a[1],a[5],a[9],a[2],a[6],a[10]),this}multiply(a){return this.multiplyMatrices(this,a)}premultiply(a){return this.multiplyMatrices(a,this)}multiplyMatrices(v,w){const a=v.elements,b=w.elements,c=this.elements,d=a[0],e=a[3],f=a[6],g=a[1],h=a[4],i=a[7],j=a[2],k=a[5],l=a[8],m=b[0],n=b[3],o=b[6],p=b[1],q=b[4],r=b[7],s=b[2],t=b[5],u=b[8];return c[0]=d*m+e*p+f*s,c[3]=d*n+e*q+f*t,c[6]=d*o+e*r+f*u,c[1]=g*m+h*p+i*s,c[4]=g*n+h*q+i*t,c[7]=g*o+h*r+i*u,c[2]=j*m+k*p+l*s,c[5]=j*n+k*q+l*t,c[8]=j*o+k*r+l*u,this}multiplyScalar(a){const b=this.elements;return b[0]*=a,b[3]*=a,b[6]*=a,b[1]*=a,b[4]*=a,b[7]*=a,b[2]*=a,b[5]*=a,b[8]*=a,this}determinant(){const a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],f=a[4],g=a[5],h=a[6],i=a[7],j=a[8];return b*f*j-b*g*i-c*e*j+c*g*h+d*e*i-d*f*h}invert(){const a=this.elements,c=a[0],d=a[1],e=a[2],f=a[3],g=a[4],h=a[5],i=a[6],j=a[7],k=a[8],l=k*g-h*j,m=h*i-k*f,n=j*f-g*i,o=c*l+d*m+e*n;if(0===o)return this.set(0,0,0,0,0,0,0,0,0);const b=1/o;return a[0]=l*b,a[1]=(e*j-k*d)*b,a[2]=(h*d-e*g)*b,a[3]=m*b,a[4]=(k*c-e*i)*b,a[5]=(e*f-h*c)*b,a[6]=n*b,a[7]=(d*i-j*c)*b,a[8]=(g*c-d*f)*b,this}transpose(){let b;const a=this.elements;return b=a[1],a[1]=a[3],a[3]=b,b=a[2],a[2]=a[6],a[6]=b,b=a[5],a[5]=a[7],a[7]=b,this}getNormalMatrix(a){return this.setFromMatrix4(a).invert().transpose()}transposeIntoArray(a){const b=this.elements;return a[0]=b[0],a[1]=b[3],a[2]=b[6],a[3]=b[1],a[4]=b[4],a[5]=b[7],a[6]=b[2],a[7]=b[5],a[8]=b[8],this}setUvTransform(h,i,c,d,g,e,f){const a=Math.cos(g),b=Math.sin(g);return this.set(c*a,c*b,-c*(a*e+b*f)+e+h,-d*b,d*a,-d*(-b*e+a*f)+f+i,0,0,1),this}scale(b,c){const a=this.elements;return a[0]*=b,a[3]*=b,a[6]*=b,a[1]*=c,a[4]*=c,a[7]*=c,this}rotate(d){const b=Math.cos(d),c=Math.sin(d),a=this.elements,e=a[0],f=a[3],g=a[6],h=a[1],i=a[4],j=a[7];return a[0]=b*e+c*h,a[3]=b*f+c*i,a[6]=b*g+c*j,a[1]=-c*e+b*h,a[4]=-c*f+b*i,a[7]=-c*g+b*j,this}translate(b,c){const a=this.elements;return a[0]+=b*a[2],a[3]+=b*a[5],a[6]+=b*a[8],a[1]+=c*a[2],a[4]+=c*a[5],a[7]+=c*a[8],this}equals(b){const c=this.elements,d=b.elements;for(let a=0;a<9;a++)if(c[a]!==d[a])return!1;return!0}fromArray(b,c=0){for(let a=0;a<9;a++)this.elements[a]=b[a+c];return this}toArray(a=[],b=0){const c=this.elements;return a[b]=c[0],a[b+1]=c[1],a[b+2]=c[2],a[b+3]=c[3],a[b+4]=c[4],a[b+5]=c[5],a[b+6]=c[6],a[b+7]=c[7],a[b+8]=c[8],a}clone(){return new this.constructor().fromArray(this.elements)}}function bS(a){if(0===a.length)return-1/0;let c=a[0];for(let b=1,d=a.length;b<d;++b)a[b]>c&&(c=a[b]);return c}function bT(a){return document.createElementNS("http://www.w3.org/1999/xhtml",a)}function bU(d,e=0){let a=3735928559^e,b=1103547991^e;for(let c=0,f;c<d.length;c++)a=Math.imul(a^(f=d.charCodeAt(c)),2654435761),b=Math.imul(b^f,1597334677);return a=Math.imul(a^a>>>16,2246822507)^Math.imul(b^b>>>13,3266489909),b=Math.imul(b^b>>>16,2246822507)^Math.imul(a^a>>>13,3266489909),4294967296*(2097151&b)+(a>>>0)}l.prototype.isMatrix3=!0;let bV;class C{static getDataURL(a){if(/^data:/i.test(a.src))return a.src;if("undefined"==typeof HTMLCanvasElement)return a.src;let b;if(a instanceof HTMLCanvasElement)b=a;else{void 0===bV&&(bV=bT("canvas")),bV.width=a.width,bV.height=a.height;const c=bV.getContext("2d");a instanceof ImageData?c.putImageData(a,0,0):c.drawImage(a,0,0,a.width,a.height),b=bV}return b.width>2048||b.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",a),b.toDataURL("image/jpeg",.6)):b.toDataURL("image/png")}}let bW=0;class s extends y{constructor(a=s.DEFAULT_IMAGE,b=s.DEFAULT_MAPPING,c=bC,d=bC,e=bH,f=bJ,g=1023,h=1009,i=1,k=3e3){super(),Object.defineProperty(this,"id",{value:bW++}),this.uuid=az(),this.name="",this.image=a,this.mipmaps=[],this.mapping=b,this.wrapS=c,this.wrapT=d,this.magFilter=e,this.minFilter=f,this.anisotropy=i,this.format=g,this.internalFormat=null,this.type=h,this.offset=new j(0,0),this.repeat=new j(1,1),this.center=new j(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new l,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=k,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(a){return this.name=a.name,this.image=a.image,this.mipmaps=a.mipmaps.slice(0),this.mapping=a.mapping,this.wrapS=a.wrapS,this.wrapT=a.wrapT,this.magFilter=a.magFilter,this.minFilter=a.minFilter,this.anisotropy=a.anisotropy,this.format=a.format,this.internalFormat=a.internalFormat,this.type=a.type,this.offset.copy(a.offset),this.repeat.copy(a.repeat),this.center.copy(a.center),this.rotation=a.rotation,this.matrixAutoUpdate=a.matrixAutoUpdate,this.matrix.copy(a.matrix),this.generateMipmaps=a.generateMipmaps,this.premultiplyAlpha=a.premultiplyAlpha,this.flipY=a.flipY,this.unpackAlignment=a.unpackAlignment,this.encoding=a.encoding,this.userData=JSON.parse(JSON.stringify(a.userData)),this}toJSON(b){const f=void 0===b||"string"==typeof b;if(!f&& void 0!==b.textures[this.uuid])return b.textures[this.uuid];const e={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){const a=this.image;if(void 0===a.uuid&&(a.uuid=az()),!f&& void 0===b.images[a.uuid]){let c;if(Array.isArray(a)){c=[];for(let d=0,g=a.length;d<g;d++)a[d].isDataTexture?c.push(bX(a[d].image)):c.push(bX(a[d]))}else c=bX(a);b.images[a.uuid]={uuid:a.uuid,url:c}}e.image=a.uuid}return"{}"!==JSON.stringify(this.userData)&&(e.userData=this.userData),f||(b.textures[this.uuid]=e),e}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(a){if(300!==this.mapping)return a;if(a.applyMatrix3(this.matrix),a.x<0||a.x>1)switch(this.wrapS){case bB:a.x=a.x-Math.floor(a.x);break;case bC:a.x=a.x<0?0:1;break;case bD:1===Math.abs(Math.floor(a.x)%2)?a.x=Math.ceil(a.x)-a.x:a.x=a.x-Math.floor(a.x);break}if(a.y<0||a.y>1)switch(this.wrapT){case bB:a.y=a.y-Math.floor(a.y);break;case bC:a.y=a.y<0?0:1;break;case bD:1===Math.abs(Math.floor(a.y)%2)?a.y=Math.ceil(a.y)-a.y:a.y=a.y-Math.floor(a.y);break}return this.flipY&&(a.y=1-a.y),a}set needsUpdate(a){!0===a&&this.version++}}function bX(a){return"undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&a instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&a instanceof ImageBitmap?C.getDataURL(a):a.data?{data:Array.prototype.slice.call(a.data),width:a.width,height:a.height,type:a.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}s.DEFAULT_IMAGE=void 0,s.DEFAULT_MAPPING=300,s.prototype.isTexture=!0;class D{constructor(a=0,b=0,c=0,d=1){this.x=a,this.y=b,this.z=c,this.w=d}get width(){return this.z}set width(a){this.z=a}get height(){return this.w}set height(a){this.w=a}set(a,b,c,d){return this.x=a,this.y=b,this.z=c,this.w=d,this}setScalar(a){return this.x=a,this.y=a,this.z=a,this.w=a,this}setX(a){return this.x=a,this}setY(a){return this.y=a,this}setZ(a){return this.z=a,this}setW(a){return this.w=a,this}setComponent(b,a){switch(b){case 0:this.x=a;break;case 1:this.y=a;break;case 2:this.z=a;break;case 3:this.w=a;break;default:throw new Error("index is out of range: "+b)}return this}getComponent(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+a)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(a){return this.x=a.x,this.y=a.y,this.z=a.z,this.w=void 0!==a.w?a.w:1,this}add(a,b){return void 0!==b?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b)):(this.x+=a.x,this.y+=a.y,this.z+=a.z,this.w+=a.w,this)}addScalar(a){return this.x+=a,this.y+=a,this.z+=a,this.w+=a,this}addVectors(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this.z=a.z+b.z,this.w=a.w+b.w,this}addScaledVector(a,b){return this.x+=a.x*b,this.y+=a.y*b,this.z+=a.z*b,this.w+=a.w*b,this}sub(a,b){return void 0!==b?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b)):(this.x-=a.x,this.y-=a.y,this.z-=a.z,this.w-=a.w,this)}subScalar(a){return this.x-=a,this.y-=a,this.z-=a,this.w-=a,this}subVectors(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this.z=a.z-b.z,this.w=a.w-b.w,this}multiply(a){return this.x*=a.x,this.y*=a.y,this.z*=a.z,this.w*=a.w,this}multiplyScalar(a){return this.x*=a,this.y*=a,this.z*=a,this.w*=a,this}applyMatrix4(f){const b=this.x,c=this.y,d=this.z,e=this.w,a=f.elements;return this.x=a[0]*b+a[4]*c+a[8]*d+a[12]*e,this.y=a[1]*b+a[5]*c+a[9]*d+a[13]*e,this.z=a[2]*b+a[6]*c+a[10]*d+a[14]*e,this.w=a[3]*b+a[7]*c+a[11]*d+a[15]*e,this}divideScalar(a){return this.multiplyScalar(1/a)}setAxisAngleFromQuaternion(a){this.w=2*Math.acos(a.w);const b=Math.sqrt(1-a.w*a.w);return b<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=a.x/b,this.y=a.y/b,this.z=a.z/b),this}setAxisAngleFromRotationMatrix(v){let r,b,c,d;const a=v.elements,o=a[0],e=a[4],f=a[8],g=a[1],p=a[5],h=a[9],i=a[2],j=a[6],q=a[10];if(.01>Math.abs(e-g)&&.01>Math.abs(f-i)&&.01>Math.abs(h-j)){if(.1>Math.abs(e+g)&&.1>Math.abs(f+i)&&.1>Math.abs(h+j)&&.1>Math.abs(o+p+q-3))return this.set(1,0,0,0),this;r=Math.PI;const l=(o+1)/2,m=(p+1)/2,n=(q+1)/2,s=(e+g)/4,t=(f+i)/4,u=(h+j)/4;return l>m&&l>n?l<.01?(b=0,c=.707106781,d=.707106781):(c=s/(b=Math.sqrt(l)),d=t/b):m>n?m<.01?(b=.707106781,c=0,d=.707106781):(b=s/(c=Math.sqrt(m)),d=u/c):n<.01?(b=.707106781,c=.707106781,d=0):(b=t/(d=Math.sqrt(n)),c=u/d),this.set(b,c,d,r),this}let k=Math.sqrt((j-h)*(j-h)+(f-i)*(f-i)+(g-e)*(g-e));return .001>Math.abs(k)&&(k=1),this.x=(j-h)/k,this.y=(f-i)/k,this.z=(g-e)/k,this.w=Math.acos((o+p+q-1)/2),this}min(a){return this.x=Math.min(this.x,a.x),this.y=Math.min(this.y,a.y),this.z=Math.min(this.z,a.z),this.w=Math.min(this.w,a.w),this}max(a){return this.x=Math.max(this.x,a.x),this.y=Math.max(this.y,a.y),this.z=Math.max(this.z,a.z),this.w=Math.max(this.w,a.w),this}clamp(a,b){return this.x=Math.max(a.x,Math.min(b.x,this.x)),this.y=Math.max(a.y,Math.min(b.y,this.y)),this.z=Math.max(a.z,Math.min(b.z,this.z)),this.w=Math.max(a.w,Math.min(b.w,this.w)),this}clampScalar(a,b){return this.x=Math.max(a,Math.min(b,this.x)),this.y=Math.max(a,Math.min(b,this.y)),this.z=Math.max(a,Math.min(b,this.z)),this.w=Math.max(a,Math.min(b,this.w)),this}clampLength(b,c){const a=this.length();return this.divideScalar(a||1).multiplyScalar(Math.max(b,Math.min(c,a)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(a){return this.normalize().multiplyScalar(a)}lerp(a,b){return this.x+=(a.x-this.x)*b,this.y+=(a.y-this.y)*b,this.z+=(a.z-this.z)*b,this.w+=(a.w-this.w)*b,this}lerpVectors(a,b,c){return this.x=a.x+(b.x-a.x)*c,this.y=a.y+(b.y-a.y)*c,this.z=a.z+(b.z-a.z)*c,this.w=a.w+(b.w-a.w)*c,this}equals(a){return a.x===this.x&&a.y===this.y&&a.z===this.z&&a.w===this.w}fromArray(a,b=0){return this.x=a[b],this.y=a[b+1],this.z=a[b+2],this.w=a[b+3],this}toArray(a=[],b=0){return a[b]=this.x,a[b+1]=this.y,a[b+2]=this.z,a[b+3]=this.w,a}fromBufferAttribute(a,b,c){return void 0!==c&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=a.getX(b),this.y=a.getY(b),this.z=a.getZ(b),this.w=a.getW(b),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}D.prototype.isVector4=!0;class J extends y{constructor(b,c,a={}){super(),this.width=b,this.height=c,this.depth=1,this.scissor=new D(0,0,b,c),this.scissorTest=!1,this.viewport=new D(0,0,b,c),this.texture=new s(void 0,a.mapping,a.wrapS,a.wrapT,a.magFilter,a.minFilter,a.format,a.type,a.anisotropy,a.encoding),this.texture.isRenderTargetTexture=!0,this.texture.image={width:b,height:c,depth:1},this.texture.generateMipmaps=void 0!==a.generateMipmaps&&a.generateMipmaps,this.texture.internalFormat=void 0!==a.internalFormat?a.internalFormat:null,this.texture.minFilter=void 0!==a.minFilter?a.minFilter:bH,this.depthBuffer=void 0===a.depthBuffer||a.depthBuffer,this.stencilBuffer=void 0!==a.stencilBuffer&&a.stencilBuffer,this.depthTexture=void 0!==a.depthTexture?a.depthTexture:null}setTexture(a){a.image={width:this.width,height:this.height,depth:this.depth},this.texture=a}setSize(a,b,c=1){(this.width!==a||this.height!==b||this.depth!==c)&&(this.width=a,this.height=b,this.depth=c,this.texture.image.width=a,this.texture.image.height=b,this.texture.image.depth=c,this.dispose()),this.viewport.set(0,0,a,b),this.scissor.set(0,0,a,b)}clone(){return new this.constructor().copy(this)}copy(a){return this.width=a.width,this.height=a.height,this.depth=a.depth,this.viewport.copy(a.viewport),this.texture=a.texture.clone(),this.texture.image={...this.texture.image},this.depthBuffer=a.depthBuffer,this.stencilBuffer=a.stencilBuffer,this.depthTexture=a.depthTexture,this}dispose(){this.dispatchEvent({type:"dispose"})}}J.prototype.isWebGLRenderTarget=!0,(class extends J{constructor(b,c,d){super(b,c);const e=this.texture;this.texture=[];for(let a=0;a<d;a++)this.texture[a]=e.clone()}setSize(a,b,d=1){if(this.width!==a||this.height!==b||this.depth!==d){this.width=a,this.height=b,this.depth=d;for(let c=0,e=this.texture.length;c<e;c++)this.texture[c].image.width=a,this.texture[c].image.height=b,this.texture[c].image.depth=d;this.dispose()}return this.viewport.set(0,0,a,b),this.scissor.set(0,0,a,b),this}copy(a){this.dispose(),this.width=a.width,this.height=a.height,this.depth=a.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=a.depthBuffer,this.stencilBuffer=a.stencilBuffer,this.depthTexture=a.depthTexture,this.texture.length=0;for(let b=0,c=a.texture.length;b<c;b++)this.texture[b]=a.texture[b].clone();return this}}).prototype.isWebGLMultipleRenderTargets=!0;class aJ extends J{constructor(a,b,c){super(a,b,c),this.samples=4}copy(a){return super.copy.call(this,a),this.samples=a.samples,this}}aJ.prototype.isWebGLMultisampleRenderTarget=!0;class p{constructor(a=0,b=0,c=0,d=1){this._x=a,this._y=b,this._z=c,this._w=d}static slerp(a,b,c,d){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),c.slerpQuaternions(a,b,d)}static slerpFlat(a,b,i,j,k,l,g){let c=i[j+0],d=i[j+1],e=i[j+2],f=i[j+3];const m=k[l+0],n=k[l+1],o=k[l+2],p=k[l+3];if(0===g){a[b+0]=c,a[b+1]=d,a[b+2]=e,a[b+3]=f;return}if(1===g){a[b+0]=m,a[b+1]=n,a[b+2]=o,a[b+3]=p;return}if(f!==p||c!==m||d!==n||e!==o){let h=1-g;const q=c*m+d*n+e*o+f*p,u=q>=0?1:-1,v=1-q*q;if(v>Number.EPSILON){const t=Math.sqrt(v),w=Math.atan2(t,q*u);h=Math.sin(h*w)/t,g=Math.sin(g*w)/t}const r=g*u;if(c=c*h+m*r,d=d*h+n*r,e=e*h+o*r,f=f*h+p*r,h===1-g){const s=1/Math.sqrt(c*c+d*d+e*e+f*f);c*=s,d*=s,e*=s,f*=s}}a[b]=c,a[b+1]=d,a[b+2]=e,a[b+3]=f}static multiplyQuaternionsFlat(a,b,c,d,e,f){const g=c[d],h=c[d+1],i=c[d+2],j=c[d+3],k=e[f],l=e[f+1],m=e[f+2],n=e[f+3];return a[b]=g*n+j*k+h*m-i*l,a[b+1]=h*n+j*l+i*k-g*m,a[b+2]=i*n+j*m+g*l-h*k,a[b+3]=j*n-g*k-h*l-i*m,a}get x(){return this._x}set x(a){this._x=a,this._onChangeCallback()}get y(){return this._y}set y(a){this._y=a,this._onChangeCallback()}get z(){return this._z}set z(a){this._z=a,this._onChangeCallback()}get w(){return this._w}set w(a){this._w=a,this._onChangeCallback()}set(a,b,c,d){return this._x=a,this._y=b,this._z=c,this._w=d,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(a){return this._x=a.x,this._y=a.y,this._z=a.z,this._w=a.w,this._onChangeCallback(),this}setFromEuler(g,n){if(!(g&&g.isEuler))throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const j=g._x,k=g._y,l=g._z,m=g._order,h=Math.cos,i=Math.sin,a=h(j/2),b=h(k/2),c=h(l/2),d=i(j/2),e=i(k/2),f=i(l/2);switch(m){case"XYZ":this._x=d*b*c+a*e*f,this._y=a*e*c-d*b*f,this._z=a*b*f+d*e*c,this._w=a*b*c-d*e*f;break;case"YXZ":this._x=d*b*c+a*e*f,this._y=a*e*c-d*b*f,this._z=a*b*f-d*e*c,this._w=a*b*c+d*e*f;break;case"ZXY":this._x=d*b*c-a*e*f,this._y=a*e*c+d*b*f,this._z=a*b*f+d*e*c,this._w=a*b*c-d*e*f;break;case"ZYX":this._x=d*b*c-a*e*f,this._y=a*e*c+d*b*f,this._z=a*b*f-d*e*c,this._w=a*b*c+d*e*f;break;case"YZX":this._x=d*b*c+a*e*f,this._y=a*e*c+d*b*f,this._z=a*b*f-d*e*c,this._w=a*b*c-d*e*f;break;case"XZY":this._x=d*b*c-a*e*f,this._y=a*e*c-d*b*f,this._z=a*b*f+d*e*c,this._w=a*b*c+d*e*f;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+m)}return!1!==n&&this._onChangeCallback(),this}setFromAxisAngle(a,d){const c=d/2,b=Math.sin(c);return this._x=a.x*b,this._y=a.y*b,this._z=a.z*b,this._w=Math.cos(c),this._onChangeCallback(),this}setFromRotationMatrix(p){const a=p.elements,b=a[0],e=a[4],f=a[8],g=a[1],c=a[5],h=a[9],i=a[2],j=a[6],d=a[10],o=b+c+d;if(o>0){const k=.5/Math.sqrt(o+1);this._w=.25/k,this._x=(j-h)*k,this._y=(f-i)*k,this._z=(g-e)*k}else if(b>c&&b>d){const l=2*Math.sqrt(1+b-c-d);this._w=(j-h)/l,this._x=.25*l,this._y=(e+g)/l,this._z=(f+i)/l}else if(c>d){const m=2*Math.sqrt(1+c-b-d);this._w=(f-i)/m,this._x=(e+g)/m,this._y=.25*m,this._z=(h+j)/m}else{const n=2*Math.sqrt(1+d-b-c);this._w=(g-e)/n,this._x=(f+i)/n,this._y=(h+j)/n,this._z=.25*n}return this._onChangeCallback(),this}setFromUnitVectors(a,b){let c=a.dot(b)+1;return c<Number.EPSILON?(c=0,Math.abs(a.x)>Math.abs(a.z)?(this._x=-a.y,this._y=a.x,this._z=0,this._w=c):(this._x=0,this._y=-a.z,this._z=a.y,this._w=c)):(this._x=a.y*b.z-a.z*b.y,this._y=a.z*b.x-a.x*b.z,this._z=a.x*b.y-a.y*b.x,this._w=c),this.normalize()}angleTo(a){return 2*Math.acos(Math.abs(aA(this.dot(a),-1,1)))}rotateTowards(a,c){const b=this.angleTo(a);if(0===b)return this;const d=Math.min(1,c/b);return this.slerp(a,d),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(a){return this._x*a._x+this._y*a._y+this._z*a._z+this._w*a._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let a=this.length();return 0===a?(this._x=0,this._y=0,this._z=0,this._w=1):(a=1/a,this._x=this._x*a,this._y=this._y*a,this._z=this._z*a,this._w=this._w*a),this._onChangeCallback(),this}multiply(a,b){return void 0!==b?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(a,b)):this.multiplyQuaternions(this,a)}premultiply(a){return this.multiplyQuaternions(a,this)}multiplyQuaternions(a,b){const c=a._x,d=a._y,e=a._z,f=a._w,g=b._x,h=b._y,i=b._z,j=b._w;return this._x=c*j+f*g+d*i-e*h,this._y=d*j+f*h+e*g-c*i,this._z=e*j+f*i+c*h-d*g,this._w=f*j-c*g-d*h-e*i,this._onChangeCallback(),this}slerp(a,b){if(0===b)return this;if(1===b)return this.copy(a);const d=this._x,e=this._y,f=this._z,g=this._w;let c=g*a._w+d*a._x+e*a._y+f*a._z;if(c<0?(this._w=-a._w,this._x=-a._x,this._y=-a._y,this._z=-a._z,c=-c):this.copy(a),c>=1)return this._w=g,this._x=d,this._y=e,this._z=f,this;const l=1-c*c;if(l<=Number.EPSILON){const h=1-b;return this._w=h*g+b*this._w,this._x=h*d+b*this._x,this._y=h*e+b*this._y,this._z=h*f+b*this._z,this.normalize(),this._onChangeCallback(),this}const k=Math.sqrt(l),m=Math.atan2(k,c),i=Math.sin((1-b)*m)/k,j=Math.sin(b*m)/k;return this._w=g*i+this._w*j,this._x=d*i+this._x*j,this._y=e*i+this._y*j,this._z=f*i+this._z*j,this._onChangeCallback(),this}slerpQuaternions(a,b,c){this.copy(a).slerp(b,c)}random(){const a=Math.random(),b=Math.sqrt(1-a),c=Math.sqrt(a),d=2*Math.PI*Math.random(),e=2*Math.PI*Math.random();return this.set(b*Math.cos(d),c*Math.sin(e),c*Math.cos(e),b*Math.sin(d))}equals(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._w===this._w}fromArray(a,b=0){return this._x=a[b],this._y=a[b+1],this._z=a[b+2],this._w=a[b+3],this._onChangeCallback(),this}toArray(a=[],b=0){return a[b]=this._x,a[b+1]=this._y,a[b+2]=this._z,a[b+3]=this._w,a}fromBufferAttribute(a,b){return this._x=a.getX(b),this._y=a.getY(b),this._z=a.getZ(b),this._w=a.getW(b),this}_onChange(a){return this._onChangeCallback=a,this}_onChangeCallback(){}}p.prototype.isQuaternion=!0;class a{constructor(a=0,b=0,c=0){this.x=a,this.y=b,this.z=c}set(b,c,a){return void 0===a&&(a=this.z),this.x=b,this.y=c,this.z=a,this}setScalar(a){return this.x=a,this.y=a,this.z=a,this}setX(a){return this.x=a,this}setY(a){return this.y=a,this}setZ(a){return this.z=a,this}setComponent(b,a){switch(b){case 0:this.x=a;break;case 1:this.y=a;break;case 2:this.z=a;break;default:throw new Error("index is out of range: "+b)}return this}getComponent(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+a)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(a){return this.x=a.x,this.y=a.y,this.z=a.z,this}add(a,b){return void 0!==b?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b)):(this.x+=a.x,this.y+=a.y,this.z+=a.z,this)}addScalar(a){return this.x+=a,this.y+=a,this.z+=a,this}addVectors(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this.z=a.z+b.z,this}addScaledVector(a,b){return this.x+=a.x*b,this.y+=a.y*b,this.z+=a.z*b,this}sub(a,b){return void 0!==b?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b)):(this.x-=a.x,this.y-=a.y,this.z-=a.z,this)}subScalar(a){return this.x-=a,this.y-=a,this.z-=a,this}subVectors(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this.z=a.z-b.z,this}multiply(a,b){return void 0!==b?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(a,b)):(this.x*=a.x,this.y*=a.y,this.z*=a.z,this)}multiplyScalar(a){return this.x*=a,this.y*=a,this.z*=a,this}multiplyVectors(a,b){return this.x=a.x*b.x,this.y=a.y*b.y,this.z=a.z*b.z,this}applyEuler(a){return a&&a.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(bZ.setFromEuler(a))}applyAxisAngle(a,b){return this.applyQuaternion(bZ.setFromAxisAngle(a,b))}applyMatrix3(e){const b=this.x,c=this.y,d=this.z,a=e.elements;return this.x=a[0]*b+a[3]*c+a[6]*d,this.y=a[1]*b+a[4]*c+a[7]*d,this.z=a[2]*b+a[5]*c+a[8]*d,this}applyNormalMatrix(a){return this.applyMatrix3(a).normalize()}applyMatrix4(f){const b=this.x,c=this.y,d=this.z,a=f.elements,e=1/(a[3]*b+a[7]*c+a[11]*d+a[15]);return this.x=(a[0]*b+a[4]*c+a[8]*d+a[12])*e,this.y=(a[1]*b+a[5]*c+a[9]*d+a[13])*e,this.z=(a[2]*b+a[6]*c+a[10]*d+a[14])*e,this}applyQuaternion(e){const f=this.x,g=this.y,h=this.z,a=e.x,b=e.y,c=e.z,d=e.w,i=d*f+b*h-c*g,j=d*g+c*f-a*h,k=d*h+a*g-b*f,l=-a*f-b*g-c*h;return this.x=i*d+ -(l*a)+ -(j*c)- -(k*b),this.y=j*d+ -(l*b)+ -(k*a)- -(i*c),this.z=k*d+ -(l*c)+ -(i*b)- -(j*a),this}project(a){return this.applyMatrix4(a.matrixWorldInverse).applyMatrix4(a.projectionMatrix)}unproject(a){return this.applyMatrix4(a.projectionMatrixInverse).applyMatrix4(a.matrixWorld)}transformDirection(e){const b=this.x,c=this.y,d=this.z,a=e.elements;return this.x=a[0]*b+a[4]*c+a[8]*d,this.y=a[1]*b+a[5]*c+a[9]*d,this.z=a[2]*b+a[6]*c+a[10]*d,this.normalize()}divide(a){return this.x/=a.x,this.y/=a.y,this.z/=a.z,this}divideScalar(a){return this.multiplyScalar(1/a)}min(a){return this.x=Math.min(this.x,a.x),this.y=Math.min(this.y,a.y),this.z=Math.min(this.z,a.z),this}max(a){return this.x=Math.max(this.x,a.x),this.y=Math.max(this.y,a.y),this.z=Math.max(this.z,a.z),this}clamp(a,b){return this.x=Math.max(a.x,Math.min(b.x,this.x)),this.y=Math.max(a.y,Math.min(b.y,this.y)),this.z=Math.max(a.z,Math.min(b.z,this.z)),this}clampScalar(a,b){return this.x=Math.max(a,Math.min(b,this.x)),this.y=Math.max(a,Math.min(b,this.y)),this.z=Math.max(a,Math.min(b,this.z)),this}clampLength(b,c){const a=this.length();return this.divideScalar(a||1).multiplyScalar(Math.max(b,Math.min(c,a)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(a){return this.x*a.x+this.y*a.y+this.z*a.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(a){return this.normalize().multiplyScalar(a)}lerp(a,b){return this.x+=(a.x-this.x)*b,this.y+=(a.y-this.y)*b,this.z+=(a.z-this.z)*b,this}lerpVectors(a,b,c){return this.x=a.x+(b.x-a.x)*c,this.y=a.y+(b.y-a.y)*c,this.z=a.z+(b.z-a.z)*c,this}cross(a,b){return void 0!==b?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(a,b)):this.crossVectors(this,a)}crossVectors(a,b){const c=a.x,d=a.y,e=a.z,f=b.x,g=b.y,h=b.z;return this.x=d*h-e*g,this.y=e*f-c*h,this.z=c*g-d*f,this}projectOnVector(a){const b=a.lengthSq();if(0===b)return this.set(0,0,0);const c=a.dot(this)/b;return this.copy(a).multiplyScalar(c)}projectOnPlane(a){return bY.copy(this).projectOnVector(a),this.sub(bY)}reflect(a){return this.sub(bY.copy(a).multiplyScalar(2*this.dot(a)))}angleTo(a){const b=Math.sqrt(this.lengthSq()*a.lengthSq());if(0===b)return Math.PI/2;const c=this.dot(a)/b;return Math.acos(aA(c,-1,1))}distanceTo(a){return Math.sqrt(this.distanceToSquared(a))}distanceToSquared(a){const b=this.x-a.x,c=this.y-a.y,d=this.z-a.z;return b*b+c*c+d*d}manhattanDistanceTo(a){return Math.abs(this.x-a.x)+Math.abs(this.y-a.y)+Math.abs(this.z-a.z)}setFromSpherical(a){return this.setFromSphericalCoords(a.radius,a.phi,a.theta)}setFromSphericalCoords(a,b,c){const d=Math.sin(b)*a;return this.x=d*Math.sin(c),this.y=Math.cos(b)*a,this.z=d*Math.cos(c),this}setFromCylindrical(a){return this.setFromCylindricalCoords(a.radius,a.theta,a.y)}setFromCylindricalCoords(a,b,c){return this.x=a*Math.sin(b),this.y=c,this.z=a*Math.cos(b),this}setFromMatrixPosition(b){const a=b.elements;return this.x=a[12],this.y=a[13],this.z=a[14],this}setFromMatrixScale(a){const b=this.setFromMatrixColumn(a,0).length(),c=this.setFromMatrixColumn(a,1).length(),d=this.setFromMatrixColumn(a,2).length();return this.x=b,this.y=c,this.z=d,this}setFromMatrixColumn(a,b){return this.fromArray(a.elements,4*b)}setFromMatrix3Column(a,b){return this.fromArray(a.elements,3*b)}equals(a){return a.x===this.x&&a.y===this.y&&a.z===this.z}fromArray(a,b=0){return this.x=a[b],this.y=a[b+1],this.z=a[b+2],this}toArray(a=[],b=0){return a[b]=this.x,a[b+1]=this.y,a[b+2]=this.z,a}fromBufferAttribute(a,b,c){return void 0!==c&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=a.getX(b),this.y=a.getY(b),this.z=a.getZ(b),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const a=(Math.random()-.5)*2,b=Math.random()*Math.PI*2,c=Math.sqrt(1-a**2);return this.x=c*Math.cos(b),this.y=c*Math.sin(b),this.z=a,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}a.prototype.isVector3=!0;const bY=new a,bZ=new p;class m{constructor(b=new a(Infinity,Infinity,Infinity),c=new a(-1/0,-1/0,-1/0)){this.min=b,this.max=c}set(a,b){return this.min.copy(a),this.max.copy(b),this}setFromArray(b){let f=Infinity,g=Infinity,h=Infinity,i=-1/0,j=-1/0,k=-1/0;for(let a=0,l=b.length;a<l;a+=3){const c=b[a],d=b[a+1],e=b[a+2];c<f&&(f=c),d<g&&(g=d),e<h&&(h=e),c>i&&(i=c),d>j&&(j=d),e>k&&(k=e)}return this.min.set(f,g,h),this.max.set(i,j,k),this}setFromBufferAttribute(b){let f=Infinity,g=Infinity,h=Infinity,i=-1/0,j=-1/0,k=-1/0;for(let a=0,l=b.count;a<l;a++){const c=b.getX(a),d=b.getY(a),e=b.getZ(a);c<f&&(f=c),d<g&&(g=d),e<h&&(h=e),c>i&&(i=c),d>j&&(j=d),e>k&&(k=e)}return this.min.set(f,g,h),this.max.set(i,j,k),this}setFromPoints(b){this.makeEmpty();for(let a=0,c=b.length;a<c;a++)this.expandByPoint(b[a]);return this}setFromCenterAndSize(a,c){const b=b_.copy(c).multiplyScalar(.5);return this.min.copy(a).sub(b),this.max.copy(a).add(b),this}setFromObject(a){return this.makeEmpty(),this.expandByObject(a)}clone(){return new this.constructor().copy(this)}copy(a){return this.min.copy(a.min),this.max.copy(a.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=Infinity,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(a){return this.isEmpty()?a.set(0,0,0):a.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(a){return this.isEmpty()?a.set(0,0,0):a.subVectors(this.max,this.min)}expandByPoint(a){return this.min.min(a),this.max.max(a),this}expandByVector(a){return this.min.sub(a),this.max.add(a),this}expandByScalar(a){return this.min.addScalar(-a),this.max.addScalar(a),this}expandByObject(a){a.updateWorldMatrix(!1,!1);const b=a.geometry;void 0!==b&&(null===b.boundingBox&&b.computeBoundingBox(),b0.copy(b.boundingBox),b0.applyMatrix4(a.matrixWorld),this.union(b0));const d=a.children;for(let c=0,e=d.length;c<e;c++)this.expandByObject(d[c]);return this}containsPoint(a){return!(a.x<this.min.x)&&!(a.x>this.max.x)&&!(a.y<this.min.y)&&!(a.y>this.max.y)&&!(a.z<this.min.z)&&!(a.z>this.max.z)}containsBox(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y&&this.min.z<=a.min.z&&a.max.z<=this.max.z}getParameter(a,b){return b.set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y),(a.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(a){return!(a.max.x<this.min.x)&&!(a.min.x>this.max.x)&&!(a.max.y<this.min.y)&&!(a.min.y>this.max.y)&&!(a.max.z<this.min.z)&&!(a.min.z>this.max.z)}intersectsSphere(a){return this.clampPoint(a.center,b_),b_.distanceToSquared(a.center)<=a.radius*a.radius}intersectsPlane(a){let b,c;return a.normal.x>0?(b=a.normal.x*this.min.x,c=a.normal.x*this.max.x):(b=a.normal.x*this.max.x,c=a.normal.x*this.min.x),a.normal.y>0?(b+=a.normal.y*this.min.y,c+=a.normal.y*this.max.y):(b+=a.normal.y*this.max.y,c+=a.normal.y*this.min.y),a.normal.z>0?(b+=a.normal.z*this.min.z,c+=a.normal.z*this.max.z):(b+=a.normal.z*this.max.z,c+=a.normal.z*this.min.z),b<= -a.constant&&c>= -a.constant}intersectsTriangle(a){if(this.isEmpty())return!1;this.getCenter(b7),b8.subVectors(this.max,b7),b1.subVectors(a.a,b7),b2.subVectors(a.b,b7),b3.subVectors(a.c,b7),b4.subVectors(b2,b1),b5.subVectors(b3,b2),b6.subVectors(b1,b3);let b=[0,-b4.z,b4.y,0,-b5.z,b5.y,0,-b6.z,b6.y,b4.z,0,-b4.x,b5.z,0,-b5.x,b6.z,0,-b6.x,-b4.y,b4.x,0,-b5.y,b5.x,0,-b6.y,b6.x,0];return!!cb(b,b1,b2,b3,b8)&& !!cb(b=[1,0,0,0,1,0,0,0,1],b1,b2,b3,b8)&&(b9.crossVectors(b4,b5),cb(b=[b9.x,b9.y,b9.z],b1,b2,b3,b8))}clampPoint(a,b){return b.copy(a).clamp(this.min,this.max)}distanceToPoint(a){const b=b_.copy(a).clamp(this.min,this.max);return b.sub(a).length()}getBoundingSphere(a){return this.getCenter(a.center),a.radius=.5*this.getSize(b_).length(),a}intersect(a){return this.min.max(a.min),this.max.min(a.max),this.isEmpty()&&this.makeEmpty(),this}union(a){return this.min.min(a.min),this.max.max(a.max),this}applyMatrix4(a){return this.isEmpty()||(b$[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(a),b$[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(a),b$[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(a),b$[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(a),b$[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(a),b$[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(a),b$[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(a),b$[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(a),this.setFromPoints(b$)),this}translate(a){return this.min.add(a),this.max.add(a),this}equals(a){return a.min.equals(this.min)&&a.max.equals(this.max)}}m.prototype.isBox3=!0;const b$=[new a,new a,new a,new a,new a,new a,new a,new a],b_=new a,b0=new m,b1=new a,b2=new a,b3=new a,b4=new a,b5=new a,b6=new a,b7=new a,b8=new a,b9=new a,ca=new a;function cb(c,g,h,i,a){for(let b=0,j=c.length-3;b<=j;b+=3){ca.fromArray(c,b);const k=a.x*Math.abs(ca.x)+a.y*Math.abs(ca.y)+a.z*Math.abs(ca.z),d=g.dot(ca),e=h.dot(ca),f=i.dot(ca);if(Math.max(-Math.max(d,e,f),Math.min(d,e,f))>k)return!1}return!0}const cc=new m,cd=new a,ce=new a,cf=new a;class E{constructor(b=new a,c=-1){this.center=b,this.radius=c}set(a,b){return this.center.copy(a),this.radius=b,this}setFromPoints(a,e){const b=this.center;void 0!==e?b.copy(e):cc.setFromPoints(a).getCenter(b);let c=0;for(let d=0,f=a.length;d<f;d++)c=Math.max(c,b.distanceToSquared(a[d]));return this.radius=Math.sqrt(c),this}copy(a){return this.center.copy(a.center),this.radius=a.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(a){return a.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(a){return a.distanceTo(this.center)-this.radius}intersectsSphere(a){const b=this.radius+a.radius;return a.center.distanceToSquared(this.center)<=b*b}intersectsBox(a){return a.intersectsSphere(this)}intersectsPlane(a){return Math.abs(a.distanceToPoint(this.center))<=this.radius}clampPoint(b,a){const c=this.center.distanceToSquared(b);return a.copy(b),c>this.radius*this.radius&&(a.sub(this.center).normalize(),a.multiplyScalar(this.radius).add(this.center)),a}getBoundingBox(a){return this.isEmpty()?(a.makeEmpty(),a):(a.set(this.center,this.center),a.expandByScalar(this.radius),a)}applyMatrix4(a){return this.center.applyMatrix4(a),this.radius=this.radius*a.getMaxScaleOnAxis(),this}translate(a){return this.center.add(a),this}expandByPoint(d){cf.subVectors(d,this.center);const a=cf.lengthSq();if(a>this.radius*this.radius){const b=Math.sqrt(a),c=(b-this.radius)*.5;this.center.add(cf.multiplyScalar(c/b)),this.radius+=c}return this}union(a){return ce.subVectors(a.center,this.center).normalize().multiplyScalar(a.radius),this.expandByPoint(cd.copy(a.center).add(ce)),this.expandByPoint(cd.copy(a.center).sub(ce)),this}equals(a){return a.center.equals(this.center)&&a.radius===this.radius}clone(){return new this.constructor().copy(this)}}const cg=new a,ch=new a,ci=new a,cj=new a,ck=new a,cl=new a,cm=new a;class z{constructor(b=new a,c=new a(0,0,-1)){this.origin=b,this.direction=c}set(a,b){return this.origin.copy(a),this.direction.copy(b),this}copy(a){return this.origin.copy(a.origin),this.direction.copy(a.direction),this}at(a,b){return b.copy(this.direction).multiplyScalar(a).add(this.origin)}lookAt(a){return this.direction.copy(a).sub(this.origin).normalize(),this}recast(a){return this.origin.copy(this.at(a,cg)),this}closestPointToPoint(c,a){a.subVectors(c,this.origin);const b=a.dot(this.direction);return b<0?a.copy(this.origin):a.copy(this.direction).multiplyScalar(b).add(this.origin)}distanceToPoint(a){return Math.sqrt(this.distanceSqToPoint(a))}distanceSqToPoint(a){const b=cg.subVectors(a,this.origin).dot(this.direction);return b<0?this.origin.distanceToSquared(a):(cg.copy(this.direction).multiplyScalar(b).add(this.origin),cg.distanceToSquared(a))}distanceSqToSegment(j,k,m,n){ch.copy(j).add(k).multiplyScalar(.5),ci.copy(k).sub(j).normalize(),cj.copy(this.origin).sub(ch);const c=.5*j.distanceTo(k),d=-this.direction.dot(ci),f=cj.dot(this.direction),e=-cj.dot(ci),h=cj.lengthSq(),l=Math.abs(1-d*d);let b,a,g,i;if(l>0)if(b=d*e-f,a=d*f-e,i=c*l,b>=0)if(a>= -i)if(a<=i){const o=1/l;b*=o,a*=o,g=b*(b+d*a+2*f)+a*(d*b+a+2*e)+h}else g=-(b=Math.max(0,-(d*(a=c)+f)))*b+a*(a+2*e)+h;else g=-(b=Math.max(0,-(d*(a=-c)+f)))*b+a*(a+2*e)+h;else a<= -i?(a=(b=Math.max(0,-(-d*c+f)))>0?-c:Math.min(Math.max(-c,-e),c),g=-b*b+a*(a+2*e)+h):a<=i?(b=0,g=(a=Math.min(Math.max(-c,-e),c))*(a+2*e)+h):(a=(b=Math.max(0,-(d*c+f)))>0?c:Math.min(Math.max(-c,-e),c),g=-b*b+a*(a+2*e)+h);else a=d>0?-c:c,b=Math.max(0,-(d*a+f)),g=-b*b+a*(a+2*e)+h;return m&&m.copy(this.direction).multiplyScalar(b).add(this.origin),n&&n.copy(ci).multiplyScalar(a).add(ch),g}intersectSphere(b,d){cg.subVectors(b.center,this.origin);const a=cg.dot(this.direction),e=cg.dot(cg)-a*a,f=b.radius*b.radius;if(e>f)return null;const g=Math.sqrt(f-e),c=a-g,h=a+g;return c<0&&h<0?null:c<0?this.at(h,d):this.at(c,d)}intersectsSphere(a){return this.distanceSqToPoint(a.center)<=a.radius*a.radius}distanceToPlane(a){const b=a.normal.dot(this.direction);if(0===b)return 0===a.distanceToPoint(this.origin)?0:null;const c=-(this.origin.dot(a.normal)+a.constant)/b;return c>=0?c:null}intersectPlane(b,c){const a=this.distanceToPlane(b);return null===a?null:this.at(a,c)}intersectsPlane(a){const b=a.distanceToPoint(this.origin);if(0===b)return!0;const c=a.normal.dot(this.direction);return c*b<0}intersectBox(c,l){let a,b,e,f,g,h;const i=1/this.direction.x,j=1/this.direction.y,k=1/this.direction.z,d=this.origin;return(i>=0?(a=(c.min.x-d.x)*i,b=(c.max.x-d.x)*i):(a=(c.max.x-d.x)*i,b=(c.min.x-d.x)*i),j>=0?(e=(c.min.y-d.y)*j,f=(c.max.y-d.y)*j):(e=(c.max.y-d.y)*j,f=(c.min.y-d.y)*j),a>f||e>b)?null:((e>a||a!=a)&&(a=e),(f<b||b!=b)&&(b=f),k>=0?(g=(c.min.z-d.z)*k,h=(c.max.z-d.z)*k):(g=(c.max.z-d.z)*k,h=(c.min.z-d.z)*k),a>h||g>b)?null:((g>a||a!=a)&&(a=g),(h<b||b!=b)&&(b=h),b<0)?null:this.at(a>=0?a:b,l)}intersectsBox(a){return null!==this.intersectBox(a,cg)}intersectTriangle(c,g,h,i,j){ck.subVectors(g,c),cl.subVectors(h,c),cm.crossVectors(ck,cl);let a=this.direction.dot(cm),b;if(a>0){if(i)return null;b=1}else{if(!(a<0))return null;b=-1,a=-a}cj.subVectors(this.origin,c);const d=b*this.direction.dot(cl.crossVectors(cj,cl));if(d<0)return null;const e=b*this.direction.dot(ck.cross(cj));if(e<0)return null;if(d+e>a)return null;const f=-b*cj.dot(cm);return f<0?null:this.at(f/a,j)}applyMatrix4(a){return this.origin.applyMatrix4(a),this.direction.transformDirection(a),this}equals(a){return a.origin.equals(this.origin)&&a.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class c{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q){const a=this.elements;return a[0]=b,a[4]=c,a[8]=d,a[12]=e,a[1]=f,a[5]=g,a[9]=h,a[13]=i,a[2]=j,a[6]=k,a[10]=l,a[14]=m,a[3]=n,a[7]=o,a[11]=p,a[15]=q,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new c().fromArray(this.elements)}copy(c){const a=this.elements,b=c.elements;return a[0]=b[0],a[1]=b[1],a[2]=b[2],a[3]=b[3],a[4]=b[4],a[5]=b[5],a[6]=b[6],a[7]=b[7],a[8]=b[8],a[9]=b[9],a[10]=b[10],a[11]=b[11],a[12]=b[12],a[13]=b[13],a[14]=b[14],a[15]=b[15],this}copyPosition(c){const a=this.elements,b=c.elements;return a[12]=b[12],a[13]=b[13],a[14]=b[14],this}setFromMatrix3(b){const a=b.elements;return this.set(a[0],a[3],a[6],0,a[1],a[4],a[7],0,a[2],a[5],a[8],0,0,0,0,1),this}extractBasis(a,b,c){return a.setFromMatrixColumn(this,0),b.setFromMatrixColumn(this,1),c.setFromMatrixColumn(this,2),this}makeBasis(a,b,c){return this.set(a.x,b.x,c.x,0,a.y,b.y,c.y,0,a.z,b.z,c.z,0,0,0,0,1),this}extractRotation(c){const a=this.elements,b=c.elements,d=1/cn.setFromMatrixColumn(c,0).length(),e=1/cn.setFromMatrixColumn(c,1).length(),f=1/cn.setFromMatrixColumn(c,2).length();return a[0]=b[0]*d,a[1]=b[1]*d,a[2]=b[2]*d,a[3]=0,a[4]=b[4]*e,a[5]=b[5]*e,a[6]=b[6]*e,a[7]=0,a[8]=b[8]*f,a[9]=b[9]*f,a[10]=b[10]*f,a[11]=0,a[12]=0,a[13]=0,a[14]=0,a[15]=1,this}makeRotationFromEuler(h){h&&h.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const a=this.elements,i=h.x,j=h.y,k=h.z,e=Math.cos(i),b=Math.sin(i),f=Math.cos(j),c=Math.sin(j),g=Math.cos(k),d=Math.sin(k);if("XYZ"===h.order){const l=e*g,m=e*d,n=b*g,o=b*d;a[0]=f*g,a[4]=-f*d,a[8]=c,a[1]=m+n*c,a[5]=l-o*c,a[9]=-b*f,a[2]=o-l*c,a[6]=n+m*c,a[10]=e*f}else if("YXZ"===h.order){const p=f*g,q=f*d,r=c*g,s=c*d;a[0]=p+s*b,a[4]=r*b-q,a[8]=e*c,a[1]=e*d,a[5]=e*g,a[9]=-b,a[2]=q*b-r,a[6]=s+p*b,a[10]=e*f}else if("ZXY"===h.order){const t=f*g,u=f*d,v=c*g,w=c*d;a[0]=t-w*b,a[4]=-e*d,a[8]=v+u*b,a[1]=u+v*b,a[5]=e*g,a[9]=w-t*b,a[2]=-e*c,a[6]=b,a[10]=e*f}else if("ZYX"===h.order){const x=e*g,y=e*d,z=b*g,A=b*d;a[0]=f*g,a[4]=z*c-y,a[8]=x*c+A,a[1]=f*d,a[5]=A*c+x,a[9]=y*c-z,a[2]=-c,a[6]=b*f,a[10]=e*f}else if("YZX"===h.order){const B=e*f,C=e*c,D=b*f,E=b*c;a[0]=f*g,a[4]=E-B*d,a[8]=D*d+C,a[1]=d,a[5]=e*g,a[9]=-b*g,a[2]=-c*g,a[6]=C*d+D,a[10]=B-E*d}else if("XZY"===h.order){const F=e*f,G=e*c,H=b*f,I=b*c;a[0]=f*g,a[4]=-d,a[8]=c*g,a[1]=F*d+I,a[5]=e*g,a[9]=G*d-H,a[2]=H*d-G,a[6]=b*g,a[10]=I*d+F}return a[3]=0,a[7]=0,a[11]=0,a[12]=0,a[13]=0,a[14]=0,a[15]=1,this}makeRotationFromQuaternion(a){return this.compose(cp,a,cq)}lookAt(c,d,b){const a=this.elements;return ct.subVectors(c,d),0===ct.lengthSq()&&(ct.z=1),ct.normalize(),cr.crossVectors(b,ct),0===cr.lengthSq()&&(1===Math.abs(b.z)?ct.x+=1e-4:ct.z+=1e-4,ct.normalize(),cr.crossVectors(b,ct)),cr.normalize(),cs.crossVectors(ct,cr),a[0]=cr.x,a[4]=cs.x,a[8]=ct.x,a[1]=cr.y,a[5]=cs.y,a[9]=ct.y,a[2]=cr.z,a[6]=cs.z,a[10]=ct.z,this}multiply(a,b){return void 0!==b?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(a,b)):this.multiplyMatrices(this,a)}premultiply(a){return this.multiplyMatrices(a,this)}multiplyMatrices(J,K){const a=J.elements,b=K.elements,c=this.elements,d=a[0],e=a[4],f=a[8],g=a[12],h=a[1],i=a[5],j=a[9],k=a[13],l=a[2],m=a[6],n=a[10],o=a[14],p=a[3],q=a[7],r=a[11],s=a[15],t=b[0],u=b[4],v=b[8],w=b[12],x=b[1],y=b[5],z=b[9],A=b[13],B=b[2],C=b[6],D=b[10],E=b[14],F=b[3],G=b[7],H=b[11],I=b[15];return c[0]=d*t+e*x+f*B+g*F,c[4]=d*u+e*y+f*C+g*G,c[8]=d*v+e*z+f*D+g*H,c[12]=d*w+e*A+f*E+g*I,c[1]=h*t+i*x+j*B+k*F,c[5]=h*u+i*y+j*C+k*G,c[9]=h*v+i*z+j*D+k*H,c[13]=h*w+i*A+j*E+k*I,c[2]=l*t+m*x+n*B+o*F,c[6]=l*u+m*y+n*C+o*G,c[10]=l*v+m*z+n*D+o*H,c[14]=l*w+m*A+n*E+o*I,c[3]=p*t+q*x+r*B+s*F,c[7]=p*u+q*y+r*C+s*G,c[11]=p*v+q*z+r*D+s*H,c[15]=p*w+q*A+r*E+s*I,this}multiplyScalar(a){const b=this.elements;return b[0]*=a,b[4]*=a,b[8]*=a,b[12]*=a,b[1]*=a,b[5]*=a,b[9]*=a,b[13]*=a,b[2]*=a,b[6]*=a,b[10]*=a,b[14]*=a,b[3]*=a,b[7]*=a,b[11]*=a,b[15]*=a,this}determinant(){const a=this.elements,b=a[0],c=a[4],d=a[8],e=a[12],f=a[1],g=a[5],h=a[9],i=a[13],j=a[2],k=a[6],l=a[10],m=a[14],n=a[3],o=a[7],p=a[11],q=a[15];return n*(+e*h*k-d*i*k-e*g*l+c*i*l+d*g*m-c*h*m)+o*(+b*h*m-b*i*l+e*f*l-d*f*m+d*i*j-e*h*j)+p*(+b*i*k-b*g*m-e*f*k+c*f*m+e*g*j-c*i*j)+q*(-d*g*j-b*h*k+b*g*l+d*f*k-c*f*l+c*h*j)}transpose(){const a=this.elements;let b;return b=a[1],a[1]=a[4],a[4]=b,b=a[2],a[2]=a[8],a[8]=b,b=a[6],a[6]=a[9],a[9]=b,b=a[3],a[3]=a[12],a[12]=b,b=a[7],a[7]=a[13],a[13]=b,b=a[11],a[11]=a[14],a[14]=b,this}setPosition(b,c,d){const a=this.elements;return b.isVector3?(a[12]=b.x,a[13]=b.y,a[14]=b.z):(a[12]=b,a[13]=c,a[14]=d),this}invert(){const a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],f=a[4],g=a[5],h=a[6],i=a[7],j=a[8],k=a[9],l=a[10],m=a[11],n=a[12],o=a[13],p=a[14],q=a[15],s=k*p*i-o*l*i+o*h*m-g*p*m-k*h*q+g*l*q,t=n*l*i-j*p*i-n*h*m+f*p*m+j*h*q-f*l*q,u=j*o*i-n*k*i+n*g*m-f*o*m-j*g*q+f*k*q,v=n*k*h-j*o*h-n*g*l+f*o*l+j*g*p-f*k*p,w=b*s+c*t+d*u+e*v;if(0===w)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const r=1/w;return a[0]=s*r,a[1]=(o*l*e-k*p*e-o*d*m+c*p*m+k*d*q-c*l*q)*r,a[2]=(g*p*e-o*h*e+o*d*i-c*p*i-g*d*q+c*h*q)*r,a[3]=(k*h*e-g*l*e-k*d*i+c*l*i+g*d*m-c*h*m)*r,a[4]=t*r,a[5]=(j*p*e-n*l*e+n*d*m-b*p*m-j*d*q+b*l*q)*r,a[6]=(n*h*e-f*p*e-n*d*i+b*p*i+f*d*q-b*h*q)*r,a[7]=(f*l*e-j*h*e+j*d*i-b*l*i-f*d*m+b*h*m)*r,a[8]=u*r,a[9]=(n*k*e-j*o*e-n*c*m+b*o*m+j*c*q-b*k*q)*r,a[10]=(f*o*e-n*g*e+n*c*i-b*o*i-f*c*q+b*g*q)*r,a[11]=(j*g*e-f*k*e-j*c*i+b*k*i+f*c*m-b*g*m)*r,a[12]=v*r,a[13]=(j*o*d-n*k*d+n*c*l-b*o*l-j*c*p+b*k*p)*r,a[14]=(n*g*d-f*o*d-n*c*h+b*o*h+f*c*p-b*g*p)*r,a[15]=(f*k*d-j*g*d+j*c*h-b*k*h-f*c*l+b*g*l)*r,this}scale(e){const a=this.elements,b=e.x,c=e.y,d=e.z;return a[0]*=b,a[4]*=c,a[8]*=d,a[1]*=b,a[5]*=c,a[9]*=d,a[2]*=b,a[6]*=c,a[10]*=d,a[3]*=b,a[7]*=c,a[11]*=d,this}getMaxScaleOnAxis(){const a=this.elements,b=a[0]*a[0]+a[1]*a[1]+a[2]*a[2],c=a[4]*a[4]+a[5]*a[5]+a[6]*a[6],d=a[8]*a[8]+a[9]*a[9]+a[10]*a[10];return Math.sqrt(Math.max(b,c,d))}makeTranslation(a,b,c){return this.set(1,0,0,a,0,1,0,b,0,0,1,c,0,0,0,1),this}makeRotationX(a){const b=Math.cos(a),c=Math.sin(a);return this.set(1,0,0,0,0,b,-c,0,0,c,b,0,0,0,0,1),this}makeRotationY(a){const b=Math.cos(a),c=Math.sin(a);return this.set(b,0,c,0,0,1,0,0,-c,0,b,0,0,0,0,1),this}makeRotationZ(a){const b=Math.cos(a),c=Math.sin(a);return this.set(b,-c,0,0,c,b,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(g,j){const e=Math.cos(j),b=Math.sin(j),h=1-e,f=g.x,c=g.y,a=g.z,d=h*f,i=h*c;return this.set(d*f+e,d*c-b*a,d*a+b*c,0,d*c+b*a,i*c+e,i*a-b*f,0,d*a-b*c,i*a+b*f,h*a*a+e,0,0,0,0,1),this}makeScale(a,b,c){return this.set(a,0,0,0,0,b,0,0,0,0,c,0,0,0,0,1),this}makeShear(a,b,c,d,e,f){return this.set(1,c,e,0,a,1,f,0,b,d,1,0,0,0,0,1),this}compose(f,c,g){const a=this.elements,b=c._x,d=c._y,h=c._z,i=c._w,n=b+b,j=d+d,e=h+h,o=b*n,p=b*j,q=b*e,r=d*j,s=d*e,t=h*e,u=i*n,v=i*j,w=i*e,k=g.x,l=g.y,m=g.z;return a[0]=(1-(r+t))*k,a[1]=(p+w)*k,a[2]=(q-v)*k,a[3]=0,a[4]=(p-w)*l,a[5]=(1-(o+t))*l,a[6]=(s+u)*l,a[7]=0,a[8]=(q+v)*m,a[9]=(s-u)*m,a[10]=(1-(o+r))*m,a[11]=0,a[12]=f.x,a[13]=f.y,a[14]=f.z,a[15]=1,this}decompose(c,j,d){const a=this.elements;let b=cn.set(a[0],a[1],a[2]).length();const h=cn.set(a[4],a[5],a[6]).length(),i=cn.set(a[8],a[9],a[10]).length(),k=this.determinant();k<0&&(b=-b),c.x=a[12],c.y=a[13],c.z=a[14],co.copy(this);const e=1/b,f=1/h,g=1/i;return co.elements[0]*=e,co.elements[1]*=e,co.elements[2]*=e,co.elements[4]*=f,co.elements[5]*=f,co.elements[6]*=f,co.elements[8]*=g,co.elements[9]*=g,co.elements[10]*=g,j.setFromRotationMatrix(co),d.x=b,d.y=h,d.z=i,this}makePerspective(d,e,f,g,b,c){void 0===c&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const a=this.elements;return a[0]=2*b/(e-d),a[4]=0,a[8]=(e+d)/(e-d),a[12]=0,a[1]=0,a[5]=2*b/(f-g),a[9]=(f+g)/(f-g),a[13]=0,a[2]=0,a[6]=0,a[10]=-(c+b)/(c-b),a[14]=-2*c*b/(c-b),a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this}makeOrthographic(b,c,d,e,f,g){const a=this.elements,h=1/(c-b),i=1/(d-e),j=1/(g-f);return a[0]=2*h,a[4]=0,a[8]=0,a[12]=-((c+b)*h),a[1]=0,a[5]=2*i,a[9]=0,a[13]=-((d+e)*i),a[2]=0,a[6]=0,a[10]=-2*j,a[14]=-((g+f)*j),a[3]=0,a[7]=0,a[11]=0,a[15]=1,this}equals(b){const c=this.elements,d=b.elements;for(let a=0;a<16;a++)if(c[a]!==d[a])return!1;return!0}fromArray(b,c=0){for(let a=0;a<16;a++)this.elements[a]=b[a+c];return this}toArray(a=[],b=0){const c=this.elements;return a[b]=c[0],a[b+1]=c[1],a[b+2]=c[2],a[b+3]=c[3],a[b+4]=c[4],a[b+5]=c[5],a[b+6]=c[6],a[b+7]=c[7],a[b+8]=c[8],a[b+9]=c[9],a[b+10]=c[10],a[b+11]=c[11],a[b+12]=c[12],a[b+13]=c[13],a[b+14]=c[14],a[b+15]=c[15],a}}c.prototype.isMatrix4=!0;const cn=new a,co=new c,cp=new a(0,0,0),cq=new a(1,1,1),cr=new a,cs=new a,ct=new a,cu=new c,cv=new p;class N{constructor(a=0,b=0,c=0,d=N.DefaultOrder){this._x=a,this._y=b,this._z=c,this._order=d}get x(){return this._x}set x(a){this._x=a,this._onChangeCallback()}get y(){return this._y}set y(a){this._y=a,this._onChangeCallback()}get z(){return this._z}set z(a){this._z=a,this._onChangeCallback()}get order(){return this._order}set order(a){this._order=a,this._onChangeCallback()}set(a,b,c,d=this._order){return this._x=a,this._y=b,this._z=c,this._order=d,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(a){return this._x=a._x,this._y=a._y,this._z=a._z,this._order=a._order,this._onChangeCallback(),this}setFromRotationMatrix(l,k=this._order,m=!0){const a=l.elements,b=a[0],e=a[4],f=a[8],g=a[1],c=a[5],h=a[9],i=a[2],j=a[6],d=a[10];switch(k){case"XYZ":this._y=Math.asin(aA(f,-1,1)),.9999999>Math.abs(f)?(this._x=Math.atan2(-h,d),this._z=Math.atan2(-e,b)):(this._x=Math.atan2(j,c),this._z=0);break;case"YXZ":this._x=Math.asin(-aA(h,-1,1)),.9999999>Math.abs(h)?(this._y=Math.atan2(f,d),this._z=Math.atan2(g,c)):(this._y=Math.atan2(-i,b),this._z=0);break;case"ZXY":this._x=Math.asin(aA(j,-1,1)),.9999999>Math.abs(j)?(this._y=Math.atan2(-i,d),this._z=Math.atan2(-e,c)):(this._y=0,this._z=Math.atan2(g,b));break;case"ZYX":this._y=Math.asin(-aA(i,-1,1)),.9999999>Math.abs(i)?(this._x=Math.atan2(j,d),this._z=Math.atan2(g,b)):(this._x=0,this._z=Math.atan2(-e,c));break;case"YZX":this._z=Math.asin(aA(g,-1,1)),.9999999>Math.abs(g)?(this._x=Math.atan2(-h,c),this._y=Math.atan2(-i,b)):(this._x=0,this._y=Math.atan2(f,d));break;case"XZY":this._z=Math.asin(-aA(e,-1,1)),.9999999>Math.abs(e)?(this._x=Math.atan2(j,c),this._y=Math.atan2(f,b)):(this._x=Math.atan2(-h,d),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+k)}return this._order=k,!0===m&&this._onChangeCallback(),this}setFromQuaternion(a,b,c){return cu.makeRotationFromQuaternion(a),this.setFromRotationMatrix(cu,b,c)}setFromVector3(a,b=this._order){return this.set(a.x,a.y,a.z,b)}reorder(a){return cv.setFromEuler(this),this.setFromQuaternion(cv,a)}equals(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._order===this._order}fromArray(a){return this._x=a[0],this._y=a[1],this._z=a[2],void 0!==a[3]&&(this._order=a[3]),this._onChangeCallback(),this}toArray(a=[],b=0){return a[b]=this._x,a[b+1]=this._y,a[b+2]=this._z,a[b+3]=this._order,a}toVector3(b){return b?b.set(this._x,this._y,this._z):new a(this._x,this._y,this._z)}_onChange(a){return this._onChangeCallback=a,this}_onChangeCallback(){}}N.prototype.isEuler=!0,N.DefaultOrder="XYZ",N.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];let cw=0;const cx=new a,cy=new p,cz=new c,cA=new a,cB=new a,cC=new a,cD=new p,cE=new a(1,0,0),cF=new a(0,1,0),cG=new a(0,0,1),cH={type:"added"},cI={type:"removed"};class i extends y{constructor(){super(),Object.defineProperty(this,"id",{value:cw++}),this.uuid=az(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=i.DefaultUp.clone();const e=new a,b=new N,d=new p,f=new a(1,1,1);b._onChange(function(){d.setFromEuler(b,!1)}),d._onChange(function(){b.setFromQuaternion(d,void 0,!1)}),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:b},quaternion:{configurable:!0,enumerable:!0,value:d},scale:{configurable:!0,enumerable:!0,value:f},modelViewMatrix:{value:new c},normalMatrix:{value:new l}}),this.matrix=new c,this.matrixWorld=new c,this.matrixAutoUpdate=i.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new class{constructor(){this.mask=1}set(a){this.mask=1<<a|0}enable(a){this.mask|=1<<a|0}enableAll(){this.mask=-1}toggle(a){this.mask^=1<<a|0}disable(a){this.mask&=~(1<<a|0)}disableAll(){this.mask=0}test(a){return(this.mask&a.mask)!=0}},this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(a){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(a),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(a){return this.quaternion.premultiply(a),this}setRotationFromAxisAngle(a,b){this.quaternion.setFromAxisAngle(a,b)}setRotationFromEuler(a){this.quaternion.setFromEuler(a,!0)}setRotationFromMatrix(a){this.quaternion.setFromRotationMatrix(a)}setRotationFromQuaternion(a){this.quaternion.copy(a)}rotateOnAxis(a,b){return cy.setFromAxisAngle(a,b),this.quaternion.multiply(cy),this}rotateOnWorldAxis(a,b){return cy.setFromAxisAngle(a,b),this.quaternion.premultiply(cy),this}rotateX(a){return this.rotateOnAxis(cE,a)}rotateY(a){return this.rotateOnAxis(cF,a)}rotateZ(a){return this.rotateOnAxis(cG,a)}translateOnAxis(a,b){return cx.copy(a).applyQuaternion(this.quaternion),this.position.add(cx.multiplyScalar(b)),this}translateX(a){return this.translateOnAxis(cE,a)}translateY(a){return this.translateOnAxis(cF,a)}translateZ(a){return this.translateOnAxis(cG,a)}localToWorld(a){return a.applyMatrix4(this.matrixWorld)}worldToLocal(a){return a.applyMatrix4(cz.copy(this.matrixWorld).invert())}lookAt(a,c,d){a.isVector3?cA.copy(a):cA.set(a,c,d);const b=this.parent;this.updateWorldMatrix(!0,!1),cB.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?cz.lookAt(cB,cA,this.up):cz.lookAt(cA,cB,this.up),this.quaternion.setFromRotationMatrix(cz),b&&(cz.extractRotation(b.matrixWorld),cy.setFromRotationMatrix(cz),this.quaternion.premultiply(cy.invert()))}add(a){if(arguments.length>1){for(let b=0;b<arguments.length;b++)this.add(arguments[b]);return this}return a===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",a),this):(a&&a.isObject3D?(null!==a.parent&&a.parent.remove(a),a.parent=this,this.children.push(a),a.dispatchEvent(cH)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",a),this)}remove(a){if(arguments.length>1){for(let b=0;b<arguments.length;b++)this.remove(arguments[b]);return this}const c=this.children.indexOf(a);return -1!==c&&(a.parent=null,this.children.splice(c,1),a.dispatchEvent(cI)),this}removeFromParent(){const a=this.parent;return null!==a&&a.remove(this),this}clear(){for(let a=0;a<this.children.length;a++){const b=this.children[a];b.parent=null,b.dispatchEvent(cI)}return this.children.length=0,this}attach(a){return this.updateWorldMatrix(!0,!1),cz.copy(this.matrixWorld).invert(),null!==a.parent&&(a.parent.updateWorldMatrix(!0,!1),cz.multiply(a.parent.matrixWorld)),a.applyMatrix4(cz),this.add(a),a.updateWorldMatrix(!1,!0),this}getObjectById(a){return this.getObjectByProperty("id",a)}getObjectByName(a){return this.getObjectByProperty("name",a)}getObjectByProperty(b,c){if(this[b]===c)return this;for(let a=0,e=this.children.length;a<e;a++){const f=this.children[a],d=f.getObjectByProperty(b,c);if(void 0!==d)return d}}getWorldPosition(a){return this.updateWorldMatrix(!0,!1),a.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(a){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(cB,a,cC),a}getWorldScale(a){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(cB,cD,a),a}getWorldDirection(b){this.updateWorldMatrix(!0,!1);const a=this.matrixWorld.elements;return b.set(a[8],a[9],a[10]).normalize()}raycast(){}traverse(b){b(this);const c=this.children;for(let a=0,d=c.length;a<d;a++)c[a].traverse(b)}traverseVisible(b){if(!1===this.visible)return;b(this);const c=this.children;for(let a=0,d=c.length;a<d;a++)c[a].traverseVisible(b)}traverseAncestors(b){const a=this.parent;null!==a&&(b(a),a.traverseAncestors(b))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(a){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||a)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,a=!0);const c=this.children;for(let b=0,d=c.length;b<d;b++)c[b].updateMatrixWorld(a)}updateWorldMatrix(d,e){const b=this.parent;if(!0===d&&null!==b&&b.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e){const c=this.children;for(let a=0,f=c.length;a<f;a++)c[a].updateWorldMatrix(!1,!0)}}toJSON(b){const k=void 0===b||"string"==typeof b,c={};k&&(b={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}},c.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const a={};function d(c,a){return void 0===c[a.uuid]&&(c[a.uuid]=a.toJSON(b)),a.uuid}if(a.uuid=this.uuid,a.type=this.type,""!==this.name&&(a.name=this.name),!0===this.castShadow&&(a.castShadow=!0),!0===this.receiveShadow&&(a.receiveShadow=!0),!1===this.visible&&(a.visible=!1),!1===this.frustumCulled&&(a.frustumCulled=!1),0!==this.renderOrder&&(a.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(a.userData=this.userData),a.layers=this.layers.mask,a.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(a.matrixAutoUpdate=!1),this.isInstancedMesh&&(a.type="InstancedMesh",a.count=this.count,a.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(a.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?a.background=this.background.toJSON():this.background.isTexture&&(a.background=this.background.toJSON(b).uuid)),this.environment&&this.environment.isTexture&&(a.environment=this.environment.toJSON(b).uuid);else if(this.isMesh||this.isLine||this.isPoints){a.geometry=d(b.geometries,this.geometry);const f=this.geometry.parameters;if(void 0!==f&& void 0!==f.shapes){const e=f.shapes;if(Array.isArray(e))for(let g=0,t=e.length;g<t;g++){const u=e[g];d(b.shapes,u)}else d(b.shapes,e)}}if(this.isSkinnedMesh&&(a.bindMode=this.bindMode,a.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(d(b.skeletons,this.skeleton),a.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const l=[];for(let h=0,v=this.material.length;h<v;h++)l.push(d(b.materials,this.material[h]));a.material=l}else a.material=d(b.materials,this.material);if(this.children.length>0){a.children=[];for(let i=0;i<this.children.length;i++)a.children.push(this.children[i].toJSON(b).object)}if(this.animations.length>0){a.animations=[];for(let j=0;j<this.animations.length;j++){const w=this.animations[j];a.animations.push(d(b.animations,w))}}if(k){const m=x(b.geometries),n=x(b.materials),o=x(b.textures),p=x(b.images),q=x(b.shapes),r=x(b.skeletons),s=x(b.animations);m.length>0&&(c.geometries=m),n.length>0&&(c.materials=n),o.length>0&&(c.textures=o),p.length>0&&(c.images=p),q.length>0&&(c.shapes=q),r.length>0&&(c.skeletons=r),s.length>0&&(c.animations=s)}return c.object=a,c;function x(a){const b=[];for(const d in a){const c=a[d];delete c.metadata,b.push(c)}return b}}clone(a){return new this.constructor().copy(this,a)}copy(a,c=!0){if(this.name=a.name,this.up.copy(a.up),this.position.copy(a.position),this.rotation.order=a.rotation.order,this.quaternion.copy(a.quaternion),this.scale.copy(a.scale),this.matrix.copy(a.matrix),this.matrixWorld.copy(a.matrixWorld),this.matrixAutoUpdate=a.matrixAutoUpdate,this.matrixWorldNeedsUpdate=a.matrixWorldNeedsUpdate,this.layers.mask=a.layers.mask,this.visible=a.visible,this.castShadow=a.castShadow,this.receiveShadow=a.receiveShadow,this.frustumCulled=a.frustumCulled,this.renderOrder=a.renderOrder,this.userData=JSON.parse(JSON.stringify(a.userData)),!0===c)for(let b=0;b<a.children.length;b++){const d=a.children[b];this.add(d.clone())}return this}}i.DefaultUp=new a(0,1,0),i.DefaultMatrixAutoUpdate=!0,i.prototype.isObject3D=!0;const cJ=new a,cK=new a,cL=new a,cM=new a,cN=new a,cO=new a,cP=new a,cQ=new a,cR=new a,cS=new a;class t{constructor(b=new a,c=new a,d=new a){this.a=b,this.b=c,this.c=d}static getNormal(d,b,e,a){a.subVectors(e,b),cJ.subVectors(d,b),a.cross(cJ);const c=a.lengthSq();return c>0?a.multiplyScalar(1/Math.sqrt(c)):a.set(0,0,0)}static getBarycoord(l,b,m,n,c){cJ.subVectors(n,b),cK.subVectors(m,b),cL.subVectors(l,b);const d=cJ.dot(cJ),a=cJ.dot(cK),e=cJ.dot(cL),f=cK.dot(cK),g=cK.dot(cL),h=d*f-a*a;if(0===h)return c.set(-2,-1,-1);const i=1/h,j=(f*e-a*g)*i,k=(d*g-a*e)*i;return c.set(1-j-k,k,j)}static containsPoint(a,b,c,d){return this.getBarycoord(a,b,c,d,cM),cM.x>=0&&cM.y>=0&&cM.x+cM.y<=1}static getUV(b,c,d,e,f,g,h,a){return this.getBarycoord(b,c,d,e,cM),a.set(0,0),a.addScaledVector(f,cM.x),a.addScaledVector(g,cM.y),a.addScaledVector(h,cM.z),a}static isFrontFacing(b,a,c,d){return cJ.subVectors(c,a),cK.subVectors(b,a),0>cJ.cross(cK).dot(d)}set(a,b,c){return this.a.copy(a),this.b.copy(b),this.c.copy(c),this}setFromPointsAndIndices(a,b,c,d){return this.a.copy(a[b]),this.b.copy(a[c]),this.c.copy(a[d]),this}setFromAttributeAndIndices(a,b,c,d){return this.a.fromBufferAttribute(a,b),this.b.fromBufferAttribute(a,c),this.c.fromBufferAttribute(a,d),this}clone(){return new this.constructor().copy(this)}copy(a){return this.a.copy(a.a),this.b.copy(a.b),this.c.copy(a.c),this}getArea(){return cJ.subVectors(this.c,this.b),cK.subVectors(this.a,this.b),.5*cJ.cross(cK).length()}getMidpoint(a){return a.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(a){return t.getNormal(this.a,this.b,this.c,a)}getPlane(a){return a.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(a,b){return t.getBarycoord(a,this.a,this.b,this.c,b)}getUV(a,b,c,d,e){return t.getUV(a,this.a,this.b,this.c,b,c,d,e)}containsPoint(a){return t.containsPoint(a,this.a,this.b,this.c)}isFrontFacing(a){return t.isFrontFacing(this.a,this.b,this.c,a)}intersectsBox(a){return a.intersectsTriangle(this)}closestPointToPoint(m,c){const d=this.a,i=this.b,k=this.c;let l,e;cN.subVectors(i,d),cO.subVectors(k,d),cQ.subVectors(m,d);const f=cN.dot(cQ),g=cO.dot(cQ);if(f<=0&&g<=0)return c.copy(d);cR.subVectors(m,i);const a=cN.dot(cR),h=cO.dot(cR);if(a>=0&&h<=a)return c.copy(i);const n=f*h-a*g;if(n<=0&&f>=0&&a<=0)return l=f/(f-a),c.copy(d).addScaledVector(cN,l);cS.subVectors(m,k);const j=cN.dot(cS),b=cO.dot(cS);if(b>=0&&j<=b)return c.copy(k);const o=j*g-f*b;if(o<=0&&g>=0&&b<=0)return e=g/(g-b),c.copy(d).addScaledVector(cO,e);const p=a*b-j*h;if(p<=0&&h-a>=0&&j-b>=0)return cP.subVectors(k,i),e=(h-a)/(h-a+(j-b)),c.copy(i).addScaledVector(cP,e);const q=1/(p+o+n);return l=o*q,e=n*q,c.copy(d).addScaledVector(cN,l).addScaledVector(cO,e)}equals(a){return a.a.equals(this.a)&&a.b.equals(this.b)&&a.c.equals(this.c)}}let cT=0;class n extends y{constructor(){super(),Object.defineProperty(this,"id",{value:cT++}),this.uuid=az(),this.name="",this.type="Material",this.fog=!0,this.blending=1,this.side=by,this.vertexColors=!1,this.opacity=1,this.format=1023,this.transparent=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=100,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=7680,this.stencilZFail=7680,this.stencilZPass=7680,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(a){this._alphaTest>0!=a>0&&this.version++,this._alphaTest=a}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(d){if(void 0!==d)for(const c in d){const a=d[c];if(void 0===a){console.warn("THREE.Material: '"+c+"' parameter is undefined.");continue}if("shading"===c){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===a;continue}const b=this[c];if(void 0===b){console.warn("THREE."+this.type+": '"+c+"' is not a property of this material.");continue}b&&b.isColor?b.set(a):b&&b.isVector3&&a&&a.isVector3?b.copy(a):this[c]=a}}toJSON(b){const c=void 0===b||"string"==typeof b;c&&(b={textures:{},images:{}});const a={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function d(a){const b=[];for(const d in a){const c=a[d];delete c.metadata,b.push(c)}return b}if(a.uuid=this.uuid,a.type=this.type,""!==this.name&&(a.name=this.name),this.color&&this.color.isColor&&(a.color=this.color.getHex()),void 0!==this.roughness&&(a.roughness=this.roughness),void 0!==this.metalness&&(a.metalness=this.metalness),void 0!==this.sheen&&(a.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(a.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(a.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(a.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(a.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(a.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(a.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(a.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(a.shininess=this.shininess),void 0!==this.clearcoat&&(a.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(a.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(a.clearcoatMap=this.clearcoatMap.toJSON(b).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(a.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(b).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(a.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(b).uuid,a.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(a.map=this.map.toJSON(b).uuid),this.matcap&&this.matcap.isTexture&&(a.matcap=this.matcap.toJSON(b).uuid),this.alphaMap&&this.alphaMap.isTexture&&(a.alphaMap=this.alphaMap.toJSON(b).uuid),this.lightMap&&this.lightMap.isTexture&&(a.lightMap=this.lightMap.toJSON(b).uuid,a.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(a.aoMap=this.aoMap.toJSON(b).uuid,a.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(a.bumpMap=this.bumpMap.toJSON(b).uuid,a.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(a.normalMap=this.normalMap.toJSON(b).uuid,a.normalMapType=this.normalMapType,a.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(a.displacementMap=this.displacementMap.toJSON(b).uuid,a.displacementScale=this.displacementScale,a.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(a.roughnessMap=this.roughnessMap.toJSON(b).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(a.metalnessMap=this.metalnessMap.toJSON(b).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(a.emissiveMap=this.emissiveMap.toJSON(b).uuid),this.specularMap&&this.specularMap.isTexture&&(a.specularMap=this.specularMap.toJSON(b).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(a.specularIntensityMap=this.specularIntensityMap.toJSON(b).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(a.specularColorMap=this.specularColorMap.toJSON(b).uuid),this.envMap&&this.envMap.isTexture&&(a.envMap=this.envMap.toJSON(b).uuid,void 0!==this.combine&&(a.combine=this.combine)),void 0!==this.envMapIntensity&&(a.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(a.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(a.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(a.gradientMap=this.gradientMap.toJSON(b).uuid),void 0!==this.transmission&&(a.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(a.transmissionMap=this.transmissionMap.toJSON(b).uuid),void 0!==this.thickness&&(a.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(a.thicknessMap=this.thicknessMap.toJSON(b).uuid),void 0!==this.attenuationDistance&&(a.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(a.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(a.size=this.size),null!==this.shadowSide&&(a.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(a.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(a.blending=this.blending),this.side!==by&&(a.side=this.side),this.vertexColors&&(a.vertexColors=!0),this.opacity<1&&(a.opacity=this.opacity),1023!==this.format&&(a.format=this.format),!0===this.transparent&&(a.transparent=this.transparent),a.depthFunc=this.depthFunc,a.depthTest=this.depthTest,a.depthWrite=this.depthWrite,a.colorWrite=this.colorWrite,a.stencilWrite=this.stencilWrite,a.stencilWriteMask=this.stencilWriteMask,a.stencilFunc=this.stencilFunc,a.stencilRef=this.stencilRef,a.stencilFuncMask=this.stencilFuncMask,a.stencilFail=this.stencilFail,a.stencilZFail=this.stencilZFail,a.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(a.rotation=this.rotation),!0===this.polygonOffset&&(a.polygonOffset=!0),0!==this.polygonOffsetFactor&&(a.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(a.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(a.linewidth=this.linewidth),void 0!==this.dashSize&&(a.dashSize=this.dashSize),void 0!==this.gapSize&&(a.gapSize=this.gapSize),void 0!==this.scale&&(a.scale=this.scale),!0===this.dithering&&(a.dithering=!0),this.alphaTest>0&&(a.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(a.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(a.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(a.wireframe=this.wireframe),this.wireframeLinewidth>1&&(a.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(a.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(a.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(a.flatShading=this.flatShading),!1===this.visible&&(a.visible=!1),!1===this.toneMapped&&(a.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(a.userData=this.userData),c){const e=d(b.textures),f=d(b.images);e.length>0&&(a.textures=e),f.length>0&&(a.images=f)}return a}clone(){return new this.constructor().copy(this)}copy(a){this.name=a.name,this.fog=a.fog,this.blending=a.blending,this.side=a.side,this.vertexColors=a.vertexColors,this.opacity=a.opacity,this.format=a.format,this.transparent=a.transparent,this.blendSrc=a.blendSrc,this.blendDst=a.blendDst,this.blendEquation=a.blendEquation,this.blendSrcAlpha=a.blendSrcAlpha,this.blendDstAlpha=a.blendDstAlpha,this.blendEquationAlpha=a.blendEquationAlpha,this.depthFunc=a.depthFunc,this.depthTest=a.depthTest,this.depthWrite=a.depthWrite,this.stencilWriteMask=a.stencilWriteMask,this.stencilFunc=a.stencilFunc,this.stencilRef=a.stencilRef,this.stencilFuncMask=a.stencilFuncMask,this.stencilFail=a.stencilFail,this.stencilZFail=a.stencilZFail,this.stencilZPass=a.stencilZPass,this.stencilWrite=a.stencilWrite;const c=a.clippingPlanes;let d=null;if(null!==c){const e=c.length;d=new Array(e);for(let b=0;b!==e;++b)d[b]=c[b].clone()}return this.clippingPlanes=d,this.clipIntersection=a.clipIntersection,this.clipShadows=a.clipShadows,this.shadowSide=a.shadowSide,this.colorWrite=a.colorWrite,this.precision=a.precision,this.polygonOffset=a.polygonOffset,this.polygonOffsetFactor=a.polygonOffsetFactor,this.polygonOffsetUnits=a.polygonOffsetUnits,this.dithering=a.dithering,this.alphaTest=a.alphaTest,this.alphaToCoverage=a.alphaToCoverage,this.premultipliedAlpha=a.premultipliedAlpha,this.visible=a.visible,this.toneMapped=a.toneMapped,this.userData=JSON.parse(JSON.stringify(a.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(a){!0===a&&this.version++}}n.prototype.isMaterial=!0;const aK={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},cU={h:0,s:0,l:0},cV={h:0,s:0,l:0};function cW(b,c,a){return(a<0&&(a+=1),a>1&&(a-=1),a<1/6)?b+(c-b)*6*a:a<.5?c:a<2/3?b+(c-b)*6*(2/3-a):b}function cX(a){return a<.04045?.0773993808*a:Math.pow(.9478672986*a+.0521327014,2.4)}function cY(a){return a<.0031308?12.92*a:1.055*Math.pow(a,.41666)-.055}class g{constructor(a,b,c){if(void 0===b&& void 0===c)return this.set(a);return this.setRGB(a,b,c)}set(a){return a&&a.isColor?this.copy(a):"number"==typeof a?this.setHex(a):"string"==typeof a&&this.setStyle(a),this}setScalar(a){return this.r=a,this.g=a,this.b=a,this}setHex(a){return a=Math.floor(a),this.r=(a>>16&255)/255,this.g=(a>>8&255)/255,this.b=(255&a)/255,this}setRGB(a,b,c){return this.r=a,this.g=b,this.b=c,this}setHSL(c,b,a){var e;if(c=(c%(e=1)+e)%e,b=aA(b,0,1),a=aA(a,0,1),0===b)this.r=this.g=this.b=a;else{const d=a<=.5?a*(1+b):a+b-a*b,f=2*a-d;this.r=cW(f,d,c+1/3),this.g=cW(f,d,c),this.b=cW(f,d,c-1/3)}return this}setStyle(c){function e(a){void 0!==a&&1>parseFloat(a)&&console.warn("THREE.Color: Alpha component of "+c+" will be ignored.")}let d;if(d=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(c)){let a;const h=d[1],f=d[2];switch(h){case"rgb":case"rgba":if(a=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(f))return this.r=Math.min(255,parseInt(a[1],10))/255,this.g=Math.min(255,parseInt(a[2],10))/255,this.b=Math.min(255,parseInt(a[3],10))/255,e(a[4]),this;if(a=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(f))return this.r=Math.min(100,parseInt(a[1],10))/100,this.g=Math.min(100,parseInt(a[2],10))/100,this.b=Math.min(100,parseInt(a[3],10))/100,e(a[4]),this;break;case"hsl":case"hsla":if(a=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(f)){const i=parseFloat(a[1])/360,j=parseInt(a[2],10)/100,k=parseInt(a[3],10)/100;return e(a[4]),this.setHSL(i,j,k)}break}}else if(d=/^\#([A-Fa-f\d]+)$/.exec(c)){const b=d[1],g=b.length;if(3===g)return this.r=parseInt(b.charAt(0)+b.charAt(0),16)/255,this.g=parseInt(b.charAt(1)+b.charAt(1),16)/255,this.b=parseInt(b.charAt(2)+b.charAt(2),16)/255,this;if(6===g)return this.r=parseInt(b.charAt(0)+b.charAt(1),16)/255,this.g=parseInt(b.charAt(2)+b.charAt(3),16)/255,this.b=parseInt(b.charAt(4)+b.charAt(5),16)/255,this}return c&&c.length>0?this.setColorName(c):this}setColorName(a){const b=aK[a.toLowerCase()];return void 0!==b?this.setHex(b):console.warn("THREE.Color: Unknown color "+a),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(a){return this.r=a.r,this.g=a.g,this.b=a.b,this}copyGammaToLinear(a,b=2){return this.r=Math.pow(a.r,b),this.g=Math.pow(a.g,b),this.b=Math.pow(a.b,b),this}copyLinearToGamma(a,c=2){const b=c>0?1/c:1;return this.r=Math.pow(a.r,b),this.g=Math.pow(a.g,b),this.b=Math.pow(a.b,b),this}convertGammaToLinear(a){return this.copyGammaToLinear(this,a),this}convertLinearToGamma(a){return this.copyLinearToGamma(this,a),this}copySRGBToLinear(a){return this.r=cX(a.r),this.g=cX(a.g),this.b=cX(a.b),this}copyLinearToSRGB(a){return this.r=cY(a.r),this.g=cY(a.g),this.b=cY(a.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(h){const e=this.r,a=this.g,b=this.b,c=Math.max(e,a,b),f=Math.min(e,a,b);let d,i;const j=(f+c)/2;if(f===c)d=0,i=0;else{const g=c-f;switch(i=j<=.5?g/(c+f):g/(2-c-f),c){case e:d=(a-b)/g+(a<b?6:0);break;case a:d=(b-e)/g+2;break;case b:d=(e-a)/g+4;break}d/=6}return h.h=d,h.s=i,h.l=j,h}getStyle(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"}offsetHSL(a,b,c){return this.getHSL(cU),cU.h+=a,cU.s+=b,cU.l+=c,this.setHSL(cU.h,cU.s,cU.l),this}add(a){return this.r+=a.r,this.g+=a.g,this.b+=a.b,this}addColors(a,b){return this.r=a.r+b.r,this.g=a.g+b.g,this.b=a.b+b.b,this}addScalar(a){return this.r+=a,this.g+=a,this.b+=a,this}sub(a){return this.r=Math.max(0,this.r-a.r),this.g=Math.max(0,this.g-a.g),this.b=Math.max(0,this.b-a.b),this}multiply(a){return this.r*=a.r,this.g*=a.g,this.b*=a.b,this}multiplyScalar(a){return this.r*=a,this.g*=a,this.b*=a,this}lerp(a,b){return this.r+=(a.r-this.r)*b,this.g+=(a.g-this.g)*b,this.b+=(a.b-this.b)*b,this}lerpColors(a,b,c){return this.r=a.r+(b.r-a.r)*c,this.g=a.g+(b.g-a.g)*c,this.b=a.b+(b.b-a.b)*c,this}lerpHSL(k,a){var b,c,d,e,f,g,h,i,j;this.getHSL(cU),k.getHSL(cV);const l=(b=cU.h,c=cV.h,(1-(d=a))*b+d*c),m=(e=cU.s,f=cV.s,(1-(g=a))*e+g*f),n=(h=cU.l,i=cV.l,(1-(j=a))*h+j*i);return this.setHSL(l,m,n),this}equals(a){return a.r===this.r&&a.g===this.g&&a.b===this.b}fromArray(a,b=0){return this.r=a[b],this.g=a[b+1],this.b=a[b+2],this}toArray(a=[],b=0){return a[b]=this.r,a[b+1]=this.g,a[b+2]=this.b,a}fromBufferAttribute(a,b){return this.r=a.getX(b),this.g=a.getY(b),this.b=a.getZ(b),!0===a.normalized&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}g.NAMES=aK,g.prototype.isColor=!0,g.prototype.r=1,g.prototype.g=1,g.prototype.b=1;class aL extends n{constructor(a){super(),this.type="MeshBasicMaterial",this.color=new g(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(a)}copy(a){return super.copy(a),this.color.copy(a.color),this.map=a.map,this.lightMap=a.lightMap,this.lightMapIntensity=a.lightMapIntensity,this.aoMap=a.aoMap,this.aoMapIntensity=a.aoMapIntensity,this.specularMap=a.specularMap,this.alphaMap=a.alphaMap,this.envMap=a.envMap,this.combine=a.combine,this.reflectivity=a.reflectivity,this.refractionRatio=a.refractionRatio,this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this.wireframeLinecap=a.wireframeLinecap,this.wireframeLinejoin=a.wireframeLinejoin,this}}aL.prototype.isMeshBasicMaterial=!0;const cZ=new a,c$=new j;class q{constructor(a,b,c){if(Array.isArray(a))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=a,this.itemSize=b,this.count=void 0!==a?a.length/b:0,this.normalized=!0===c,this.usage=35044,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(a){!0===a&&this.version++}setUsage(a){return this.usage=a,this}copy(a){return this.name=a.name,this.array=new a.array.constructor(a.array),this.itemSize=a.itemSize,this.count=a.count,this.normalized=a.normalized,this.usage=a.usage,this}copyAt(b,c,d){b*=this.itemSize,d*=c.itemSize;for(let a=0,e=this.itemSize;a<e;a++)this.array[b+a]=c.array[d+a];return this}copyArray(a){return this.array.set(a),this}copyColorsArray(e){const c=this.array;let d=0;for(let b=0,f=e.length;b<f;b++){let a=e[b];void 0===a&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",b),a=new g),c[d++]=a.r,c[d++]=a.g,c[d++]=a.b}return this}copyVector2sArray(c){const d=this.array;let e=0;for(let a=0,f=c.length;a<f;a++){let b=c[a];void 0===b&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",a),b=new j),d[e++]=b.x,d[e++]=b.y}return this}copyVector3sArray(f){const d=this.array;let e=0;for(let c=0,g=f.length;c<g;c++){let b=f[c];void 0===b&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",c),b=new a),d[e++]=b.x,d[e++]=b.y,d[e++]=b.z}return this}copyVector4sArray(e){const b=this.array;let c=0;for(let d=0,f=e.length;d<f;d++){let a=e[d];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",d),a=new D),b[c++]=a.x,b[c++]=a.y,b[c++]=a.z,b[c++]=a.w}return this}applyMatrix3(c){if(2===this.itemSize)for(let a=0,d=this.count;a<d;a++)c$.fromBufferAttribute(this,a),c$.applyMatrix3(c),this.setXY(a,c$.x,c$.y);else if(3===this.itemSize)for(let b=0,e=this.count;b<e;b++)cZ.fromBufferAttribute(this,b),cZ.applyMatrix3(c),this.setXYZ(b,cZ.x,cZ.y,cZ.z);return this}applyMatrix4(b){for(let a=0,c=this.count;a<c;a++)cZ.x=this.getX(a),cZ.y=this.getY(a),cZ.z=this.getZ(a),cZ.applyMatrix4(b),this.setXYZ(a,cZ.x,cZ.y,cZ.z);return this}applyNormalMatrix(b){for(let a=0,c=this.count;a<c;a++)cZ.x=this.getX(a),cZ.y=this.getY(a),cZ.z=this.getZ(a),cZ.applyNormalMatrix(b),this.setXYZ(a,cZ.x,cZ.y,cZ.z);return this}transformDirection(b){for(let a=0,c=this.count;a<c;a++)cZ.x=this.getX(a),cZ.y=this.getY(a),cZ.z=this.getZ(a),cZ.transformDirection(b),this.setXYZ(a,cZ.x,cZ.y,cZ.z);return this}set(a,b=0){return this.array.set(a,b),this}getX(a){return this.array[a*this.itemSize]}setX(a,b){return this.array[a*this.itemSize]=b,this}getY(a){return this.array[a*this.itemSize+1]}setY(a,b){return this.array[a*this.itemSize+1]=b,this}getZ(a){return this.array[a*this.itemSize+2]}setZ(a,b){return this.array[a*this.itemSize+2]=b,this}getW(a){return this.array[a*this.itemSize+3]}setW(a,b){return this.array[a*this.itemSize+3]=b,this}setXY(a,b,c){return a*=this.itemSize,this.array[a+0]=b,this.array[a+1]=c,this}setXYZ(a,b,c,d){return a*=this.itemSize,this.array[a+0]=b,this.array[a+1]=c,this.array[a+2]=d,this}setXYZW(a,b,c,d,e){return a*=this.itemSize,this.array[a+0]=b,this.array[a+1]=c,this.array[a+2]=d,this.array[a+3]=e,this}onUpload(a){return this.onUploadCallback=a,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const a={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return""!==this.name&&(a.name=this.name),35044!==this.usage&&(a.usage=this.usage),(0!==this.updateRange.offset|| -1!==this.updateRange.count)&&(a.updateRange=this.updateRange),a}}q.prototype.isBufferAttribute=!0;class c_ extends q{constructor(a,b,c){super(new Uint16Array(a),b,c)}}class c0 extends q{constructor(a,b,c){super(new Uint32Array(a),b,c)}}(class extends q{constructor(a,b,c){super(new Uint16Array(a),b,c)}}).prototype.isFloat16BufferAttribute=!0;class c1 extends q{constructor(a,b,c){super(new Float32Array(a),b,c)}}let c2=0;const c3=new c,c4=new i,c5=new a,c6=new m,c7=new m,c8=new a;class f extends y{constructor(){super(),Object.defineProperty(this,"id",{value:c2++}),this.uuid=az(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(a){return Array.isArray(a)?this.index=new(bS(a)>65535?c0:c_)(a,1):this.index=a,this}getAttribute(a){return this.attributes[a]}setAttribute(a,b){return this.attributes[a]=b,this}deleteAttribute(a){return delete this.attributes[a],this}hasAttribute(a){return void 0!==this.attributes[a]}addGroup(a,b,c=0){this.groups.push({start:a,count:b,materialIndex:c})}clearGroups(){this.groups=[]}setDrawRange(a,b){this.drawRange.start=a,this.drawRange.count=b}applyMatrix4(a){const b=this.attributes.position;void 0!==b&&(b.applyMatrix4(a),b.needsUpdate=!0);const c=this.attributes.normal;if(void 0!==c){const e=new l().getNormalMatrix(a);c.applyNormalMatrix(e),c.needsUpdate=!0}const d=this.attributes.tangent;return void 0!==d&&(d.transformDirection(a),d.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(a){return c3.makeRotationFromQuaternion(a),this.applyMatrix4(c3),this}rotateX(a){return c3.makeRotationX(a),this.applyMatrix4(c3),this}rotateY(a){return c3.makeRotationY(a),this.applyMatrix4(c3),this}rotateZ(a){return c3.makeRotationZ(a),this.applyMatrix4(c3),this}translate(a,b,c){return c3.makeTranslation(a,b,c),this.applyMatrix4(c3),this}scale(a,b,c){return c3.makeScale(a,b,c),this.applyMatrix4(c3),this}lookAt(a){return c4.lookAt(a),c4.updateMatrix(),this.applyMatrix4(c4.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(c5).negate(),this.translate(c5.x,c5.y,c5.z),this}setFromPoints(c){const d=[];for(let a=0,e=c.length;a<e;a++){const b=c[a];d.push(b.x,b.y,b.z||0)}return this.setAttribute("position",new c1(d,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new m);const b=this.attributes.position,c=this.morphAttributes.position;if(b&&b.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new a(-1/0,-1/0,-1/0),new a(Infinity,Infinity,Infinity));return}if(void 0!==b){if(this.boundingBox.setFromBufferAttribute(b),c)for(let d=0,e=c.length;d<e;d++){const f=c[d];c6.setFromBufferAttribute(f),this.morphTargetsRelative?(c8.addVectors(this.boundingBox.min,c6.min),this.boundingBox.expandByPoint(c8),c8.addVectors(this.boundingBox.max,c6.max),this.boundingBox.expandByPoint(c8)):(this.boundingBox.expandByPoint(c6.min),this.boundingBox.expandByPoint(c6.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new E);const b=this.attributes.position,c=this.morphAttributes.position;if(b&&b.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new a,1/0);return}if(b){const f=this.boundingSphere.center;if(c6.setFromBufferAttribute(b),c)for(let g=0,k=c.length;g<k;g++){const l=c[g];c7.setFromBufferAttribute(l),this.morphTargetsRelative?(c8.addVectors(c6.min,c7.min),c6.expandByPoint(c8),c8.addVectors(c6.max,c7.max),c6.expandByPoint(c8)):(c6.expandByPoint(c7.min),c6.expandByPoint(c7.max))}c6.getCenter(f);let d=0;for(let h=0,m=b.count;h<m;h++)c8.fromBufferAttribute(b,h),d=Math.max(d,f.distanceToSquared(c8));if(c)for(let i=0,n=c.length;i<n;i++){const j=c[i],o=this.morphTargetsRelative;for(let e=0,p=j.count;e<p;e++)c8.fromBufferAttribute(j,e),o&&(c5.fromBufferAttribute(b,e),c8.add(c5)),d=Math.max(d,f.distanceToSquared(c8))}this.boundingSphere.radius=Math.sqrt(d),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const l=this.index,b=this.attributes;if(null===l|| void 0===b.position|| void 0===b.normal|| void 0===b.uv){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const c=l.array,s=b.position.array,C=b.normal.array,D=b.uv.array,m=s.length/3;void 0===b.tangent&&this.setAttribute("tangent",new q(new Float32Array(4*m),4));const E=b.tangent.array,t=[],u=[];for(let g=0;g<m;g++)t[g]=new a,u[g]=new a;const F=new a,G=new a,H=new a,I=new j,J=new j,K=new j,L=new a,M=new a;function v(a,b,c){F.fromArray(s,3*a),G.fromArray(s,3*b),H.fromArray(s,3*c),I.fromArray(D,2*a),J.fromArray(D,2*b),K.fromArray(D,2*c),G.sub(F),H.sub(F),J.sub(I),K.sub(I);const d=1/(J.x*K.y-K.x*J.y);isFinite(d)&&(L.copy(G).multiplyScalar(K.y).addScaledVector(H,-J.y).multiplyScalar(d),M.copy(H).multiplyScalar(J.x).addScaledVector(G,-K.x).multiplyScalar(d),t[a].add(L),t[b].add(L),t[c].add(L),u[a].add(M),u[b].add(M),u[c].add(M))}let d=this.groups;0===d.length&&(d=[{start:0,count:c.length}]);for(let h=0,w=d.length;h<w;++h){const n=d[h],o=n.start,x=n.count;for(let e=o,y=o+x;e<y;e+=3)v(c[e+0],c[e+1],c[e+2])}const N=new a,O=new a,P=new a,Q=new a;function i(a){P.fromArray(C,3*a),Q.copy(P);const b=t[a];N.copy(b),N.sub(P.multiplyScalar(P.dot(b))).normalize(),O.crossVectors(Q,b);const c=O.dot(u[a]);E[4*a]=N.x,E[4*a+1]=N.y,E[4*a+2]=N.z,E[4*a+3]=c<0?-1:1}for(let k=0,z=d.length;k<z;++k){const p=d[k],r=p.start,A=p.count;for(let f=r,B=r+A;f<B;f+=3)i(c[f+0]),i(c[f+1]),i(c[f+2])}}computeVertexNormals(){const g=this.index,d=this.getAttribute("position");if(void 0!==d){let c=this.getAttribute("normal");if(void 0===c)c=new q(new Float32Array(3*d.count),3),this.setAttribute("normal",c);else for(let o=0,t=c.count;o<t;o++)c.setXYZ(o,0,0,0);const l=new a,f=new a,m=new a,h=new a,i=new a,j=new a,b=new a,n=new a;if(g)for(let k=0,u=g.count;k<u;k+=3){const p=g.getX(k+0),r=g.getX(k+1),s=g.getX(k+2);l.fromBufferAttribute(d,p),f.fromBufferAttribute(d,r),m.fromBufferAttribute(d,s),b.subVectors(m,f),n.subVectors(l,f),b.cross(n),h.fromBufferAttribute(c,p),i.fromBufferAttribute(c,r),j.fromBufferAttribute(c,s),h.add(b),i.add(b),j.add(b),c.setXYZ(p,h.x,h.y,h.z),c.setXYZ(r,i.x,i.y,i.z),c.setXYZ(s,j.x,j.y,j.z)}else for(let e=0,v=d.count;e<v;e+=3)l.fromBufferAttribute(d,e+0),f.fromBufferAttribute(d,e+1),m.fromBufferAttribute(d,e+2),b.subVectors(m,f),n.subVectors(l,f),b.cross(n),c.setXYZ(e+0,b.x,b.y,b.z),c.setXYZ(e+1,b.x,b.y,b.z),c.setXYZ(e+2,b.x,b.y,b.z);this.normalizeNormals(),c.needsUpdate=!0}}merge(a,b){if(!(a&&a.isBufferGeometry)){console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",a);return}void 0===b&&(b=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const e=this.attributes;for(const c in e){if(void 0===a.attributes[c])continue;const k=e[c],f=k.array,g=a.attributes[c],h=g.array,i=g.itemSize*b,l=Math.min(h.length,f.length-i);for(let d=0,j=i;d<l;d++,j++)f[j]=h[d]}return this}normalizeNormals(){const b=this.attributes.normal;for(let a=0,c=b.count;a<c;a++)c8.fromBufferAttribute(b,a),c8.normalize(),b.setXYZ(a,c8.x,c8.y,c8.z)}toNonIndexed(){function e(a,b){const e=a.array,c=a.itemSize,i=a.normalized,f=new e.constructor(b.length*c);let g=0,j=0;for(let d=0,k=b.length;d<k;d++){g=a.isInterleavedBufferAttribute?b[d]*a.data.stride+a.offset:b[d]*c;for(let h=0;h<c;h++)f[j++]=e[g++]}return new q(f,c,i)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const a=new f,g=this.index.array,h=this.attributes;for(const i in h){const o=h[i],p=e(o,g);a.setAttribute(i,p)}const j=this.morphAttributes;for(const k in j){const l=[],m=j[k];for(let b=0,r=m.length;b<r;b++){const s=m[b],t=e(s,g);l.push(t)}a.morphAttributes[k]=l}a.morphTargetsRelative=this.morphTargetsRelative;const n=this.groups;for(let c=0,u=n.length;c<u;c++){const d=n[c];a.addGroup(d.start,d.count,d.materialIndex)}return a}toJSON(){const a={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(a.uuid=this.uuid,a.type=this.type,""!==this.name&&(a.name=this.name),Object.keys(this.userData).length>0&&(a.userData=this.userData),void 0!==this.parameters){const b=this.parameters;for(const c in b)void 0!==b[c]&&(a[c]=b[c]);return a}a.data={attributes:{}};const d=this.index;null!==d&&(a.data.index={type:d.array.constructor.name,array:Array.prototype.slice.call(d.array)});const h=this.attributes;for(const i in h){const o=h[i];a.data.attributes[i]=o.toJSON(a.data)}const j={};let k=!1;for(const l in this.morphAttributes){const m=this.morphAttributes[l],e=[];for(let f=0,p=m.length;f<p;f++){const q=m[f];e.push(q.toJSON(a.data))}e.length>0&&(j[l]=e,k=!0)}k&&(a.data.morphAttributes=j,a.data.morphTargetsRelative=this.morphTargetsRelative);const n=this.groups;n.length>0&&(a.data.groups=JSON.parse(JSON.stringify(n)));const g=this.boundingSphere;return null!==g&&(a.data.boundingSphere={center:g.center.toArray(),radius:g.radius}),a}clone(){return new this.constructor().copy(this)}copy(a){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const b={};this.name=a.name;const f=a.index;null!==f&&this.setIndex(f.clone(b));const g=a.attributes;for(const h in g){const p=g[h];this.setAttribute(h,p.clone(b))}const i=a.morphAttributes;for(const j in i){const k=[],l=i[j];for(let c=0,q=l.length;c<q;c++)k.push(l[c].clone(b));this.morphAttributes[j]=k}this.morphTargetsRelative=a.morphTargetsRelative;const m=a.groups;for(let d=0,r=m.length;d<r;d++){const e=m[d];this.addGroup(e.start,e.count,e.materialIndex)}const n=a.boundingBox;null!==n&&(this.boundingBox=n.clone());const o=a.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=a.drawRange.start,this.drawRange.count=a.drawRange.count,this.userData=a.userData,void 0!==a.parameters&&(this.parameters=Object.assign({},a.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}f.prototype.isBufferGeometry=!0;const c9=new c,da=new z,db=new E,dc=new a,dd=new a,de=new a,df=new a,dg=new a,dh=new a,di=new a,dj=new a,dk=new a,dl=new j,dm=new j,dn=new j,dp=new a,dq=new a;class F extends i{constructor(a=new f,b=new aL){super(),this.type="Mesh",this.geometry=a,this.material=b,this.updateMorphTargets()}copy(a){return super.copy(a),void 0!==a.morphTargetInfluences&&(this.morphTargetInfluences=a.morphTargetInfluences.slice()),void 0!==a.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},a.morphTargetDictionary)),this.material=a.material,this.geometry=a.geometry,this}updateMorphTargets(){const b=this.geometry;if(b.isBufferGeometry){const d=b.morphAttributes,e=Object.keys(d);if(e.length>0){const c=d[e[0]];if(void 0!==c){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let a=0,g=c.length;a<g;a++){const h=c[a].name||String(a);this.morphTargetInfluences.push(0),this.morphTargetDictionary[h]=a}}}}else{const f=b.morphTargets;void 0!==f&&f.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}raycast(g,n){const a=this.geometry,e=this.material,v=this.matrixWorld;if(void 0===e)return;if(null===a.boundingSphere&&a.computeBoundingSphere(),db.copy(a.boundingSphere),db.applyMatrix4(v),!1===g.ray.intersectsSphere(db))return;if(c9.copy(v).invert(),da.copy(g.ray).applyMatrix4(c9),null!==a.boundingBox&& !1===da.intersectsBox(a.boundingBox))return;let b;if(a.isBufferGeometry){const d=a.index,f=a.attributes.position,o=a.morphAttributes.position,p=a.morphTargetsRelative,q=a.attributes.uv,r=a.attributes.uv2,s=a.groups,c=a.drawRange;if(null!==d)if(Array.isArray(e))for(let t=0,w=s.length;t<w;t++){const l=s[t],x=e[l.materialIndex],y=Math.max(l.start,c.start),z=Math.min(d.count,Math.min(l.start+l.count,c.start+c.count));for(let h=y,A=z;h<A;h+=3){const B=d.getX(h),C=d.getX(h+1),D=d.getX(h+2);(b=dr(this,x,g,da,f,o,p,q,r,B,C,D))&&(b.faceIndex=Math.floor(h/3),b.face.materialIndex=l.materialIndex,n.push(b))}}else{const E=Math.max(0,c.start),F=Math.min(d.count,c.start+c.count);for(let i=E,G=F;i<G;i+=3){const H=d.getX(i),I=d.getX(i+1),J=d.getX(i+2);(b=dr(this,e,g,da,f,o,p,q,r,H,I,J))&&(b.faceIndex=Math.floor(i/3),n.push(b))}}else if(void 0!==f)if(Array.isArray(e))for(let u=0,K=s.length;u<K;u++){const m=s[u],L=e[m.materialIndex],M=Math.max(m.start,c.start),N=Math.min(f.count,Math.min(m.start+m.count,c.start+c.count));for(let j=M,O=N;j<O;j+=3){const P=j,Q=j+1,R=j+2;(b=dr(this,L,g,da,f,o,p,q,r,P,Q,R))&&(b.faceIndex=Math.floor(j/3),b.face.materialIndex=m.materialIndex,n.push(b))}}else{const S=Math.max(0,c.start),T=Math.min(f.count,c.start+c.count);for(let k=S,U=T;k<U;k+=3){const V=k,W=k+1,X=k+2;(b=dr(this,e,g,da,f,o,p,q,r,V,W,X))&&(b.faceIndex=Math.floor(k/3),n.push(b))}}}else a.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}function dr(c,q,r,s,l,m,u,h,i,d,e,f){dc.fromBufferAttribute(l,d),dd.fromBufferAttribute(l,e),de.fromBufferAttribute(l,f);const o=c.morphTargetInfluences;if(m&&o){di.set(0,0,0),dj.set(0,0,0),dk.set(0,0,0);for(let k=0,v=m.length;k<v;k++){const b=o[k],n=m[k];0!==b&&(df.fromBufferAttribute(n,d),dg.fromBufferAttribute(n,e),dh.fromBufferAttribute(n,f),u?(di.addScaledVector(df,b),dj.addScaledVector(dg,b),dk.addScaledVector(dh,b)):(di.addScaledVector(df.sub(dc),b),dj.addScaledVector(dg.sub(dd),b),dk.addScaledVector(dh.sub(de),b)))}dc.add(di),dd.add(dj),de.add(dk)}c.isSkinnedMesh&&(c.boneTransform(d,dc),c.boneTransform(e,dd),c.boneTransform(f,de));const g=function(d,e,a,f,g,h,i,b){if(null===(e.side===bz?f.intersectTriangle(i,h,g,!0,b):f.intersectTriangle(g,h,i,e.side!==bA,b)))return null;dq.copy(b),dq.applyMatrix4(d.matrixWorld);const c=a.ray.origin.distanceTo(dq);return c<a.near||c>a.far?null:{distance:c,point:dq.clone(),object:d}}(c,q,r,s,dc,dd,de,dp);if(g){h&&(dl.fromBufferAttribute(h,d),dm.fromBufferAttribute(h,e),dn.fromBufferAttribute(h,f),g.uv=t.getUV(dp,dc,dd,de,dl,dm,dn,new j)),i&&(dl.fromBufferAttribute(i,d),dm.fromBufferAttribute(i,e),dn.fromBufferAttribute(i,f),g.uv2=t.getUV(dp,dc,dd,de,dl,dm,dn,new j));const p={a:d,b:e,c:f,normal:new a,materialIndex:0};t.getNormal(dc,dd,de,p.normal),g.face=p}return g}F.prototype.isMesh=!0;class ds extends f{constructor(b=1,c=1,d=1,e=1,f=1,g=1){super(),this.type="BoxGeometry",this.parameters={width:b,height:c,depth:d,widthSegments:e,heightSegments:f,depthSegments:g};const m=this;e=Math.floor(e),f=Math.floor(f),g=Math.floor(g);const i=[],j=[],k=[],l=[];let n=0,o=0;function h(r,s,t,A,B,u,v,w,f,g,C){const D=u/f,E=v/g,F=u/2,G=v/2,H=w/2,e=f+1,I=g+1;let x=0,q=0;const b=new a;for(let h=0;h<I;h++){const J=h*E-G;for(let p=0;p<e;p++){const K=p*D-F;b[r]=K*A,b[s]=J*B,b[t]=H,j.push(b.x,b.y,b.z),b[r]=0,b[s]=0,b[t]=w>0?1:-1,k.push(b.x,b.y,b.z),l.push(p/f),l.push(1-h/g),x+=1}}for(let c=0;c<g;c++)for(let d=0;d<f;d++){const L=n+d+e*c,y=n+d+e*(c+1),M=n+(d+1)+e*(c+1),z=n+(d+1)+e*c;i.push(L,y,z),i.push(y,M,z),q+=6}m.addGroup(o,q,C),o+=q,n+=x}h("z","y","x",-1,-1,d,c,b,g,f,0),h("z","y","x",1,-1,d,c,-b,g,f,1),h("x","z","y",1,1,b,d,c,e,g,2),h("x","z","y",1,-1,b,d,-c,e,g,3),h("x","y","z",1,-1,b,c,d,e,f,4),h("x","y","z",-1,-1,b,c,-d,e,f,5),this.setIndex(i),this.setAttribute("position",new c1(j,3)),this.setAttribute("normal",new c1(k,3)),this.setAttribute("uv",new c1(l,2))}static fromJSON(a){return new ds(a.width,a.height,a.depth,a.widthSegments,a.heightSegments,a.depthSegments)}}function aM(e){const c={};for(const b in e)for(const d in c[b]={},e[b]){const a=e[b][d];a&&(a.isColor||a.isMatrix3||a.isMatrix4||a.isVector2||a.isVector3||a.isVector4||a.isTexture||a.isQuaternion)?c[b][d]=a.clone():Array.isArray(a)?c[b][d]=a.slice():c[b][d]=a}return c}function k(b){const c={};for(let a=0;a<b.length;a++){const d=aM(b[a]);for(const e in d)c[e]=d[e]}return c}const dt={clone:aM,merge:k};class O extends n{constructor(a){super(),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==a&&(void 0!==a.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(a))}copy(a){return super.copy(a),this.fragmentShader=a.fragmentShader,this.vertexShader=a.vertexShader,this.uniforms=aM(a.uniforms),this.defines=Object.assign({},a.defines),this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this.lights=a.lights,this.clipping=a.clipping,this.extensions=Object.assign({},a.extensions),this.glslVersion=a.glslVersion,this}toJSON(e){const b=super.toJSON(e);for(const c in b.glslVersion=this.glslVersion,b.uniforms={},this.uniforms){const g=this.uniforms[c],a=g.value;a&&a.isTexture?b.uniforms[c]={type:"t",value:a.toJSON(e).uuid}:a&&a.isColor?b.uniforms[c]={type:"c",value:a.getHex()}:a&&a.isVector2?b.uniforms[c]={type:"v2",value:a.toArray()}:a&&a.isVector3?b.uniforms[c]={type:"v3",value:a.toArray()}:a&&a.isVector4?b.uniforms[c]={type:"v4",value:a.toArray()}:a&&a.isMatrix3?b.uniforms[c]={type:"m3",value:a.toArray()}:a&&a.isMatrix4?b.uniforms[c]={type:"m4",value:a.toArray()}:b.uniforms[c]={value:a}}Object.keys(this.defines).length>0&&(b.defines=this.defines),b.vertexShader=this.vertexShader,b.fragmentShader=this.fragmentShader;const d={};for(const f in this.extensions)!0===this.extensions[f]&&(d[f]=!0);return Object.keys(d).length>0&&(b.extensions=d),b}}O.prototype.isShaderMaterial=!0;class K extends i{constructor(){super(),this.type="Camera",this.matrixWorldInverse=new c,this.projectionMatrix=new c,this.projectionMatrixInverse=new c}copy(a,b){return super.copy(a,b),this.matrixWorldInverse.copy(a.matrixWorldInverse),this.projectionMatrix.copy(a.projectionMatrix),this.projectionMatrixInverse.copy(a.projectionMatrixInverse),this}getWorldDirection(b){this.updateWorldMatrix(!0,!1);const a=this.matrixWorld.elements;return b.set(-a[8],-a[9],-a[10]).normalize()}updateMatrixWorld(a){super.updateMatrixWorld(a),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(a,b){super.updateWorldMatrix(a,b),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}K.prototype.isCamera=!0;class P extends K{constructor(a=50,b=1,c=.1,d=2e3){super(),this.type="PerspectiveCamera",this.fov=a,this.zoom=1,this.near=c,this.far=d,this.focus=10,this.aspect=b,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(a,b){return super.copy(a,b),this.fov=a.fov,this.zoom=a.zoom,this.near=a.near,this.far=a.far,this.focus=a.focus,this.aspect=a.aspect,this.view=null===a.view?null:Object.assign({},a.view),this.filmGauge=a.filmGauge,this.filmOffset=a.filmOffset,this}setFocalLength(a){const b=.5*this.getFilmHeight()/a;this.fov=2*ax*Math.atan(b),this.updateProjectionMatrix()}getFocalLength(){const a=Math.tan(.5*aw*this.fov);return .5*this.getFilmHeight()/a}getEffectiveFOV(){return 2*ax*Math.atan(Math.tan(.5*aw*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(a,b,c,d,e,f){this.aspect=a/b,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=a,this.view.fullHeight=b,this.view.offsetX=c,this.view.offsetY=d,this.view.width=e,this.view.height=f,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const f=this.near;let b=f*Math.tan(.5*aw*this.fov)/this.zoom,c=2*b,d=this.aspect*c,e=-0.5*d;const a=this.view;if(null!==this.view&&this.view.enabled){const g=a.fullWidth,h=a.fullHeight;e+=a.offsetX*d/g,b-=a.offsetY*c/h,d*=a.width/g,c*=a.height/h}const i=this.filmOffset;0!==i&&(e+=f*i/this.getFilmWidth()),this.projectionMatrix.makePerspective(e,e+d,b,b-c,f,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(b){const a=super.toJSON(b);return a.object.fov=this.fov,a.object.zoom=this.zoom,a.object.near=this.near,a.object.far=this.far,a.object.focus=this.focus,a.object.aspect=this.aspect,null!==this.view&&(a.object.view=Object.assign({},this.view)),a.object.filmGauge=this.filmGauge,a.object.filmOffset=this.filmOffset,a}}P.prototype.isPerspectiveCamera=!0;class aa extends i{constructor(b,c,j){if(super(),this.type="CubeCamera",!0!==j.isWebGLCubeRenderTarget){console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");return}this.renderTarget=j;const d=new P(90,1,b,c);d.layers=this.layers,d.up.set(0,-1,0),d.lookAt(new a(1,0,0)),this.add(d);const e=new P(90,1,b,c);e.layers=this.layers,e.up.set(0,-1,0),e.lookAt(new a(-1,0,0)),this.add(e);const f=new P(90,1,b,c);f.layers=this.layers,f.up.set(0,0,1),f.lookAt(new a(0,1,0)),this.add(f);const g=new P(90,1,b,c);g.layers=this.layers,g.up.set(0,0,-1),g.lookAt(new a(0,-1,0)),this.add(g);const h=new P(90,1,b,c);h.layers=this.layers,h.up.set(0,-1,0),h.lookAt(new a(0,0,1)),this.add(h);const i=new P(90,1,b,c);i.layers=this.layers,i.up.set(0,-1,0),i.lookAt(new a(0,0,-1)),this.add(i)}update(a,c){null===this.parent&&this.updateMatrixWorld();const b=this.renderTarget,[d,e,f,g,h,i]=this.children,j=a.xr.enabled,k=a.getRenderTarget();a.xr.enabled=!1;const l=b.texture.generateMipmaps;b.texture.generateMipmaps=!1,a.setRenderTarget(b,0),a.render(c,d),a.setRenderTarget(b,1),a.render(c,e),a.setRenderTarget(b,2),a.render(c,f),a.setRenderTarget(b,3),a.render(c,g),a.setRenderTarget(b,4),a.render(c,h),b.texture.generateMipmaps=l,a.setRenderTarget(b,5),a.render(c,i),a.setRenderTarget(k),a.xr.enabled=j}}class ab extends s{constructor(a,b,c,d,e,f,g,h,i,j){super(a=void 0!==a?a:[],b=void 0!==b?b:301,c,d,e,f,g,h,i,j),this.flipY=!1}get images(){return this.image}set images(a){this.image=a}}ab.prototype.isCubeTexture=!0;class aN extends J{constructor(b,a,c){Number.isInteger(a)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),a=c),super(b,b,a),a=a||{},this.texture=new ab(void 0,a.mapping,a.wrapS,a.wrapT,a.magFilter,a.minFilter,a.format,a.type,a.anisotropy,a.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==a.generateMipmaps&&a.generateMipmaps,this.texture.minFilter=void 0!==a.minFilter?a.minFilter:bH,this.texture._needsFlipEnvMap=!1}fromEquirectangularTexture(e,a){this.texture.type=a.type,this.texture.format=1023,this.texture.encoding=a.encoding,this.texture.generateMipmaps=a.generateMipmaps,this.texture.minFilter=a.minFilter,this.texture.magFilter=a.magFilter;const b={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},f=new ds(5,5,5),d=new O({name:"CubemapFromEquirect",uniforms:aM(b.uniforms),vertexShader:b.vertexShader,fragmentShader:b.fragmentShader,side:bz,blending:0});d.uniforms.tEquirect.value=a;const c=new F(f,d),g=a.minFilter;a.minFilter===bJ&&(a.minFilter=bH);const h=new aa(1,10,this);return h.update(e,c),a.minFilter=g,c.geometry.dispose(),c.material.dispose(),this}clear(a,c,d,e){const f=a.getRenderTarget();for(let b=0;b<6;b++)a.setRenderTarget(this,b),a.clear(c,d,e);a.setRenderTarget(f)}}aN.prototype.isWebGLCubeRenderTarget=!0;const du=new a,dv=new a,dw=new l;class ac{constructor(b=new a(1,0,0),c=0){this.normal=b,this.constant=c}set(a,b){return this.normal.copy(a),this.constant=b,this}setComponents(a,b,c,d){return this.normal.set(a,b,c),this.constant=d,this}setFromNormalAndCoplanarPoint(a,b){return this.normal.copy(a),this.constant=-b.dot(this.normal),this}setFromCoplanarPoints(a,b,c){const d=du.subVectors(c,b).cross(dv.subVectors(a,b)).normalize();return this.setFromNormalAndCoplanarPoint(d,a),this}copy(a){return this.normal.copy(a.normal),this.constant=a.constant,this}normalize(){const a=1/this.normal.length();return this.normal.multiplyScalar(a),this.constant*=a,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(a){return this.normal.dot(a)+this.constant}distanceToSphere(a){return this.distanceToPoint(a.center)-a.radius}projectPoint(a,b){return b.copy(this.normal).multiplyScalar(-this.distanceToPoint(a)).add(a)}intersectLine(a,c){const d=a.delta(du),e=this.normal.dot(d);if(0===e)return 0===this.distanceToPoint(a.start)?c.copy(a.start):null;const b=-(a.start.dot(this.normal)+this.constant)/e;return b<0||b>1?null:c.copy(d).multiplyScalar(b).add(a.start)}intersectsLine(a){const b=this.distanceToPoint(a.start),c=this.distanceToPoint(a.end);return b<0&&c>0||c<0&&b>0}intersectsBox(a){return a.intersectsPlane(this)}intersectsSphere(a){return a.intersectsPlane(this)}coplanarPoint(a){return a.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(a,b){const c=b||dw.getNormalMatrix(a),d=this.coplanarPoint(du).applyMatrix4(a),e=this.normal.applyMatrix3(c).normalize();return this.constant=-d.dot(e),this}translate(a){return this.constant-=a.dot(this.normal),this}equals(a){return a.normal.equals(this.normal)&&a.constant===this.constant}clone(){return new this.constructor().copy(this)}}ac.prototype.isPlane=!0;const dx=new E,dy=new a;class aO{constructor(a=new ac,b=new ac,c=new ac,d=new ac,e=new ac,f=new ac){this.planes=[a,b,c,d,e,f]}set(b,c,d,e,f,g){const a=this.planes;return a[0].copy(b),a[1].copy(c),a[2].copy(d),a[3].copy(e),a[4].copy(f),a[5].copy(g),this}copy(b){const c=this.planes;for(let a=0;a<6;a++)c[a].copy(b.planes[a]);return this}setFromProjectionMatrix(s){const b=this.planes,a=s.elements,g=a[0],h=a[1],i=a[2],c=a[3],j=a[4],k=a[5],l=a[6],d=a[7],m=a[8],n=a[9],o=a[10],e=a[11],p=a[12],q=a[13],r=a[14],f=a[15];return b[0].setComponents(c-g,d-j,e-m,f-p).normalize(),b[1].setComponents(c+g,d+j,e+m,f+p).normalize(),b[2].setComponents(c+h,d+k,e+n,f+q).normalize(),b[3].setComponents(c-h,d-k,e-n,f-q).normalize(),b[4].setComponents(c-i,d-l,e-o,f-r).normalize(),b[5].setComponents(c+i,d+l,e+o,f+r).normalize(),this}intersectsObject(b){const a=b.geometry;return null===a.boundingSphere&&a.computeBoundingSphere(),dx.copy(a.boundingSphere).applyMatrix4(b.matrixWorld),this.intersectsSphere(dx)}intersectsSprite(a){return dx.center.set(0,0,0),dx.radius=.7071067811865476,dx.applyMatrix4(a.matrixWorld),this.intersectsSphere(dx)}intersectsSphere(b){const c=this.planes,d=b.center,e=-b.radius;for(let a=0;a<6;a++){const f=c[a].distanceToPoint(d);if(f<e)return!1}return!0}intersectsBox(a){const d=this.planes;for(let c=0;c<6;c++){const b=d[c];if(dy.x=b.normal.x>0?a.max.x:a.min.x,dy.y=b.normal.y>0?a.max.y:a.min.y,dy.z=b.normal.z>0?a.max.z:a.min.z,0>b.distanceToPoint(dy))return!1}return!0}containsPoint(b){const c=this.planes;for(let a=0;a<6;a++)if(0>c[a].distanceToPoint(b))return!1;return!0}clone(){return new this.constructor().copy(this)}}function dz(){let a=null,b=!1,c=null,d=null;function e(b,f){c(b,f),d=a.requestAnimationFrame(e)}return{start:function(){!0!==b&&null!==c&&(d=a.requestAnimationFrame(e),b=!0)},stop:function(){a.cancelAnimationFrame(d),b=!1},setAnimationLoop:function(a){c=a},setContext:function(b){a=b}}}function dA(b,a){const c=a.isWebGL2,d=new WeakMap;return{get:function(a){return a.isInterleavedBufferAttribute&&(a=a.data),d.get(a)},remove:function(a){a.isInterleavedBufferAttribute&&(a=a.data);const c=d.get(a);c&&(b.deleteBuffer(c.buffer),d.delete(a))},update:function(a,f){if(a.isGLBufferAttribute){const g=d.get(a);(!g||g.version<a.version)&&d.set(a,{buffer:a.buffer,type:a.type,bytesPerElement:a.elementSize,version:a.version});return}a.isInterleavedBufferAttribute&&(a=a.data);const e=d.get(a);void 0===e?d.set(a,function(e,f){const a=e.array,h=e.usage,g=b.createBuffer();b.bindBuffer(f,g),b.bufferData(f,a,h),e.onUploadCallback();let d=5126;return a instanceof Float32Array?d=5126:a instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):a instanceof Uint16Array?e.isFloat16BufferAttribute?c?d=5131:console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."):d=5123:a instanceof Int16Array?d=5122:a instanceof Uint32Array?d=5125:a instanceof Int32Array?d=5124:a instanceof Int8Array?d=5120:a instanceof Uint8Array?d=5121:a instanceof Uint8ClampedArray&&(d=5121),{buffer:g,type:d,bytesPerElement:a.BYTES_PER_ELEMENT,version:e.version}}(a,f)):e.version<a.version&&(!function(g,f,e){const d=f.array,a=f.updateRange;b.bindBuffer(e,g),-1===a.count?b.bufferSubData(e,0,d):(c?b.bufferSubData(e,a.offset*d.BYTES_PER_ELEMENT,d,a.offset,a.count):b.bufferSubData(e,a.offset*d.BYTES_PER_ELEMENT,d.subarray(a.offset,a.offset+a.count)),a.count=-1)}(e.buffer,a,f),e.version=a.version)}}}class dB extends f{constructor(h=1,i=1,l=1,m=1){super(),this.type="PlaneGeometry",this.parameters={width:h,height:i,widthSegments:l,heightSegments:m};const r=h/2,s=i/2,d=Math.floor(l),e=Math.floor(m),c=d+1,t=e+1,u=h/d,v=i/e,j=[],n=[],o=[],k=[];for(let f=0;f<t;f++){const w=f*v-s;for(let g=0;g<c;g++){const x=g*u-r;n.push(x,-w,0),o.push(0,0,1),k.push(g/d),k.push(1-f/e)}}for(let a=0;a<e;a++)for(let b=0;b<d;b++){const y=b+c*a,p=b+c*(a+1),z=b+1+c*(a+1),q=b+1+c*a;j.push(y,p,q),j.push(p,z,q)}this.setIndex(j),this.setAttribute("position",new c1(n,3)),this.setAttribute("normal",new c1(o,3)),this.setAttribute("uv",new c1(k,2))}static fromJSON(a){return new dB(a.width,a.height,a.widthSegments,a.heightSegments)}}const d={alphamap_fragment:"#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n	if ( diffuseColor.a < alphaTest ) discard;\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#pragma unroll_loop_end\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop_start\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		#pragma unroll_loop_end\n		if ( clipped ) discard;\n	#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n	return dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_maxMipLevel 8.0\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_maxTileSize 256.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		float texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n		vec2 f = fract( uv );\n		uv += 0.5 - f;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		if ( mipInt < cubeUV_maxMipLevel ) {\n			uv.y += 2.0 * cubeUV_maxTileSize;\n		}\n		uv.y += filterInt * 2.0 * cubeUV_minTileSize;\n		uv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n		uv *= texelSize;\n		vec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		uv.x += texelSize;\n		vec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		uv.y += texelSize;\n		vec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		uv.x -= texelSize;\n		vec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		vec3 tm = mix( tl, tr, f.x );\n		vec3 bm = mix( bl, br, f.x );\n		return mix( tm, bm, f.y );\n	}\n	#define r0 1.0\n	#define v0 0.339\n	#define m0 - 2.0\n	#define r1 0.8\n	#define v1 0.276\n	#define m1 - 1.0\n	#define r4 0.4\n	#define v4 0.046\n	#define m4 2.0\n	#define r5 0.305\n	#define v5 0.016\n	#define m5 3.0\n	#define r6 0.21\n	#define v6 0.0038\n	#define m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= r1 ) {\n			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n		} else if ( roughness >= r4 ) {\n			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n		} else if ( roughness >= r5 ) {\n			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n		} else if ( roughness >= r6 ) {\n			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n	mat3 m = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n	transformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n	float maxComponent = max( max( value.r, value.g ), value.b );\n	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.r, max( value.g, value.b ) );\n	float M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n	M = ceil( M * 255.0 ) / 255.0;\n	return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.r, max( value.g, value.b ) );\n	float D = max( maxRange / maxRGB, 1.0 );\n	D = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n	vec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n	Xp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n	vec4 vResult;\n	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n	vResult.w = fract( Le );\n	vResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n	return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n	float Le = value.z * 255.0 + value.w;\n	vec3 Xp_Y_XYZp;\n	Xp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n	vec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n	return vec4( max( vRGB, 0.0 ), 1.0 );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n		envColor = envMapTexelToLinear( envColor );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	uniform int maxMipLevel;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n	#ifdef ENVMAP_MODE_REFRACTION\n		uniform float refractionRatio;\n	#endif\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#if defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#if defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 reflectVec;\n			#ifdef ENVMAP_MODE_REFLECTION\n				reflectVec = reflect( - viewDir, normal );\n				reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			#else\n				reflectVec = refract( - viewDir, normal, refractionRatio );\n			#endif\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n	varying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return texture2D( gradientMap, coord ).rgb;\n	#else\n		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n	#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel = texture2D( lightMap, vUv2 );\n	vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		lightMapIrradiance *= PI;\n	#endif\n	reflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n	vLightBack = vec3( 0.0 );\n	vIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		getPointLightInfo( pointLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		getSpotLightInfo( spotLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		getDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n		#ifdef DOUBLE_SIDED\n			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		if ( cutoffDistance > 0.0 ) {\n			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		}\n		return distanceFalloff;\n	#else\n		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n		}\n		return 1.0;\n	#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )	(0)",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )	(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	#ifdef SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULARINTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n		#endif\n		#ifdef USE_SPECULARCOLORMAP\n			specularColorFactor *= specularColorMapTexelToLinear( texture2D( specularColorMap, vUv ) ).rgb;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEENCOLORMAP\n		material.sheenColor *= sheenColorMapTexelToLinear( texture2D( sheenColorMap, vUv ) ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEENROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n	#endif\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	vec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometry.normal;\n		vec3 viewDir = geometry.viewDir;\n		vec3 position = geometry.position;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		reflectedLight.directSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n	geometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vUv2 );\n		vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			lightMapIrradiance *= PI;\n		#endif\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometry.normal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif",map_fragment:"#ifdef USE_MAP\n	vec4 texelColor = texture2D( map, vUv );\n	texelColor = mapTexelToLinear( texelColor );\n	diffuseColor *= texelColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n	uniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n	vec4 mapTexel = texture2D( map, uv );\n	diffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	uniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\n	metalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\n		}\n	#else\n		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n	#endif\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n	uniform float morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n		uniform sampler2DArray morphTargetsTexture;\n		uniform vec2 morphTargetsTextureSize;\n		vec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\n			float texelIndex = float( vertexIndex * stride + offset );\n			float y = floor( texelIndex / morphTargetsTextureSize.x );\n			float x = texelIndex - y * morphTargetsTextureSize.x;\n			vec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n			return texture( morphTargetsTexture, morphUV ).xyz;\n		}\n	#else\n		#ifndef USE_MORPHNORMALS\n			uniform float morphTargetInfluences[ 8 ];\n		#else\n			uniform float morphTargetInfluences[ 4 ];\n		#endif\n	#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			#ifndef USE_MORPHNORMALS\n				if ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\n			#else\n				if ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\n			#endif\n		}\n	#else\n		transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n		transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n		transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n		transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n		#ifndef USE_MORPHNORMALS\n			transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n			transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n			transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n			transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n		#endif\n	#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	#ifdef USE_TANGENT\n		vec3 tangent = normalize( vTangent );\n		vec3 bitangent = normalize( vBitangent );\n		#ifdef DOUBLE_SIDED\n			tangent = tangent * faceDirection;\n			bitangent = bitangent * faceDirection;\n		#endif\n		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n			mat3 vTBN = mat3( tangent, bitangent, normal );\n		#endif\n	#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	#ifdef USE_TANGENT\n		normal = normalize( vTBN * mapN );\n	#else\n		normal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n	#endif\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n		return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n	}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	#ifdef USE_TANGENT\n		clearcoatNormal = normalize( vTBN * clearcoatMapN );\n	#else\n		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n	#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif",output_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n	return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\n	roughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n		bool frustumTest = all( frustumTestVec );\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		vec4 shadowWorldPosition;\n	#endif\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	#ifdef BONE_TEXTURE\n		uniform highp sampler2D boneTexture;\n		uniform int boneTextureSize;\n		mat4 getBoneMatrix( const in float i ) {\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureSize ) );\n			float y = floor( j / float( boneTextureSize ) );\n			float dx = 1.0 / float( boneTextureSize );\n			float dy = 1.0 / float( boneTextureSize );\n			y = dy * ( y + 0.5 );\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n			mat4 bone = mat4( v1, v2, v3, v4 );\n			return bone;\n		}\n	#else\n		uniform mat4 boneMatrices[ MAX_BONES ];\n		mat4 getBoneMatrix( const in float i ) {\n			mat4 bone = boneMatrices[ int(i) ];\n			return bone;\n		}\n	#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n	float transmissionAlpha = 1.0;\n	float transmissionFactor = transmission;\n	float thicknessFactor = thickness;\n	#ifdef USE_TRANSMISSIONMAP\n		transmissionFactor *= texture2D( transmissionMap, vUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		thicknessFactor *= texture2D( thicknessMap, vUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmission = getIBLVolumeRefraction(\n		n, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n		attenuationColor, attenuationDistance );\n	totalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n	transmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	vec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( float roughness, float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {\n		float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		#ifdef TEXTURE_LOD_EXT\n			return texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n		#else\n			return texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n		#endif\n	}\n	vec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {\n		if ( attenuationDistance == 0.0 ) {\n			return radiance;\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,\n		vec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\n		vec3 attenuationColor, float attenuationDistance ) {\n		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n		vec3 refractedRayExit = position + transmissionRay;\n		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n		vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n		refractionCoords += 1.0;\n		refractionCoords /= 2.0;\n		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n	}\n#endif",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n	varying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n	#ifdef UVS_VERTEX_ONLY\n		vec2 vUv;\n	#else\n		varying vec2 vUv;\n	#endif\n	uniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	varying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n	uniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	gl_FragColor = mapTexelToLinear( texColor );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}",cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	vec3 vReflect = vWorldDirection;\n	#include <envmap_fragment>\n	gl_FragColor = envColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	vec4 texColor = texture2D( tEquirect, sampleUV );\n	gl_FragColor = mapTexelToLinear( texColor );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n		reflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n	varying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <lights_lambert_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n	varying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <emissivemap_fragment>\n	#ifdef DOUBLE_SIDED\n		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n	#else\n		reflectedLight.indirectDiffuse += vIndirectFront;\n	#endif\n	#include <lightmap_fragment>\n	reflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n	#ifdef DOUBLE_SIDED\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n	#else\n		reflectedLight.directDiffuse = vLightFront;\n	#endif\n	reflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n		matcapColor = matcapTexelToLinear( matcapColor );\n	#else\n		vec4 matcapColor = vec4( 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULARINTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n	#ifdef USE_SPECULARCOLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEENCOLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEENROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - clearcoat * Fcc ) + clearcoatSpecular * clearcoat;\n	#endif\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <output_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}"},b={common:{diffuse:{value:new g(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new l},uv2Transform:{value:new l},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new j(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new g(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new g(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new l}},sprite:{diffuse:{value:new g(16777215)},opacity:{value:1},center:{value:new j(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new l}}},ad={basic:{uniforms:k([b.common,b.specularmap,b.envmap,b.aomap,b.lightmap,b.fog]),vertexShader:d.meshbasic_vert,fragmentShader:d.meshbasic_frag},lambert:{uniforms:k([b.common,b.specularmap,b.envmap,b.aomap,b.lightmap,b.emissivemap,b.fog,b.lights,{emissive:{value:new g(0)}}]),vertexShader:d.meshlambert_vert,fragmentShader:d.meshlambert_frag},phong:{uniforms:k([b.common,b.specularmap,b.envmap,b.aomap,b.lightmap,b.emissivemap,b.bumpmap,b.normalmap,b.displacementmap,b.fog,b.lights,{emissive:{value:new g(0)},specular:{value:new g(1118481)},shininess:{value:30}}]),vertexShader:d.meshphong_vert,fragmentShader:d.meshphong_frag},standard:{uniforms:k([b.common,b.envmap,b.aomap,b.lightmap,b.emissivemap,b.bumpmap,b.normalmap,b.displacementmap,b.roughnessmap,b.metalnessmap,b.fog,b.lights,{emissive:{value:new g(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:d.meshphysical_vert,fragmentShader:d.meshphysical_frag},toon:{uniforms:k([b.common,b.aomap,b.lightmap,b.emissivemap,b.bumpmap,b.normalmap,b.displacementmap,b.gradientmap,b.fog,b.lights,{emissive:{value:new g(0)}}]),vertexShader:d.meshtoon_vert,fragmentShader:d.meshtoon_frag},matcap:{uniforms:k([b.common,b.bumpmap,b.normalmap,b.displacementmap,b.fog,{matcap:{value:null}}]),vertexShader:d.meshmatcap_vert,fragmentShader:d.meshmatcap_frag},points:{uniforms:k([b.points,b.fog]),vertexShader:d.points_vert,fragmentShader:d.points_frag},dashed:{uniforms:k([b.common,b.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:d.linedashed_vert,fragmentShader:d.linedashed_frag},depth:{uniforms:k([b.common,b.displacementmap]),vertexShader:d.depth_vert,fragmentShader:d.depth_frag},normal:{uniforms:k([b.common,b.bumpmap,b.normalmap,b.displacementmap,{opacity:{value:1}}]),vertexShader:d.meshnormal_vert,fragmentShader:d.meshnormal_frag},sprite:{uniforms:k([b.sprite,b.fog]),vertexShader:d.sprite_vert,fragmentShader:d.sprite_frag},background:{uniforms:{uvTransform:{value:new l},t2D:{value:null}},vertexShader:d.background_vert,fragmentShader:d.background_frag},cube:{uniforms:k([b.envmap,{opacity:{value:1}}]),vertexShader:d.cube_vert,fragmentShader:d.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:d.equirect_vert,fragmentShader:d.equirect_frag},distanceRGBA:{uniforms:k([b.common,b.displacementmap,{referencePosition:{value:new a},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:d.distanceRGBA_vert,fragmentShader:d.distanceRGBA_frag},shadow:{uniforms:k([b.lights,b.fog,{color:{value:new g(0)},opacity:{value:1}},]),vertexShader:d.shadow_vert,fragmentShader:d.shadow_frag}};function dC(a,b,c,d,e){const f=new g(0);let h=0,i,j,k=null,l=0,m=null;function n(a,b){c.buffers.color.setClear(a.r,a.g,a.b,b,e)}return{getClearColor:function(){return f},setClearColor:function(a,b=1){f.set(a),n(f,h=b)},getClearAlpha:function(){return h},setClearAlpha:function(a){n(f,h=a)},render:function(e,g){let o=!1,c=!0===g.isScene?g.background:null;c&&c.isTexture&&(c=b.get(c));const p=a.xr,q=p.getSession&&p.getSession();q&&"additive"===q.environmentBlendMode&&(c=null),null===c?n(f,h):c&&c.isColor&&(n(c,1),o=!0),(a.autoClear||o)&&a.clear(a.autoClearColor,a.autoClearDepth,a.autoClearStencil),c&&(c.isCubeTexture||306===c.mapping)?(void 0===j&&((j=new F(new ds(1,1,1),new O({name:"BackgroundCubeMaterial",uniforms:aM(ad.cube.uniforms),vertexShader:ad.cube.vertexShader,fragmentShader:ad.cube.fragmentShader,side:bz,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),j.geometry.deleteAttribute("uv"),j.onBeforeRender=function(b,c,a){this.matrixWorld.copyPosition(a.matrixWorld)},Object.defineProperty(j.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),d.update(j)),j.material.uniforms.envMap.value=c,j.material.uniforms.flipEnvMap.value=c.isCubeTexture&& !1===c.isRenderTargetTexture?-1:1,(k!==c||l!==c.version||m!==a.toneMapping)&&(j.material.needsUpdate=!0,k=c,l=c.version,m=a.toneMapping),e.unshift(j,j.geometry,j.material,0,0,null)):c&&c.isTexture&&(void 0===i&&((i=new F(new dB(2,2),new O({name:"BackgroundMaterial",uniforms:aM(ad.background.uniforms),vertexShader:ad.background.vertexShader,fragmentShader:ad.background.fragmentShader,side:by,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),Object.defineProperty(i.material,"map",{get:function(){return this.uniforms.t2D.value}}),d.update(i)),i.material.uniforms.t2D.value=c,!0===c.matrixAutoUpdate&&c.updateMatrix(),i.material.uniforms.uvTransform.value.copy(c.matrix),(k!==c||l!==c.version||m!==a.toneMapping)&&(i.material.needsUpdate=!0,k=c,l=c.version,m=a.toneMapping),e.unshift(i,i.geometry,i.material,0,0,null))}}}function dD(b,c,k,a){const l=b.getParameter(34921),d=a.isWebGL2?null:c.get("OES_vertex_array_object"),m=a.isWebGL2||null!==d,n={},e=r(null);let o=e;function p(c){return a.isWebGL2?b.bindVertexArray(c):d.bindVertexArrayOES(c)}function q(c){return a.isWebGL2?b.deleteVertexArray(c):d.deleteVertexArrayOES(c)}function r(e){const b=[],c=[],d=[];for(let a=0;a<l;a++)b[a]=0,c[a]=0,d[a]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:b,enabledAttributes:c,attributeDivisors:d,object:e,attributes:{},index:null}}function f(){const b=o.newAttributes;for(let a=0,c=b.length;a<c;a++)b[a]=0}function g(a){s(a,0)}function s(d,e){const h=o.newAttributes,f=o.enabledAttributes,g=o.attributeDivisors;if(h[d]=1,0===f[d]&&(b.enableVertexAttribArray(d),f[d]=1),g[d]!==e){const i=a.isWebGL2?b:c.get("ANGLE_instanced_arrays");i[a.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](d,e),g[d]=e}}function h(){const d=o.newAttributes,c=o.enabledAttributes;for(let a=0,e=c.length;a<e;a++)c[a]!==d[a]&&(b.disableVertexAttribArray(a),c[a]=0)}function t(d,e,c,h,f,g){!0===a.isWebGL2&&(5124===c||5125===c)?b.vertexAttribIPointer(d,e,c,f,g):b.vertexAttribPointer(d,e,c,h,f,g)}function i(){j(),o!==e&&p((o=e).object)}function j(){e.geometry=null,e.program=null,e.wireframe=!1}return{setup:function(u,q,j,e,i){let l=!1;if(m){const v=function(g,h,j){const i=!0===j.wireframe;let c=n[g.id];void 0===c&&(c={},n[g.id]=c);let e=c[h.id];void 0===e&&(e={},c[h.id]=e);let f=e[i];return void 0===f&&(f=r(a.isWebGL2?b.createVertexArray():d.createVertexArrayOES()),e[i]=f),f}(e,j,q);o!==v&&p((o=v).object),(l=function(f,g){const h=o.attributes,b=f.attributes;let c=0;for(const d in b){const a=h[d],e=b[d];if(void 0===a)return!0;if(a.attribute!==e)return!0;if(a.data!==e.data)return!0;c++}return o.attributesNum!==c||o.index!==g}(e,i))&&function(g,h){const c={},d=g.attributes;let e=0;for(const f in d){const a=d[f],b={};b.attribute=a,a.data&&(b.data=a.data),c[f]=b,e++}o.attributes=c,o.attributesNum=e,o.index=h}(e,i)}else{const w=!0===q.wireframe;(o.geometry!==e.id||o.program!==j.id||o.wireframe!==w)&&(o.geometry=e.id,o.program=j.id,o.wireframe=w,l=!0)}!0===u.isInstancedMesh&&(l=!0),null!==i&&k.update(i,34963),l&&(function(i,E,F,j){if(!1===a.isWebGL2&&(i.isInstancedMesh||j.isInstancedBufferGeometry)&&null===c.get("ANGLE_instanced_arrays"))return;f();const G=j.attributes,z=F.getAttributes(),A=E.defaultAttributeValues;for(const n in z){const d=z[n];if(d.location>=0){let e=G[n];if(void 0===e&&("instanceMatrix"===n&&i.instanceMatrix&&(e=i.instanceMatrix),"instanceColor"===n&&i.instanceColor&&(e=i.instanceColor)),void 0!==e){const B=e.normalized,o=e.itemSize,p=k.get(e);if(void 0===p)continue;const C=p.buffer,D=p.type,q=p.bytesPerElement;if(e.isInterleavedBufferAttribute){const l=e.data,H=l.stride,I=e.offset;if(l&&l.isInstancedInterleavedBuffer){for(let v=0;v<d.locationSize;v++)s(d.location+v,l.meshPerAttribute);!0!==i.isInstancedMesh&& void 0===j._maxInstanceCount&&(j._maxInstanceCount=l.meshPerAttribute*l.count)}else for(let w=0;w<d.locationSize;w++)g(d.location+w);b.bindBuffer(34962,C);for(let r=0;r<d.locationSize;r++)t(d.location+r,o/d.locationSize,D,B,H*q,(I+o/d.locationSize*r)*q)}else{if(e.isInstancedBufferAttribute){for(let x=0;x<d.locationSize;x++)s(d.location+x,e.meshPerAttribute);!0!==i.isInstancedMesh&& void 0===j._maxInstanceCount&&(j._maxInstanceCount=e.meshPerAttribute*e.count)}else for(let y=0;y<d.locationSize;y++)g(d.location+y);b.bindBuffer(34962,C);for(let u=0;u<d.locationSize;u++)t(d.location+u,o/d.locationSize,D,B,o*q,o/d.locationSize*u*q)}}else if(void 0!==A){const m=A[n];if(void 0!==m)switch(m.length){case 2:b.vertexAttrib2fv(d.location,m);break;case 3:b.vertexAttrib3fv(d.location,m);break;case 4:b.vertexAttrib4fv(d.location,m);break;default:b.vertexAttrib1fv(d.location,m)}}}}h()}(u,q,j,e),null!==i&&b.bindBuffer(34963,k.get(i).buffer))},reset:i,resetDefaultState:j,dispose:function(){for(const c in i(),n){const a=n[c];for(const d in a){const b=a[d];for(const e in b)q(b[e].object),delete b[e];delete a[d]}delete n[c]}},releaseStatesOfGeometry:function(a){if(void 0===n[a.id])return;const b=n[a.id];for(const d in b){const c=b[d];for(const e in c)q(c[e].object),delete c[e];delete b[d]}delete n[a.id]},releaseStatesOfProgram:function(a){for(const e in n){const b=n[e];if(void 0===b[a.id])continue;const c=b[a.id];for(const d in c)q(c[d].object),delete c[d];delete b[a.id]}},initAttributes:f,enableAttribute:g,disableUnusedAttributes:h}}function dE(c,d,e,a){const f=a.isWebGL2;let g;function b(a){g=a}this.setMode=b,this.render=function(b,a){c.drawArrays(g,b,a),e.update(a,g,1)},this.renderInstances=function(j,i,b){if(0===b)return;let a,h;if(f)a=c,h="drawArraysInstanced";else if(a=d.get("ANGLE_instanced_arrays"),h="drawArraysInstancedANGLE",null===a){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}a[h](g,j,i,b),e.update(i,g,b)}}function dF(a,f,d){let u;function g(b){if("highp"===b){if(a.getShaderPrecisionFormat(35633,36338).precision>0&&a.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";b="mediump"}return"mediump"===b&&a.getShaderPrecisionFormat(35633,36337).precision>0&&a.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const c="undefined"!=typeof WebGL2RenderingContext&&a instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&a instanceof WebGL2ComputeRenderingContext;let b=void 0!==d.precision?d.precision:"highp";const e=g(b);e!==b&&(console.warn("THREE.WebGLRenderer:",b,"not supported, using",e,"instead."),b=e);const k=c||f.has("WEBGL_draw_buffers"),l=!0===d.logarithmicDepthBuffer,m=a.getParameter(34930),h=a.getParameter(35660),n=a.getParameter(3379),o=a.getParameter(34076),p=a.getParameter(34921),q=a.getParameter(36347),r=a.getParameter(36348),s=a.getParameter(36349),i=h>0,j=c||f.has("OES_texture_float"),t=c?a.getParameter(36183):0;return{isWebGL2:c,drawBuffers:k,getMaxAnisotropy:function(){if(void 0!==u)return u;if(!0===f.has("EXT_texture_filter_anisotropic")){const b=f.get("EXT_texture_filter_anisotropic");u=a.getParameter(b.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else u=0;return u},getMaxPrecision:g,precision:b,logarithmicDepthBuffer:l,maxTextures:m,maxVertexTextures:h,maxTextureSize:n,maxCubemapSize:o,maxAttributes:p,maxVertexUniforms:q,maxVaryings:r,maxFragmentUniforms:s,vertexTextures:i,floatFragmentTextures:j,floatVertexTextures:i&&j,maxSamples:t}}function dG(b){const c=this;let d=null,e=0,f=!1,g=!1;const h=new ac,i=new l,a={value:null,needsUpdate:!1};function j(){a.value!==d&&(a.value=d,a.needsUpdate=e>0),c.numPlanes=e,c.numIntersection=0}function k(e,m,j,n){const d=null!==e?e.length:0;let b=null;if(0!==d){if(b=a.value,!0!==n||null===b){const k=j+4*d,l=m.matrixWorldInverse;i.getNormalMatrix(l),(null===b||b.length<k)&&(b=new Float32Array(k));for(let f=0,g=j;f!==d;++f,g+=4)h.copy(e[f]).applyMatrix4(l,i),h.normal.toArray(b,g),b[g+3]=h.constant}a.value=b,a.needsUpdate=!0}return c.numPlanes=d,c.numIntersection=0,b}this.uniform=a,this.numPlanes=0,this.numIntersection=0,this.init=function(a,b,c){const g=0!==a.length||b||0!==e||f;return f=b,d=k(a,c,0),e=a.length,g},this.beginShadows=function(){g=!0,k(null)},this.endShadows=function(){g=!1,j()},this.setState=function(c,p,q){const l=c.clippingPlanes,r=c.clipIntersection,s=c.clipShadows,m=b.get(c);if(f&&null!==l&&0!==l.length&&(!g||s)){const n=g?0:e,o=4*n;let h=m.clippingState||null;a.value=h,h=k(l,p,o,q);for(let i=0;i!==o;++i)h[i]=d[i];m.clippingState=h,this.numIntersection=r?this.numPlanes:0,this.numPlanes+=n}else g?k(null):j()}}function dH(a){let b=new WeakMap;function c(a,b){return 303===b?a.mapping=301:304===b&&(a.mapping=302),a}function d(e){const a=e.target;a.removeEventListener("dispose",d);const c=b.get(a);void 0!==c&&(b.delete(a),c.dispose())}return{get:function(e){if(e&&e.isTexture&& !1===e.isRenderTargetTexture){const h=e.mapping;if(303===h||304===h){if(b.has(e)){const i=b.get(e).texture;return c(i,e.mapping)}{const f=e.image;if(!f||!(f.height>0))return null;{const j=a.getRenderTarget(),g=new aN(f.height/2);return g.fromEquirectangularTexture(a,e),b.set(e,g),a.setRenderTarget(j),e.addEventListener("dispose",d),c(g.texture,e.mapping)}}}}return e},dispose:function(){b=new WeakMap}}}ad.physical={uniforms:k([ad.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new j(1,1)},clearcoatNormalMap:{value:null},sheen:{value:0},sheenColor:{value:new g(0)},sheenColorMap:{value:null},sheenRoughness:{value:0},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new j},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new g(0)},specularIntensity:{value:0},specularIntensityMap:{value:null},specularColor:{value:new g(1,1,1)},specularColorMap:{value:null}}]),vertexShader:d.meshphysical_vert,fragmentShader:d.meshphysical_frag};class ae extends K{constructor(a=-1,b=1,c=1,d=-1,e=.1,f=2e3){super(),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=a,this.right=b,this.top=c,this.bottom=d,this.near=e,this.far=f,this.updateProjectionMatrix()}copy(a,b){return super.copy(a,b),this.left=a.left,this.right=a.right,this.top=a.top,this.bottom=a.bottom,this.near=a.near,this.far=a.far,this.zoom=a.zoom,this.view=null===a.view?null:Object.assign({},a.view),this}setViewOffset(a,b,c,d,e,f){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=a,this.view.fullHeight=b,this.view.offsetX=c,this.view.offsetY=d,this.view.width=e,this.view.height=f,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const c=(this.right-this.left)/(2*this.zoom),d=(this.top-this.bottom)/(2*this.zoom),e=(this.right+this.left)/2,f=(this.top+this.bottom)/2;let a=e-c,g=e+c,b=f+d,h=f-d;if(null!==this.view&&this.view.enabled){const i=(this.right-this.left)/this.view.fullWidth/this.zoom,j=(this.top-this.bottom)/this.view.fullHeight/this.zoom;a+=i*this.view.offsetX,g=a+i*this.view.width,b-=j*this.view.offsetY,h=b-j*this.view.height}this.projectionMatrix.makeOrthographic(a,g,b,h,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(b){const a=super.toJSON(b);return a.object.zoom=this.zoom,a.object.left=this.left,a.object.right=this.right,a.object.top=this.top,a.object.bottom=this.bottom,a.object.near=this.near,a.object.far=this.far,null!==this.view&&(a.object.view=Object.assign({},this.view)),a}}ae.prototype.isOrthographicCamera=!0;class aP extends O{constructor(a){super(a),this.type="RawShaderMaterial"}}aP.prototype.isRawShaderMaterial=!0;const aQ=[.125,.215,.35,.446,.526,.582],dI=5+aQ.length,dJ={[3e3]:0,[av]:1,[3002]:2,[3004]:3,[3005]:4,[3006]:5,[3007]:6},dK=new ae,{_lodPlanes:dL,_sizeLods:dM,_sigmas:dN}=function(){const r=[],s=[],t=[];let k=8;for(let h=0;h<dI;h++){const l=Math.pow(2,k);s.push(l);let m=1/l;h>4?m=aQ[h-8+4-1]:0==h&&(m=0),t.push(m);const u=1/(l-1),b=-u/2,c=1+u/2,y=[b,b,c,b,c,c,b,b,c,c,b,c],i=6,d=6,n=3,o=2,p=1,v=new Float32Array(n*d*i),w=new Float32Array(o*d*i),x=new Float32Array(p*d*i);for(let a=0;a<i;a++){const e=a%3*2/3-1,g=a>2?0:-1,z=[e,g,0,e+2/3,g,0,e+2/3,g+1,0,e,g,0,e+2/3,g+1,0,e,g+1,0];v.set(z,n*d*a),w.set(y,o*d*a);const A=[a,a,a,a,a,a];x.set(A,p*d*a)}const j=new f;j.setAttribute("position",new q(v,n)),j.setAttribute("uv",new q(w,o)),j.setAttribute("faceIndex",new q(x,p)),r.push(j),k>4&&k--}return{_lodPlanes:r,_sizeLods:s,_sigmas:t}}(),dO=new g;let dP=null;const w=(1+Math.sqrt(5))/2,A=1/w,dQ=[new a(1,1,1),new a(-1,1,1),new a(1,1,-1),new a(-1,1,-1),new a(0,w,A),new a(0,w,-A),new a(A,0,w),new a(-A,0,w),new a(w,A,0),new a(-w,A,0)];class dR{constructor(b){this._renderer=b,this._pingPongRenderTarget=null,this._blurMaterial=function(b){const c=new Float32Array(b),d=new a(0,1,0),e=new aP({name:"SphericalGaussianBlur",defines:{n:b},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:c},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:d},inputEncoding:{value:dJ[3e3]},outputEncoding:{value:dJ[3e3]}},vertexShader:dX(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			${dY()}

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,blending:0,depthTest:!1,depthWrite:!1});return e}(20),this._equirectShader=null,this._cubemapShader=null,this._compileMaterial(this._blurMaterial)}fromScene(c,b=0,d=.1,e=100){dP=this._renderer.getRenderTarget();const a=this._allocateTargets();return this._sceneToCubeUV(c,d,e,a),b>0&&this._blur(a,0,0,b),this._applyPMREM(a),this._cleanup(a),a}fromEquirectangular(a){return this._fromTexture(a)}fromCubemap(a){return this._fromTexture(a)}compileCubemapShader(){null===this._cubemapShader&&(this._cubemapShader=dW(),this._compileMaterial(this._cubemapShader))}compileEquirectangularShader(){null===this._equirectShader&&(this._equirectShader=dV(),this._compileMaterial(this._equirectShader))}dispose(){this._blurMaterial.dispose(),null!==this._cubemapShader&&this._cubemapShader.dispose(),null!==this._equirectShader&&this._equirectShader.dispose();for(let a=0;a<dL.length;a++)dL[a].dispose()}_cleanup(a){this._pingPongRenderTarget.dispose(),this._renderer.setRenderTarget(dP),a.scissorTest=!1,dU(a,0,0,a.width,a.height)}_fromTexture(b){dP=this._renderer.getRenderTarget();const a=this._allocateTargets(b);return this._textureToCubeUV(b,a),this._applyPMREM(a),this._cleanup(a),a}_allocateTargets(a){const b={magFilter:bE,minFilter:bE,generateMipmaps:!1,type:1009,format:1023,encoding:dS(a)?a.encoding:3002,depthBuffer:!1},c=dT(b);return c.depthBuffer=!a,this._pingPongRenderTarget=dT(b),c}_compileMaterial(a){const b=new F(dL[0],a);this._renderer.compile(b,dK)}_sceneToCubeUV(d,m,n,l){const c=new P(90,1,m,n),f=[1,-1,1,1,1,1],g=[1,1,1,-1,-1,-1],a=this._renderer,o=a.autoClear,p=a.outputEncoding,q=a.toneMapping;a.getClearColor(dO),a.toneMapping=0,a.outputEncoding=3e3,a.autoClear=!1;const h=new aL({name:"PMREM.Background",side:bz,depthWrite:!1,depthTest:!1}),i=new F(new ds,h);let j=!1;const e=d.background;e?e.isColor&&(h.color.copy(e),d.background=null,j=!0):(h.color.copy(dO),j=!0);for(let b=0;b<6;b++){const k=b%3;0==k?(c.up.set(0,f[b],0),c.lookAt(g[b],0,0)):1==k?(c.up.set(0,0,f[b]),c.lookAt(0,g[b],0)):(c.up.set(0,f[b],0),c.lookAt(0,0,g[b])),dU(l,256*k,b>2?256:0,256,256),a.setRenderTarget(l),j&&a.render(i,c),a.render(d,c)}i.geometry.dispose(),i.material.dispose(),a.toneMapping=q,a.outputEncoding=p,a.autoClear=o,d.background=e}_setEncoding(b,a){!0===this._renderer.capabilities.isWebGL2&&1023===a.format&&1009===a.type&&a.encoding===av?b.value=dJ[3e3]:b.value=dJ[a.encoding]}_textureToCubeUV(a,c){const e=this._renderer,d=301===a.mapping||302===a.mapping;d?null==this._cubemapShader&&(this._cubemapShader=dW()):null==this._equirectShader&&(this._equirectShader=dV());const f=d?this._cubemapShader:this._equirectShader,g=new F(dL[0],f),b=f.uniforms;b.envMap.value=a,d||b.texelSize.value.set(1/a.image.width,1/a.image.height),this._setEncoding(b.inputEncoding,a),this._setEncoding(b.outputEncoding,c.texture),dU(c,0,0,768,512),e.setRenderTarget(c),e.render(g,dK)}_applyPMREM(c){const b=this._renderer,d=b.autoClear;b.autoClear=!1;for(let a=1;a<dI;a++){const e=Math.sqrt(dN[a]*dN[a]-dN[a-1]*dN[a-1]),f=dQ[(a-1)%dQ.length];this._blur(c,a-1,a,e,f)}b.autoClear=d}_blur(b,f,a,c,d){const e=this._pingPongRenderTarget;this._halfBlur(b,e,f,a,c,"latitudinal",d),this._halfBlur(e,b,a,a,c,"longitudinal",d)}_halfBlur(i,m,n,b,e,j,o){const p=this._renderer,q=this._blurMaterial;"latitudinal"!==j&&"longitudinal"!==j&&console.error("blur direction must be either latitudinal or longitudinal!");const u=new F(dL[b],q),a=q.uniforms,v=dM[n]-1,r=isFinite(e)?Math.PI/(2*v):2*Math.PI/39,s=e/r,f=isFinite(e)?1+Math.floor(3*s):20;f>20&&console.warn(`sigmaRadians, ${e}, is too large and will clip, as it requested ${f} samples when the maximum is set to 20`);const c=[];let k=0;for(let d=0;d<20;++d){const t=d/s,l=Math.exp(-t*t/2);c.push(l),0==d?k+=l:d<f&&(k+=2*l)}for(let g=0;g<c.length;g++)c[g]=c[g]/k;a.envMap.value=i.texture,a.samples.value=f,a.weights.value=c,a.latitudinal.value="latitudinal"===j,o&&(a.poleAxis.value=o),a.dTheta.value=r,a.mipInt.value=8-n,this._setEncoding(a.inputEncoding,i.texture),this._setEncoding(a.outputEncoding,i.texture);const h=dM[b];dU(m,3*Math.max(0,256-2*h),(0===b?0:512)+2*h*(b>4?b-8+4:0),3*h,2*h),p.setRenderTarget(m),p.render(u,dK)}}function dS(a){return void 0!==a&&1009===a.type&&(3e3===a.encoding||a.encoding===av||3007===a.encoding)}function dT(b){const a=new J(768,768,b);return a.texture.mapping=306,a.texture.name="PMREM.cubeUv",a.scissorTest=!0,a}function dU(a,b,c,d,e){a.viewport.set(b,c,d,e),a.scissor.set(b,c,d,e)}function dV(){const a=new j(1,1),b=new aP({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null},texelSize:{value:a},inputEncoding:{value:dJ[3e3]},outputEncoding:{value:dJ[3e3]}},vertexShader:dX(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform vec2 texelSize;

			${dY()}

			#include <common>

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				vec2 f = fract( uv / texelSize - 0.5 );
				uv -= f * texelSize;
				vec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x += texelSize.x;
				vec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.y += texelSize.y;
				vec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x -= texelSize.x;
				vec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;

				vec3 tm = mix( tl, tr, f.x );
				vec3 bm = mix( bl, br, f.x );
				gl_FragColor.rgb = mix( tm, bm, f.y );

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,blending:0,depthTest:!1,depthWrite:!1});return b}function dW(){const a=new aP({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},inputEncoding:{value:dJ[3e3]},outputEncoding:{value:dJ[3e3]}},vertexShader:dX(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			${dY()}

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;
				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,blending:0,depthTest:!1,depthWrite:!1});return a}function dX(){return`

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function dY(){return`

		uniform int inputEncoding;
		uniform int outputEncoding;

		#include <encodings_pars_fragment>

		vec4 inputTexelToLinear( vec4 value ) {

			if ( inputEncoding == 0 ) {

				return value;

			} else if ( inputEncoding == 1 ) {

				return sRGBToLinear( value );

			} else if ( inputEncoding == 2 ) {

				return RGBEToLinear( value );

			} else if ( inputEncoding == 3 ) {

				return RGBMToLinear( value, 7.0 );

			} else if ( inputEncoding == 4 ) {

				return RGBMToLinear( value, 16.0 );

			} else if ( inputEncoding == 5 ) {

				return RGBDToLinear( value, 256.0 );

			} else {

				return GammaToLinear( value, 2.2 );

			}

		}

		vec4 linearToOutputTexel( vec4 value ) {

			if ( outputEncoding == 0 ) {

				return value;

			} else if ( outputEncoding == 1 ) {

				return LinearTosRGB( value );

			} else if ( outputEncoding == 2 ) {

				return LinearToRGBE( value );

			} else if ( outputEncoding == 3 ) {

				return LinearToRGBM( value, 7.0 );

			} else if ( outputEncoding == 4 ) {

				return LinearToRGBM( value, 16.0 );

			} else if ( outputEncoding == 5 ) {

				return LinearToRGBD( value, 256.0 );

			} else {

				return LinearToGamma( value, 2.2 );

			}

		}

		vec4 envMapTexelToLinear( vec4 color ) {

			return inputTexelToLinear( color );

		}
	`}function dZ(a){let b=new WeakMap,c=null;function d(e){const a=e.target;a.removeEventListener("dispose",d);const c=b.get(a);void 0!==c&&(b.delete(a),c.dispose())}return{get:function(e){if(e&&e.isTexture&& !1===e.isRenderTargetTexture){const f=e.mapping,h=303===f||304===f,i=301===f||302===f;if(h||i){if(b.has(e))return b.get(e).texture;{const g=e.image;if(!(h&&g&&g.height>0||i&&g&&function(c){let b=0;for(let a=0;a<6;a++)void 0!==c[a]&&b++;return 6===b}(g)))return null;{const k=a.getRenderTarget();null===c&&(c=new dR(a));const j=h?c.fromEquirectangular(e):c.fromCubemap(e);return b.set(e,j),a.setRenderTarget(k),e.addEventListener("dispose",d),j.texture}}}}return e},dispose:function(){b=new WeakMap,null!==c&&(c.dispose(),c=null)}}}function d$(a){const b={};function c(d){if(void 0!==b[d])return b[d];let c;switch(d){case"WEBGL_depth_texture":c=a.getExtension("WEBGL_depth_texture")||a.getExtension("MOZ_WEBGL_depth_texture")||a.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":c=a.getExtension("EXT_texture_filter_anisotropic")||a.getExtension("MOZ_EXT_texture_filter_anisotropic")||a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":c=a.getExtension("WEBGL_compressed_texture_s3tc")||a.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":c=a.getExtension("WEBGL_compressed_texture_pvrtc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:c=a.getExtension(d)}return b[d]=c,c}return{has:function(a){return null!==c(a)},init:function(a){a.isWebGL2?c("EXT_color_buffer_float"):(c("WEBGL_depth_texture"),c("OES_texture_float"),c("OES_texture_half_float"),c("OES_texture_half_float_linear"),c("OES_standard_derivatives"),c("OES_element_index_uint"),c("OES_vertex_array_object"),c("ANGLE_instanced_arrays")),c("OES_texture_float_linear"),c("EXT_color_buffer_half_float")},get:function(a){const b=c(a);return null===b&&console.warn("THREE.WebGLRenderer: "+a+" extension not supported."),b}}}function d_(a,b,c,d){const e={},f=new WeakMap;function g(i){const a=i.target;for(const j in null!==a.index&&b.remove(a.index),a.attributes)b.remove(a.attributes[j]);a.removeEventListener("dispose",g),delete e[a.id];const h=f.get(a);h&&(b.remove(h),f.delete(a)),d.releaseStatesOfGeometry(a),!0===a.isInstancedBufferGeometry&&delete a._maxInstanceCount,c.memory.geometries--}function h(d){const e=[],h=d.index,j=d.attributes.position;let i=0;if(null!==h){const g=h.array;i=h.version;for(let a=0,s=g.length;a<s;a+=3){const k=g[a+0],l=g[a+1],m=g[a+2];e.push(k,l,l,m,m,k)}}else{const t=j.array;i=j.version;for(let c=0,u=t.length/3-1;c<u;c+=3){const n=c+0,o=c+1,p=c+2;e.push(n,o,o,p,p,n)}}const q=new(bS(e)>65535?c0:c_)(e,1);q.version=i;const r=f.get(d);r&&b.remove(r),f.set(d,q)}return{get:function(b,a){return!0===e[a.id]||(a.addEventListener("dispose",g),e[a.id]=!0,c.memory.geometries++),a},update:function(c){const d=c.attributes;for(const g in d)b.update(d[g],34962);const e=c.morphAttributes;for(const h in e){const f=e[h];for(let a=0,i=f.length;a<i;a++)b.update(f[a],34962)}},getWireframeAttribute:function(a){const b=f.get(a);if(b){const c=a.index;null!==c&&b.version<c.version&&h(a)}else h(a);return f.get(a)}}}function d0(c,d,e,a){const f=a.isWebGL2;let g;function b(a){g=a}let h,i;this.setMode=b,this.setIndex=function(a){h=a.type,i=a.bytesPerElement},this.render=function(b,a){c.drawElements(g,a,h,b*i),e.update(a,g,1)},this.renderInstances=function(l,k,b){if(0===b)return;let a,j;if(f)a=c,j="drawElementsInstanced";else if(a=d.get("ANGLE_instanced_arrays"),j="drawElementsInstancedANGLE",null===a){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}a[j](g,k,h,l*i,b),e.update(k,g,b)}}function d1(b){const a={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:a,programs:null,autoReset:!0,reset:function(){a.frame++,a.calls=0,a.triangles=0,a.points=0,a.lines=0},update:function(b,d,c){switch(a.calls++,d){case 4:a.triangles+=c*(b/3);break;case 1:a.lines+=c*(b/2);break;case 3:a.lines+=c*(b-1);break;case 2:a.lines+=c*b;break;case 0:a.points+=c*b;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",d);break}}}}class af extends s{constructor(a=null,b=1,c=1,d=1){super(null),this.image={data:a,width:b,height:c,depth:d},this.magFilter=bE,this.minFilter=bE,this.wrapR=bC,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}function d2(a,b){return a[0]-b[0]}function d3(a,b){return Math.abs(b[1])-Math.abs(a[1])}function d4(d,c){let a=1;const b=c.isInterleavedBufferAttribute?c.data.array:c.array;b instanceof Int8Array?a=127:b instanceof Int16Array?a=32767:b instanceof Int32Array?a=2147483647:console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ",b),d.divideScalar(a)}function d5(d,e,f){const g={},h=new Float32Array(8),i=new WeakMap,k=new a,c=[];for(let b=0;b<8;b++)c[b]=[b,0];return{update:function(P,a,W,s){const t=P.morphTargetInfluences;if(!0===e.isWebGL2){const u=a.morphAttributes.position.length;let o=i.get(a);if(void 0===o||o.count!==u){void 0!==o&&o.texture.dispose();const J=void 0!==a.morphAttributes.normal,Q=a.morphAttributes.position,R=a.morphAttributes.normal||[],S=a.attributes.position.count,K=!0===J?2:1;let r=S*K,v=1;r>e.maxTextureSize&&(v=Math.ceil(r/e.maxTextureSize),r=e.maxTextureSize);const n=new Float32Array(r*v*4*u),F=new af(n,r,v,u);F.format=1023,F.type=1015;const T=4*K;for(let w=0;w<u;w++){const A=Q[w],G=R[w],p=r*v*4*w;for(let x=0;x<A.count;x++){k.fromBufferAttribute(A,x),!0===A.normalized&&d4(k,A);const q=x*T;n[p+q+0]=k.x,n[p+q+1]=k.y,n[p+q+2]=k.z,n[p+q+3]=0,!0===J&&(k.fromBufferAttribute(G,x),!0===G.normalized&&d4(k,G),n[p+q+4]=k.x,n[p+q+5]=k.y,n[p+q+6]=k.z,n[p+q+7]=0)}}o={count:u,texture:F,size:new j(r,v)},i.set(a,o)}let L=0;for(let H=0;H<t.length;H++)L+=t[H];const U=a.morphTargetsRelative?1:1-L;s.getUniforms().setValue(d,"morphTargetBaseInfluence",U),s.getUniforms().setValue(d,"morphTargetInfluences",t),s.getUniforms().setValue(d,"morphTargetsTexture",o.texture,f),s.getUniforms().setValue(d,"morphTargetsTextureSize",o.size)}else{const B=void 0===t?0:t.length;let l=g[a.id];if(void 0===l||l.length!==B){l=[];for(let C=0;C<B;C++)l[C]=[C,0];g[a.id]=l}for(let y=0;y<B;y++){const M=l[y];M[0]=y,M[1]=t[y]}l.sort(d3);for(let m=0;m<8;m++)m<B&&l[m][1]?(c[m][0]=l[m][0],c[m][1]=l[m][1]):(c[m][0]=Number.MAX_SAFE_INTEGER,c[m][1]=0);c.sort(d2);const D=a.morphAttributes.position,E=a.morphAttributes.normal;let N=0;for(let b=0;b<8;b++){const O=c[b],z=O[0],I=O[1];z!==Number.MAX_SAFE_INTEGER&&I?(D&&a.getAttribute("morphTarget"+b)!==D[z]&&a.setAttribute("morphTarget"+b,D[z]),E&&a.getAttribute("morphNormal"+b)!==E[z]&&a.setAttribute("morphNormal"+b,E[z]),h[b]=I,N+=I):(D&& !0===a.hasAttribute("morphTarget"+b)&&a.deleteAttribute("morphTarget"+b),E&& !0===a.hasAttribute("morphNormal"+b)&&a.deleteAttribute("morphNormal"+b),h[b]=0)}const V=a.morphTargetsRelative?1:1-N;s.getUniforms().setValue(d,"morphTargetBaseInfluence",V),s.getUniforms().setValue(d,"morphTargetInfluences",h)}}}}function d6(a,b,c,d){let e=new WeakMap;function f(b){const a=b.target;a.removeEventListener("dispose",f),c.remove(a.instanceMatrix),null!==a.instanceColor&&c.remove(a.instanceColor)}return{update:function(a){const h=d.render.frame,i=a.geometry,g=b.get(a,i);return e.get(g)!==h&&(b.update(g),e.set(g,h)),a.isInstancedMesh&&(!1===a.hasEventListener("dispose",f)&&a.addEventListener("dispose",f),c.update(a.instanceMatrix,34962),null!==a.instanceColor&&c.update(a.instanceColor,34962)),g},dispose:function(){e=new WeakMap}}}af.prototype.isDataTexture2DArray=!0;class ag extends s{constructor(a=null,b=1,c=1,d=1){super(null),this.image={data:a,width:b,height:c,depth:d},this.magFilter=bE,this.minFilter=bE,this.wrapR=bC,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}ag.prototype.isDataTexture3D=!0;const d7=new s,d8=new af,d9=new ag,ea=new ab,eb=[],ec=[],ed=new Float32Array(16),ee=new Float32Array(9),ef=new Float32Array(4);function eg(b,c,g){const d=b[0];if(d<=0||d>0)return b;const e=c*g;let a=eb[e];if(void 0===a&&(a=new Float32Array(e),eb[e]=a),0!==c){d.toArray(a,0);for(let f=1,h=0;f!==c;++f)h+=g,b[f].toArray(a,h)}return a}function eh(b,c){if(b.length!==c.length)return!1;for(let a=0,d=b.length;a<d;a++)if(b[a]!==c[a])return!1;return!0}function ei(c,b){for(let a=0,d=b.length;a<d;a++)c[a]=b[a]}function ej(d,b){let a=ec[b];void 0===a&&(a=new Int32Array(b),ec[b]=a);for(let c=0;c!==b;++c)a[c]=d.allocateTextureUnit();return a}function ek(c,a){const b=this.cache;b[0]!==a&&(c.uniform1f(this.addr,a),b[0]=a)}function el(c,a){const b=this.cache;if(void 0!==a.x)(b[0]!==a.x||b[1]!==a.y)&&(c.uniform2f(this.addr,a.x,a.y),b[0]=a.x,b[1]=a.y);else{if(eh(b,a))return;c.uniform2fv(this.addr,a),ei(b,a)}}function em(c,a){const b=this.cache;if(void 0!==a.x)(b[0]!==a.x||b[1]!==a.y||b[2]!==a.z)&&(c.uniform3f(this.addr,a.x,a.y,a.z),b[0]=a.x,b[1]=a.y,b[2]=a.z);else if(void 0!==a.r)(b[0]!==a.r||b[1]!==a.g||b[2]!==a.b)&&(c.uniform3f(this.addr,a.r,a.g,a.b),b[0]=a.r,b[1]=a.g,b[2]=a.b);else{if(eh(b,a))return;c.uniform3fv(this.addr,a),ei(b,a)}}function en(c,a){const b=this.cache;if(void 0!==a.x)(b[0]!==a.x||b[1]!==a.y||b[2]!==a.z||b[3]!==a.w)&&(c.uniform4f(this.addr,a.x,a.y,a.z,a.w),b[0]=a.x,b[1]=a.y,b[2]=a.z,b[3]=a.w);else{if(eh(b,a))return;c.uniform4fv(this.addr,a),ei(b,a)}}function eo(d,a){const b=this.cache,c=a.elements;if(void 0===c){if(eh(b,a))return;d.uniformMatrix2fv(this.addr,!1,a),ei(b,a)}else{if(eh(b,c))return;ef.set(c),d.uniformMatrix2fv(this.addr,!1,ef),ei(b,c)}}function ep(d,a){const b=this.cache,c=a.elements;if(void 0===c){if(eh(b,a))return;d.uniformMatrix3fv(this.addr,!1,a),ei(b,a)}else{if(eh(b,c))return;ee.set(c),d.uniformMatrix3fv(this.addr,!1,ee),ei(b,c)}}function eq(d,a){const b=this.cache,c=a.elements;if(void 0===c){if(eh(b,a))return;d.uniformMatrix4fv(this.addr,!1,a),ei(b,a)}else{if(eh(b,c))return;ed.set(c),d.uniformMatrix4fv(this.addr,!1,ed),ei(b,c)}}function er(c,a){const b=this.cache;b[0]!==a&&(c.uniform1i(this.addr,a),b[0]=a)}function es(c,a){const b=this.cache;eh(b,a)||(c.uniform2iv(this.addr,a),ei(b,a))}function et(c,a){const b=this.cache;eh(b,a)||(c.uniform3iv(this.addr,a),ei(b,a))}function eu(c,a){const b=this.cache;eh(b,a)||(c.uniform4iv(this.addr,a),ei(b,a))}function ev(c,a){const b=this.cache;b[0]!==a&&(c.uniform1ui(this.addr,a),b[0]=a)}function ew(c,a){const b=this.cache;eh(b,a)||(c.uniform2uiv(this.addr,a),ei(b,a))}function ex(c,a){const b=this.cache;eh(b,a)||(c.uniform3uiv(this.addr,a),ei(b,a))}function ey(c,a){const b=this.cache;eh(b,a)||(c.uniform4uiv(this.addr,a),ei(b,a))}function ez(d,e,b){const c=this.cache,a=b.allocateTextureUnit();c[0]!==a&&(d.uniform1i(this.addr,a),c[0]=a),b.safeSetTexture2D(e||d7,a)}function eA(d,e,b){const c=this.cache,a=b.allocateTextureUnit();c[0]!==a&&(d.uniform1i(this.addr,a),c[0]=a),b.setTexture3D(e||d9,a)}function eB(d,e,b){const c=this.cache,a=b.allocateTextureUnit();c[0]!==a&&(d.uniform1i(this.addr,a),c[0]=a),b.safeSetTextureCube(e||ea,a)}function eC(d,e,b){const c=this.cache,a=b.allocateTextureUnit();c[0]!==a&&(d.uniform1i(this.addr,a),c[0]=a),b.setTexture2DArray(e||d8,a)}function eD(a,b){a.uniform1fv(this.addr,b)}function eE(a,b){const c=eg(b,this.size,2);a.uniform2fv(this.addr,c)}function eF(a,b){const c=eg(b,this.size,3);a.uniform3fv(this.addr,c)}function eG(a,b){const c=eg(b,this.size,4);a.uniform4fv(this.addr,c)}function eH(a,b){const c=eg(b,this.size,4);a.uniformMatrix2fv(this.addr,!1,c)}function eI(a,b){const c=eg(b,this.size,9);a.uniformMatrix3fv(this.addr,!1,c)}function eJ(a,b){const c=eg(b,this.size,16);a.uniformMatrix4fv(this.addr,!1,c)}function eK(a,b){a.uniform1iv(this.addr,b)}function eL(a,b){a.uniform2iv(this.addr,b)}function eM(a,b){a.uniform3iv(this.addr,b)}function eN(a,b){a.uniform4iv(this.addr,b)}function eO(a,b){a.uniform1uiv(this.addr,b)}function eP(a,b){a.uniform2uiv(this.addr,b)}function eQ(a,b){a.uniform3uiv(this.addr,b)}function eR(a,b){a.uniform4uiv(this.addr,b)}function eS(f,b,c){const d=b.length,e=ej(c,d);f.uniform1iv(this.addr,e);for(let a=0;a!==d;++a)c.safeSetTexture2D(b[a]||d7,e[a])}function eT(f,b,c){const d=b.length,e=ej(c,d);f.uniform1iv(this.addr,e);for(let a=0;a!==d;++a)c.safeSetTextureCube(b[a]||ea,e[a])}function eU(a,b,c){this.id=a,this.addr=c,this.cache=[],this.setValue=function(a){switch(a){case 5126:return ek;case 35664:return el;case 35665:return em;case 35666:return en;case 35674:return eo;case 35675:return ep;case 35676:return eq;case 5124:case 35670:return er;case 35667:case 35671:return es;case 35668:case 35672:return et;case 35669:case 35673:return eu;case 5125:return ev;case 36294:return ew;case 36295:return ex;case 36296:return ey;case 35678:case 36198:case 36298:case 36306:case 35682:return ez;case 35679:case 36299:case 36307:return eA;case 35680:case 36300:case 36308:case 36293:return eB;case 36289:case 36303:case 36311:case 36292:return eC}}(b.type)}function aR(b,a,c){this.id=b,this.addr=c,this.cache=[],this.size=a.size,this.setValue=function(a){switch(a){case 5126:return eD;case 35664:return eE;case 35665:return eF;case 35666:return eG;case 35674:return eH;case 35675:return eI;case 35676:return eJ;case 5124:case 35670:return eK;case 35667:case 35671:return eL;case 35668:case 35672:return eM;case 35669:case 35673:return eN;case 5125:return eO;case 36294:return eP;case 36295:return eQ;case 36296:return eR;case 35678:case 36198:case 36298:case 36306:case 35682:return eS;case 35680:case 36300:case 36308:case 36293:return eT}}(a.type)}function aS(a){this.id=a,this.seq=[],this.map={}}aR.prototype.updateCache=function(a){const b=this.cache;a instanceof Float32Array&&b.length!==a.length&&(this.cache=new Float32Array(a.length)),ei(b,a)},aS.prototype.setValue=function(d,e,f){const b=this.seq;for(let a=0,g=b.length;a!==g;++a){const c=b[a];c.setValue(d,e[c.id],f)}};const eV=/(\w+)(\])?(\[|\.)?/g;function eW(b,a){b.seq.push(a),b.map[a.id]=a}function eX(c,g,b){const h=c.name,i=h.length;for(eV.lastIndex=0;;){const d=eV.exec(h),j=eV.lastIndex;let a=d[1];const k="]"===d[2],e=d[3];if(k&&(a|=0),void 0===e||"["===e&&j+2===i){eW(b,void 0===e?new eU(a,c,g):new aR(a,c,g));break}{const l=b.map;let f=l[a];void 0===f&&eW(b,f=new aS(a)),b=f}}}function L(a,b){this.seq=[],this.map={};const e=a.getProgramParameter(b,35718);for(let c=0;c<e;++c){const d=a.getActiveUniform(b,c),f=a.getUniformLocation(b,d.name);eX(d,f,this)}}function eY(a,c,d){const b=a.createShader(c);return a.shaderSource(b,d),a.compileShader(b),b}L.prototype.setValue=function(b,c,d,e){const a=this.map[c];void 0!==a&&a.setValue(b,d,e)},L.prototype.setOptional=function(c,d,a){const b=d[a];void 0!==b&&this.setValue(c,a,b)},L.upload=function(e,b,f,g){for(let a=0,h=b.length;a!==h;++a){const c=b[a],d=f[c.id];!1!==d.needsUpdate&&c.setValue(e,d.value,g)}},L.seqWithValue=function(b,e){const c=[];for(let a=0,f=b.length;a!==f;++a){const d=b[a];d.id in e&&c.push(d)}return c};let eZ=0;function e$(a){switch(a){case 3e3:return["Linear","( value )"];case av:return["sRGB","( value )"];case 3002:return["RGBE","( value )"];case 3004:return["RGBM","( value, 7.0 )"];case 3005:return["RGBM","( value, 16.0 )"];case 3006:return["RGBD","( value, 256.0 )"];case 3007:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case 3003:return["LogLuv","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",a),["Linear","( value )"]}}function e_(a,b,d){const e=a.getShaderParameter(b,35713),c=a.getShaderInfoLog(b).trim();return e&&""===c?"":d.toUpperCase()+"\n\n"+c+"\n\n"+function(c){const b=c.split("\n");for(let a=0;a<b.length;a++)b[a]=a+1+": "+b[a];return b.join("\n")}(a.getShaderSource(b))}function e0(b,c){const a=e$(c);return"vec4 "+b+"( vec4 value ) { return "+a[0]+"ToLinear"+a[1]+"; }"}function e1(a){return""!==a}function e2(b,a){return b.replace(/NUM_DIR_LIGHTS/g,a.numDirLights).replace(/NUM_SPOT_LIGHTS/g,a.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,a.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,a.numPointLights).replace(/NUM_HEMI_LIGHTS/g,a.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,a.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,a.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,a.numPointLightShadows)}function e3(b,a){return b.replace(/NUM_CLIPPING_PLANES/g,a.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,a.numClippingPlanes-a.numClipIntersection)}const e4=/^[ \t]*#include +<([\w\d./]+)>/gm;function e5(a){return a.replace(e4,e6)}function e6(c,a){const b=d[a];if(void 0===b)throw new Error("Can not resolve #include <"+a+">");return e5(b)}const e7=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,e8=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function e9(a){return a.replace(e8,fb).replace(e7,fa)}function fa(a,b,c,d){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),fb(a,b,c,d)}function fb(f,c,d,e){let b="";for(let a=parseInt(c);a<parseInt(d);a++)b+=e.replace(/\[\s*i\s*\]/g,"[ "+a+" ]").replace(/UNROLLED_LOOP_INDEX/g,a);return b}function fc(a){let b="precision "+a.precision+" float;\nprecision "+a.precision+" int;";return"highp"===a.precision?b+="\n#define HIGH_PRECISION":"mediump"===a.precision?b+="\n#define MEDIUM_PRECISION":"lowp"===a.precision&&(b+="\n#define LOW_PRECISION"),b}function fd(l,y,a,E){var o;const b=l.getContext(),z=a.defines;let f=a.vertexShader,c=a.fragmentShader,i;const q=(i="SHADOWMAP_TYPE_BASIC",1===(o=a).shadowMapType?i="SHADOWMAP_TYPE_PCF":2===o.shadowMapType?i="SHADOWMAP_TYPE_PCF_SOFT":3===o.shadowMapType&&(i="SHADOWMAP_TYPE_VSM"),i),A=function(b){let a="ENVMAP_TYPE_CUBE";if(b.envMap)switch(b.envMapMode){case 301:case 302:a="ENVMAP_TYPE_CUBE";break;case 306:case 307:a="ENVMAP_TYPE_CUBE_UV";break}return a}(a),r=function(a){let b="ENVMAP_MODE_REFLECTION";if(a.envMap)switch(a.envMapMode){case 302:case 307:b="ENVMAP_MODE_REFRACTION";break}return b}(a),B=function(b){let a="ENVMAP_BLENDING_NONE";if(b.envMap)switch(b.combine){case 0:a="ENVMAP_BLENDING_MULTIPLY";break;case 1:a="ENVMAP_BLENDING_MIX";break;case 2:a="ENVMAP_BLENDING_ADD";break}return a}(a),s=l.gammaFactor>0?l.gammaFactor:1,t=a.isWebGL2?"":function(a){const b=[a.extensionDerivatives||a.envMapCubeUV||a.bumpMap||a.tangentSpaceNormalMap||a.clearcoatNormalMap||a.flatShading||"physical"===a.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(a.extensionFragDepth||a.logarithmicDepthBuffer)&&a.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",a.extensionDrawBuffers&&a.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(a.extensionShaderTextureLOD||a.envMap||a.transmission)&&a.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""];return b.filter(e1).join("\n")}(a),m=function(a){const b=[];for(const c in a){const d=a[c];!1!==d&&b.push("#define "+c+" "+d)}return b.join("\n")}(z),e=b.createProgram();let g,h,p=a.glslVersion?"#version "+a.glslVersion+"\n":"";a.isRawShaderMaterial?((g=[m].filter(e1).join("\n")).length>0&&(g+="\n"),(h=[t,m].filter(e1).join("\n")).length>0&&(h+="\n")):(g=[fc(a),"#define SHADER_NAME "+a.shaderName,m,a.instancing?"#define USE_INSTANCING":"",a.instancingColor?"#define USE_INSTANCING_COLOR":"",a.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+s,"#define MAX_BONES "+a.maxBones,a.useFog&&a.fog?"#define USE_FOG":"",a.useFog&&a.fogExp2?"#define FOG_EXP2":"",a.map?"#define USE_MAP":"",a.envMap?"#define USE_ENVMAP":"",a.envMap?"#define "+r:"",a.lightMap?"#define USE_LIGHTMAP":"",a.aoMap?"#define USE_AOMAP":"",a.emissiveMap?"#define USE_EMISSIVEMAP":"",a.bumpMap?"#define USE_BUMPMAP":"",a.normalMap?"#define USE_NORMALMAP":"",a.normalMap&&a.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",a.normalMap&&a.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",a.clearcoatMap?"#define USE_CLEARCOATMAP":"",a.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",a.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",a.displacementMap&&a.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",a.specularMap?"#define USE_SPECULARMAP":"",a.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",a.specularColorMap?"#define USE_SPECULARCOLORMAP":"",a.roughnessMap?"#define USE_ROUGHNESSMAP":"",a.metalnessMap?"#define USE_METALNESSMAP":"",a.alphaMap?"#define USE_ALPHAMAP":"",a.transmission?"#define USE_TRANSMISSION":"",a.transmissionMap?"#define USE_TRANSMISSIONMAP":"",a.thicknessMap?"#define USE_THICKNESSMAP":"",a.sheenColorMap?"#define USE_SHEENCOLORMAP":"",a.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",a.vertexTangents?"#define USE_TANGENT":"",a.vertexColors?"#define USE_COLOR":"",a.vertexAlphas?"#define USE_COLOR_ALPHA":"",a.vertexUvs?"#define USE_UV":"",a.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",a.flatShading?"#define FLAT_SHADED":"",a.skinning?"#define USE_SKINNING":"",a.useVertexTexture?"#define BONE_TEXTURE":"",a.morphTargets?"#define USE_MORPHTARGETS":"",a.morphNormals&& !1===a.flatShading?"#define USE_MORPHNORMALS":"",a.morphTargets&&a.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",a.morphTargets&&a.isWebGL2?"#define MORPHTARGETS_COUNT "+a.morphTargetsCount:"",a.doubleSided?"#define DOUBLE_SIDED":"",a.flipSided?"#define FLIP_SIDED":"",a.shadowMapEnabled?"#define USE_SHADOWMAP":"",a.shadowMapEnabled?"#define "+q:"",a.sizeAttenuation?"#define USE_SIZEATTENUATION":"",a.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",a.logarithmicDepthBuffer&&a.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif","\n"].filter(e1).join("\n"),h=[t,fc(a),"#define SHADER_NAME "+a.shaderName,m,"#define GAMMA_FACTOR "+s,a.useFog&&a.fog?"#define USE_FOG":"",a.useFog&&a.fogExp2?"#define FOG_EXP2":"",a.map?"#define USE_MAP":"",a.matcap?"#define USE_MATCAP":"",a.envMap?"#define USE_ENVMAP":"",a.envMap?"#define "+A:"",a.envMap?"#define "+r:"",a.envMap?"#define "+B:"",a.lightMap?"#define USE_LIGHTMAP":"",a.aoMap?"#define USE_AOMAP":"",a.emissiveMap?"#define USE_EMISSIVEMAP":"",a.bumpMap?"#define USE_BUMPMAP":"",a.normalMap?"#define USE_NORMALMAP":"",a.normalMap&&a.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",a.normalMap&&a.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",a.clearcoat?"#define USE_CLEARCOAT":"",a.clearcoatMap?"#define USE_CLEARCOATMAP":"",a.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",a.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",a.specularMap?"#define USE_SPECULARMAP":"",a.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",a.specularColorMap?"#define USE_SPECULARCOLORMAP":"",a.roughnessMap?"#define USE_ROUGHNESSMAP":"",a.metalnessMap?"#define USE_METALNESSMAP":"",a.alphaMap?"#define USE_ALPHAMAP":"",a.alphaTest?"#define USE_ALPHATEST":"",a.sheen?"#define USE_SHEEN":"",a.sheenColorMap?"#define USE_SHEENCOLORMAP":"",a.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",a.transmission?"#define USE_TRANSMISSION":"",a.transmissionMap?"#define USE_TRANSMISSIONMAP":"",a.thicknessMap?"#define USE_THICKNESSMAP":"",a.vertexTangents?"#define USE_TANGENT":"",a.vertexColors||a.instancingColor?"#define USE_COLOR":"",a.vertexAlphas?"#define USE_COLOR_ALPHA":"",a.vertexUvs?"#define USE_UV":"",a.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",a.gradientMap?"#define USE_GRADIENTMAP":"",a.flatShading?"#define FLAT_SHADED":"",a.doubleSided?"#define DOUBLE_SIDED":"",a.flipSided?"#define FLIP_SIDED":"",a.shadowMapEnabled?"#define USE_SHADOWMAP":"",a.shadowMapEnabled?"#define "+q:"",a.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",a.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",a.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",a.logarithmicDepthBuffer&&a.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(a.extensionShaderTextureLOD||a.envMap)&&a.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==a.toneMapping?"#define TONE_MAPPING":"",0!==a.toneMapping?d.tonemapping_pars_fragment:"",0!==a.toneMapping?function(c,b){let a;switch(b){case 1:a="Linear";break;case 2:a="Reinhard";break;case 3:a="OptimizedCineon";break;case 4:a="ACESFilmic";break;case 5:a="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",b),a="Linear"}return"vec3 "+c+"( vec3 color ) { return "+a+"ToneMapping( color ); }"}("toneMapping",a.toneMapping):"",a.dithering?"#define DITHERING":"",a.format===bK?"#define OPAQUE":"",d.encodings_pars_fragment,a.map?e0("mapTexelToLinear",a.mapEncoding):"",a.matcap?e0("matcapTexelToLinear",a.matcapEncoding):"",a.envMap?e0("envMapTexelToLinear",a.envMapEncoding):"",a.emissiveMap?e0("emissiveMapTexelToLinear",a.emissiveMapEncoding):"",a.specularColorMap?e0("specularColorMapTexelToLinear",a.specularColorMapEncoding):"",a.sheenColorMap?e0("sheenColorMapTexelToLinear",a.sheenColorMapEncoding):"",a.lightMap?e0("lightMapTexelToLinear",a.lightMapEncoding):"",function(b,c){const a=e$(c);return"vec4 "+b+"( vec4 value ) { return LinearTo"+a[0]+a[1]+"; }"}("linearToOutputTexel",a.outputEncoding),a.depthPacking?"#define DEPTH_PACKING "+a.depthPacking:"","\n"].filter(e1).join("\n")),f=e3(f=e2(f=e5(f),a),a),c=e5(c),c=e2(c,a),c=e3(c,a),f=e9(f),c=e9(c),a.isWebGL2&& !0!==a.isRawShaderMaterial&&(p="#version 300 es\n",g="precision mediump sampler2DArray;\n#define attribute in\n#define varying out\n#define texture2D texture\n"+g,h=["#define varying in",a.glslVersion===bO?"":"out highp vec4 pc_fragColor;",a.glslVersion===bO?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+h);const j=eY(b,35633,p+g+f),k=eY(b,35632,p+h+c);if(b.attachShader(e,j),b.attachShader(e,k),void 0!==a.index0AttributeName?b.bindAttribLocation(e,0,a.index0AttributeName):!0===a.morphTargets&&b.bindAttribLocation(e,0,"position"),b.linkProgram(e),l.debug.checkShaderErrors){const n=b.getProgramInfoLog(e).trim(),u=b.getShaderInfoLog(j).trim(),v=b.getShaderInfoLog(k).trim();let w=!0,x=!0;if(!1===b.getProgramParameter(e,35714)){w=!1;const C=e_(b,j,"vertex"),D=e_(b,k,"fragment");console.error("THREE.WebGLProgram: Shader Error "+b.getError()+" - VALIDATE_STATUS "+b.getProgramParameter(e,35715)+"\n\nProgram Info Log: "+n+"\n"+C+"\n"+D)}else""!==n?console.warn("THREE.WebGLProgram: Program Info Log:",n):(""===u||""===v)&&(x=!1);x&&(this.diagnostics={runnable:w,programLog:n,vertexShader:{log:u,prefix:g},fragmentShader:{log:v,prefix:h}})}b.deleteShader(j),b.deleteShader(k);let F;this.getUniforms=function(){return void 0===F&&(F=new L(b,e)),F};let G;return this.getAttributes=function(){return void 0===G&&(G=function(c,d){const f={},h=c.getProgramParameter(d,35721);for(let e=0;e<h;e++){const a=c.getActiveAttrib(d,e),g=a.name;let b=1;35674===a.type&&(b=2),35675===a.type&&(b=3),35676===a.type&&(b=4),f[g]={type:a.type,location:c.getAttribLocation(d,g),locationSize:b}}return f}(b,e)),G},this.destroy=function(){E.releaseStatesOfProgram(this),b.deleteProgram(e),this.program=void 0},this.name=a.shaderName,this.id=eZ++,this.cacheKey=y,this.usedTimes=1,this.program=e,this.vertexShader=j,this.fragmentShader=k,this}function fe(c,d,e,f,a,g,h){const b=[],i=a.isWebGL2,j=a.logarithmicDepthBuffer,k=a.floatVertexTextures,l=a.maxVertexUniforms,m=a.vertexTextures;let n=a.precision;const o={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},p=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","instancingColor","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoat","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap",,"roughnessMap","metalnessMap","gradientMap","alphaMap","alphaTest","combine","vertexColors","vertexAlphas","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","morphTargetsCount","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","format","specularIntensityMap","specularColorMap","specularColorMapEncoding","transmission","transmissionMap","thicknessMap","sheen","sheenColorMap","sheenColorMapEncoding","sheenRoughnessMap"];function q(a){let b;return a&&a.isTexture?b=a.encoding:a&&a.isWebGLRenderTarget?(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),b=a.texture.encoding):b=3e3,i&&a&&a.isTexture&&1023===a.format&&1009===a.type&&a.encoding===av&&(b=3e3),b}return{getParameters:function(b,p,B,x,g){const t=x.fog,C=b.isMeshStandardMaterial?x.environment:null,r=(b.isMeshStandardMaterial?e:d).get(b.envMap||C),u=o[b.type],y=g.isSkinnedMesh?function(c){const d=c.skeleton,a=d.bones;if(k)return 1024;{const e=l,f=Math.floor((e-20)/4),b=Math.min(f,a.length);return b<a.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+a.length+" bones. This GPU supports "+b+"."),0):b}}(g):0;null!==b.precision&&(n=a.getMaxPrecision(b.precision))!==b.precision&&console.warn("THREE.WebGLProgram.getParameters:",b.precision,"not supported, using",n,"instead.");let v,w;if(u){const z=ad[u];v=z.vertexShader,w=z.fragmentShader}else v=b.vertexShader,w=b.fragmentShader;const A=c.getRenderTarget(),D=b.alphaTest>0,s=b.clearcoat>0,E={isWebGL2:i,shaderID:u,shaderName:b.type,vertexShader:v,fragmentShader:w,defines:b.defines,isRawShaderMaterial:!0===b.isRawShaderMaterial,glslVersion:b.glslVersion,precision:n,instancing:!0===g.isInstancedMesh,instancingColor:!0===g.isInstancedMesh&&null!==g.instanceColor,supportsVertexTextures:m,outputEncoding:null!==A?q(A.texture):c.outputEncoding,map:!!b.map,mapEncoding:q(b.map),matcap:!!b.matcap,matcapEncoding:q(b.matcap),envMap:!!r,envMapMode:r&&r.mapping,envMapEncoding:q(r),envMapCubeUV:!!r&&(306===r.mapping||307===r.mapping),lightMap:!!b.lightMap,lightMapEncoding:q(b.lightMap),aoMap:!!b.aoMap,emissiveMap:!!b.emissiveMap,emissiveMapEncoding:q(b.emissiveMap),bumpMap:!!b.bumpMap,normalMap:!!b.normalMap,objectSpaceNormalMap:1===b.normalMapType,tangentSpaceNormalMap:b.normalMapType===bN,clearcoat:s,clearcoatMap:s&&!!b.clearcoatMap,clearcoatRoughnessMap:s&&!!b.clearcoatRoughnessMap,clearcoatNormalMap:s&&!!b.clearcoatNormalMap,displacementMap:!!b.displacementMap,roughnessMap:!!b.roughnessMap,metalnessMap:!!b.metalnessMap,specularMap:!!b.specularMap,specularIntensityMap:!!b.specularIntensityMap,specularColorMap:!!b.specularColorMap,specularColorMapEncoding:q(b.specularColorMap),alphaMap:!!b.alphaMap,alphaTest:D,gradientMap:!!b.gradientMap,sheen:b.sheen>0,sheenColorMap:!!b.sheenColorMap,sheenColorMapEncoding:q(b.sheenColorMap),sheenRoughnessMap:!!b.sheenRoughnessMap,transmission:b.transmission>0,transmissionMap:!!b.transmissionMap,thicknessMap:!!b.thicknessMap,combine:b.combine,vertexTangents:!!b.normalMap&&!!g.geometry&&!!g.geometry.attributes.tangent,vertexColors:b.vertexColors,vertexAlphas:!0===b.vertexColors&&!!g.geometry&&!!g.geometry.attributes.color&&4===g.geometry.attributes.color.itemSize,vertexUvs:!!b.map||!!b.bumpMap||!!b.normalMap||!!b.specularMap||!!b.alphaMap||!!b.emissiveMap||!!b.roughnessMap||!!b.metalnessMap||!!b.clearcoatMap||!!b.clearcoatRoughnessMap||!!b.clearcoatNormalMap||!!b.displacementMap||!!b.transmissionMap||!!b.thicknessMap||!!b.specularIntensityMap||!!b.specularColorMap||!!b.sheenColorMap||b.sheenRoughnessMap,uvsVertexOnly:!(b.map||b.bumpMap||b.normalMap||b.specularMap||b.alphaMap||b.emissiveMap||b.roughnessMap||b.metalnessMap||b.clearcoatNormalMap||b.transmission>0||b.transmissionMap||b.thicknessMap||b.specularIntensityMap||b.specularColorMap|| !!b.sheen>0||b.sheenColorMap||b.sheenRoughnessMap)&&!!b.displacementMap,fog:!!t,useFog:b.fog,fogExp2:t&&t.isFogExp2,flatShading:!!b.flatShading,sizeAttenuation:b.sizeAttenuation,logarithmicDepthBuffer:j,skinning:!0===g.isSkinnedMesh&&y>0,maxBones:y,useVertexTexture:k,morphTargets:!!g.geometry&&!!g.geometry.morphAttributes.position,morphNormals:!!g.geometry&&!!g.geometry.morphAttributes.normal,morphTargetsCount:g.geometry&&g.geometry.morphAttributes.position?g.geometry.morphAttributes.position.length:0,numDirLights:p.directional.length,numPointLights:p.point.length,numSpotLights:p.spot.length,numRectAreaLights:p.rectArea.length,numHemiLights:p.hemi.length,numDirLightShadows:p.directionalShadowMap.length,numPointLightShadows:p.pointShadowMap.length,numSpotLightShadows:p.spotShadowMap.length,numClippingPlanes:h.numPlanes,numClipIntersection:h.numIntersection,format:b.format,dithering:b.dithering,shadowMapEnabled:c.shadowMap.enabled&&B.length>0,shadowMapType:c.shadowMap.type,toneMapping:b.toneMapped?c.toneMapping:0,physicallyCorrectLights:c.physicallyCorrectLights,premultipliedAlpha:b.premultipliedAlpha,doubleSided:b.side===bA,flipSided:b.side===bz,depthPacking:void 0!==b.depthPacking&&b.depthPacking,index0AttributeName:b.index0AttributeName,extensionDerivatives:b.extensions&&b.extensions.derivatives,extensionFragDepth:b.extensions&&b.extensions.fragDepth,extensionDrawBuffers:b.extensions&&b.extensions.drawBuffers,extensionShaderTextureLOD:b.extensions&&b.extensions.shaderTextureLOD,rendererExtensionFragDepth:i||f.has("EXT_frag_depth"),rendererExtensionDrawBuffers:i||f.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:i||f.has("EXT_shader_texture_lod"),customProgramCacheKey:b.customProgramCacheKey()};return E},getProgramCacheKey:function(a){const b=[];if(a.shaderID?b.push(a.shaderID):(b.push(bU(a.fragmentShader)),b.push(bU(a.vertexShader))),void 0!==a.defines)for(const e in a.defines)b.push(e),b.push(a.defines[e]);if(!1===a.isRawShaderMaterial){for(let d=0;d<p.length;d++)b.push(a[p[d]]);b.push(c.outputEncoding),b.push(c.gammaFactor)}return b.push(a.customProgramCacheKey),b.join()},getUniforms:function(b){const c=o[b.type];let a;if(c){const d=ad[c];a=dt.clone(d.uniforms)}else a=b.uniforms;return a},acquireProgram:function(h,e){let a;for(let d=0,i=b.length;d<i;d++){const f=b[d];if(f.cacheKey===e){a=f,++a.usedTimes;break}}return void 0===a&&(a=new fd(c,e,h,g),b.push(a)),a},releaseProgram:function(a){if(0== --a.usedTimes){const c=b.indexOf(a);b[c]=b[b.length-1],b.pop(),a.destroy()}},programs:b}}function ff(){let a=new WeakMap;return{get:function(c){let b=a.get(c);return void 0===b&&(b={},a.set(c,b)),b},remove:function(b){a.delete(b)},update:function(b,c,d){a.get(b)[c]=d},dispose:function(){a=new WeakMap}}}function fg(a,b){return a.groupOrder!==b.groupOrder?a.groupOrder-b.groupOrder:a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.program!==b.program?a.program.id-b.program.id:a.material.id!==b.material.id?a.material.id-b.material.id:a.z!==b.z?a.z-b.z:a.id-b.id}function fh(a,b){return a.groupOrder!==b.groupOrder?a.groupOrder-b.groupOrder:a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:a.id-b.id}function fi(d){const e=[];let f=0;const a=[],b=[],c=[],g={id:-1};function h(b,h,c,i,j,k){let a=e[f];const l=d.get(c);return void 0===a?(a={id:b.id,object:b,geometry:h,material:c,program:l.program||g,groupOrder:i,renderOrder:b.renderOrder,z:j,group:k},e[f]=a):(a.id=b.id,a.object=b,a.geometry=h,a.material=c,a.program=l.program||g,a.groupOrder=i,a.renderOrder=b.renderOrder,a.z=j,a.group=k),f++,a}return{opaque:a,transmissive:b,transparent:c,init:function(){f=0,a.length=0,b.length=0,c.length=0},push:function(f,g,d,i,j,k){const e=h(f,g,d,i,j,k);d.transmission>0?b.push(e):!0===d.transparent?c.push(e):a.push(e)},unshift:function(f,g,d,i,j,k){const e=h(f,g,d,i,j,k);d.transmission>0?b.unshift(e):!0===d.transparent?c.unshift(e):a.unshift(e)},finish:function(){for(let b=f,c=e.length;b<c;b++){const a=e[b];if(null===a.id)break;a.id=null,a.object=null,a.geometry=null,a.material=null,a.program=null,a.group=null}},sort:function(e,d){a.length>1&&a.sort(e||fg),b.length>1&&b.sort(d||fh),c.length>1&&c.sort(d||fh)}}}function fj(a){let b=new WeakMap;return{get:function(d,e){let c;return!1===b.has(d)?(c=new fi(a),b.set(d,[c])):e>=b.get(d).length?(c=new fi(a),b.get(d).push(c)):c=b.get(d)[e],c},dispose:function(){b=new WeakMap}}}function fk(){const b={};return{get:function(d){if(void 0!==b[d.id])return b[d.id];let c;switch(d.type){case"DirectionalLight":c={direction:new a,color:new g};break;case"SpotLight":c={position:new a,direction:new a,color:new g,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":c={position:new a,color:new g,distance:0,decay:0};break;case"HemisphereLight":c={direction:new a,skyColor:new g,groundColor:new g};break;case"RectAreaLight":c={color:new g,position:new a,halfWidth:new a,halfHeight:new a};break}return b[d.id]=c,c}}}let fl=0;function fm(a,b){return(b.castShadow?1:0)-(a.castShadow?1:0)}function fn(f,g){const h=new fk,i=function(){const a={};return{get:function(c){if(void 0!==a[c.id])return a[c.id];let b;switch(c.type){case"DirectionalLight":b={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new j};break;case"SpotLight":b={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new j};break;case"PointLight":b={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new j,shadowCameraNear:1,shadowCameraFar:1e3};break}return a[c.id]=b,b}}}(),d={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let e=0;e<9;e++)d.probe.push(new a);const k=new a,l=new c,m=new c;return{setup:function(D,M){let I=0,J=0,K=0;for(let E=0;E<9;E++)d.probe[E].set(0,0,0);let e=0,j=0,k=0,p=0,u=0,q=0,r=0,s=0;D.sort(fm);const l=!0!==M?Math.PI:1;for(let F=0,N=D.length;F<N;F++){const a=D[F],v=a.color,m=a.intensity,O=a.distance,G=a.shadow&&a.shadow.map?a.shadow.map.texture:null;if(a.isAmbientLight)I+=v.r*m*l,J+=v.g*m*l,K+=v.b*m*l;else if(a.isLightProbe)for(let y=0;y<9;y++)d.probe[y].addScaledVector(a.sh.coefficients[y],m);else if(a.isDirectionalLight){const L=h.get(a);if(L.color.copy(a.color).multiplyScalar(a.intensity*l),a.castShadow){const z=a.shadow,w=i.get(a);w.shadowBias=z.bias,w.shadowNormalBias=z.normalBias,w.shadowRadius=z.radius,w.shadowMapSize=z.mapSize,d.directionalShadow[e]=w,d.directionalShadowMap[e]=G,d.directionalShadowMatrix[e]=a.shadow.matrix,q++}d.directional[e]=L,e++}else if(a.isSpotLight){const n=h.get(a);if(n.position.setFromMatrixPosition(a.matrixWorld),n.color.copy(v).multiplyScalar(m*l),n.distance=O,n.coneCos=Math.cos(a.angle),n.penumbraCos=Math.cos(a.angle*(1-a.penumbra)),n.decay=a.decay,a.castShadow){const A=a.shadow,x=i.get(a);x.shadowBias=A.bias,x.shadowNormalBias=A.normalBias,x.shadowRadius=A.radius,x.shadowMapSize=A.mapSize,d.spotShadow[k]=x,d.spotShadowMap[k]=G,d.spotShadowMatrix[k]=a.shadow.matrix,s++}d.spot[k]=n,k++}else if(a.isRectAreaLight){const B=h.get(a);B.color.copy(v).multiplyScalar(m),B.halfWidth.set(.5*a.width,0,0),B.halfHeight.set(0,.5*a.height,0),d.rectArea[p]=B,p++}else if(a.isPointLight){const C=h.get(a);if(C.color.copy(a.color).multiplyScalar(a.intensity*l),C.distance=a.distance,C.decay=a.decay,a.castShadow){const t=a.shadow,o=i.get(a);o.shadowBias=t.bias,o.shadowNormalBias=t.normalBias,o.shadowRadius=t.radius,o.shadowMapSize=t.mapSize,o.shadowCameraNear=t.camera.near,o.shadowCameraFar=t.camera.far,d.pointShadow[j]=o,d.pointShadowMap[j]=G,d.pointShadowMatrix[j]=a.shadow.matrix,r++}d.point[j]=C,j++}else if(a.isHemisphereLight){const H=h.get(a);H.skyColor.copy(a.color).multiplyScalar(m*l),H.groundColor.copy(a.groundColor).multiplyScalar(m*l),d.hemi[u]=H,u++}}p>0&&(g.isWebGL2?(d.rectAreaLTC1=b.LTC_FLOAT_1,d.rectAreaLTC2=b.LTC_FLOAT_2):!0===f.has("OES_texture_float_linear")?(d.rectAreaLTC1=b.LTC_FLOAT_1,d.rectAreaLTC2=b.LTC_FLOAT_2):!0===f.has("OES_texture_half_float_linear")?(d.rectAreaLTC1=b.LTC_HALF_1,d.rectAreaLTC2=b.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),d.ambient[0]=I,d.ambient[1]=J,d.ambient[2]=K;const c=d.hash;(c.directionalLength!==e||c.pointLength!==j||c.spotLength!==k||c.rectAreaLength!==p||c.hemiLength!==u||c.numDirectionalShadows!==q||c.numPointShadows!==r||c.numSpotShadows!==s)&&(d.directional.length=e,d.spot.length=k,d.rectArea.length=p,d.point.length=j,d.hemi.length=u,d.directionalShadow.length=q,d.directionalShadowMap.length=q,d.pointShadow.length=r,d.pointShadowMap.length=r,d.spotShadow.length=s,d.spotShadowMap.length=s,d.directionalShadowMatrix.length=q,d.pointShadowMatrix.length=r,d.spotShadowMatrix.length=s,c.directionalLength=e,c.pointLength=j,c.spotLength=k,c.rectAreaLength=p,c.hemiLength=u,c.numDirectionalShadows=q,c.numPointShadows=r,c.numSpotShadows=s,d.version=fl++)},setupView:function(i,s){let j=0,n=0,o=0,p=0,q=0;const b=s.matrixWorldInverse;for(let f=0,t=i.length;f<t;f++){const a=i[f];if(a.isDirectionalLight){const g=d.directional[j];g.direction.setFromMatrixPosition(a.matrixWorld),k.setFromMatrixPosition(a.target.matrixWorld),g.direction.sub(k),g.direction.transformDirection(b),j++}else if(a.isSpotLight){const e=d.spot[o];e.position.setFromMatrixPosition(a.matrixWorld),e.position.applyMatrix4(b),e.direction.setFromMatrixPosition(a.matrixWorld),k.setFromMatrixPosition(a.target.matrixWorld),e.direction.sub(k),e.direction.transformDirection(b),o++}else if(a.isRectAreaLight){const c=d.rectArea[p];c.position.setFromMatrixPosition(a.matrixWorld),c.position.applyMatrix4(b),m.identity(),l.copy(a.matrixWorld),l.premultiply(b),m.extractRotation(l),c.halfWidth.set(.5*a.width,0,0),c.halfHeight.set(0,.5*a.height,0),c.halfWidth.applyMatrix4(m),c.halfHeight.applyMatrix4(m),p++}else if(a.isPointLight){const r=d.point[n];r.position.setFromMatrixPosition(a.matrixWorld),r.position.applyMatrix4(b),n++}else if(a.isHemisphereLight){const h=d.hemi[q];h.direction.setFromMatrixPosition(a.matrixWorld),h.direction.transformDirection(b),h.direction.normalize(),q++}}},state:d}}function fo(a,b){const c=new fn(a,b),d=[],e=[];return{init:function(){d.length=0,e.length=0},state:{lightsArray:d,shadowsArray:e,lights:c},setupLights:function(a){c.setup(d,a)},setupLightsView:function(a){c.setupView(d,a)},pushLight:function(a){d.push(a)},pushShadow:function(a){e.push(a)}}}function fp(a,b){let c=new WeakMap;return{get:function(e,f=0){let d;return!1===c.has(e)?(d=new fo(a,b),c.set(e,[d])):f>=c.get(e).length?(d=new fo(a,b),c.get(e).push(d)):d=c.get(e)[f],d},dispose:function(){c=new WeakMap}}}class aT extends n{constructor(a){super(),this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(a)}copy(a){return super.copy(a),this.depthPacking=a.depthPacking,this.map=a.map,this.alphaMap=a.alphaMap,this.displacementMap=a.displacementMap,this.displacementScale=a.displacementScale,this.displacementBias=a.displacementBias,this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this}}aT.prototype.isMeshDepthMaterial=!0;class aU extends n{constructor(b){super(),this.type="MeshDistanceMaterial",this.referencePosition=new a,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(b)}copy(a){return super.copy(a),this.referencePosition.copy(a.referencePosition),this.nearDistance=a.nearDistance,this.farDistance=a.farDistance,this.map=a.map,this.alphaMap=a.alphaMap,this.displacementMap=a.displacementMap,this.displacementScale=a.displacementScale,this.displacementBias=a.displacementBias,this}}function aV(e,g,c){let h=new aO;const i=new j,k=new j,l=new D,m=new aT({depthPacking:3201}),n=new aU,o={},p=c.maxTextureSize,r={0:bz,1:by,2:bA},a=new O({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new j},radius:{value:4}},vertexShader:"void main() {\n	gl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),d=a.clone();d.defines.HORIZONTAL_PASS=1;const b=new f;b.setAttribute("position",new q(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const s=new F(b,a),t=this;function u(b,c){const f=g.update(s);a.defines.VSM_SAMPLES!==b.blurSamples&&(a.defines.VSM_SAMPLES=b.blurSamples,d.defines.VSM_SAMPLES=b.blurSamples,a.needsUpdate=!0,d.needsUpdate=!0),a.uniforms.shadow_pass.value=b.map.texture,a.uniforms.resolution.value=b.mapSize,a.uniforms.radius.value=b.radius,e.setRenderTarget(b.mapPass),e.clear(),e.renderBufferDirect(c,null,f,a,s,null),d.uniforms.shadow_pass.value=b.mapPass.texture,d.uniforms.resolution.value=b.mapSize,d.uniforms.radius.value=b.radius,e.setRenderTarget(b.map),e.clear(),e.renderBufferDirect(c,null,f,d,s,null)}function v(g,q,a,d,k,l,p){let b=null;const h=!0===d.isPointLight?g.customDistanceMaterial:g.customDepthMaterial;if(b=void 0!==h?h:!0===d.isPointLight?n:m,e.localClippingEnabled&& !0===a.clipShadows&&0!==a.clippingPlanes.length||a.displacementMap&&0!==a.displacementScale||a.alphaMap&&a.alphaTest>0){const i=b.uuid,j=a.uuid;let c=o[i];void 0===c&&(c={},o[i]=c);let f=c[j];void 0===f&&(f=b.clone(),c[j]=f),b=f}return b.visible=a.visible,b.wireframe=a.wireframe,3===p?b.side=null!==a.shadowSide?a.shadowSide:a.side:b.side=null!==a.shadowSide?a.shadowSide:r[a.side],b.alphaMap=a.alphaMap,b.alphaTest=a.alphaTest,b.clipShadows=a.clipShadows,b.clippingPlanes=a.clippingPlanes,b.clipIntersection=a.clipIntersection,b.displacementMap=a.displacementMap,b.displacementScale=a.displacementScale,b.displacementBias=a.displacementBias,b.wireframeLinewidth=a.wireframeLinewidth,b.linewidth=a.linewidth,!0===d.isPointLight&& !0===b.isMeshDistanceMaterial&&(b.referencePosition.setFromMatrixPosition(d.matrixWorld),b.nearDistance=k,b.farDistance=l),b}function w(a,m,b,i,d){if(!1===a.visible)return;const q=a.layers.test(m.layers);if(q&&(a.isMesh||a.isLine||a.isPoints)&&(a.castShadow||a.receiveShadow&&3===d)&&(!a.frustumCulled||h.intersectsObject(a))){a.modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,a.matrixWorld);const c=g.update(a),f=a.material;if(Array.isArray(f)){const n=c.groups;for(let j=0,r=n.length;j<r;j++){const o=n[j],k=f[o.materialIndex];if(k&&k.visible){const s=v(a,c,k,i,b.near,b.far,d);e.renderBufferDirect(b,null,c,s,a,o)}}}else if(f.visible){const t=v(a,c,f,i,b.near,b.far,d);e.renderBufferDirect(b,null,c,t,a,null)}}const p=a.children;for(let l=0,u=p.length;l<u;l++)w(p[l],m,b,i,d)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(j,q,n){if(!1===t.enabled)return;if(!1===t.autoUpdate&& !1===t.needsUpdate)return;if(0===j.length)return;const r=e.getRenderTarget(),s=e.getActiveCubeFace(),v=e.getActiveMipmapLevel(),c=e.state;c.setBlending(0),c.buffers.color.setClear(1,1,1,1),c.buffers.depth.setTest(!0),c.setScissorTest(!1);for(let m=0,x=j.length;m<x;m++){const b=j[m],a=b.shadow;if(void 0===a){console.warn("THREE.WebGLShadowMap:",b,"has no shadow.");continue}if(!1===a.autoUpdate&& !1===a.needsUpdate)continue;i.copy(a.mapSize);const d=a.getFrameExtents();if(i.multiply(d),k.copy(a.mapSize),(i.x>p||i.y>p)&&(i.x>p&&(k.x=Math.floor(p/d.x),i.x=k.x*d.x,a.mapSize.x=k.x),i.y>p&&(k.y=Math.floor(p/d.y),i.y=k.y*d.y,a.mapSize.y=k.y)),null===a.map&&!a.isPointLightShadow&&3===this.type){const o={minFilter:bH,magFilter:bH,format:1023};a.map=new J(i.x,i.y,o),a.map.texture.name=b.name+".shadowMap",a.mapPass=new J(i.x,i.y,o),a.camera.updateProjectionMatrix()}if(null===a.map){const y={minFilter:bE,magFilter:bE,format:1023};a.map=new J(i.x,i.y,y),a.map.texture.name=b.name+".shadowMap",a.camera.updateProjectionMatrix()}e.setRenderTarget(a.map),e.clear();const z=a.getViewportCount();for(let f=0;f<z;f++){const g=a.getViewport(f);l.set(k.x*g.x,k.y*g.y,k.x*g.z,k.y*g.w),c.viewport(l),a.updateMatrices(b,f),h=a.getFrustum(),w(q,n,a.camera,b,this.type)}a.isPointLightShadow||3!==this.type||u(a,n),a.needsUpdate=!1}t.needsUpdate=!1,e.setRenderTarget(r,s,v)}}function fq(a,l,m){const n=m.isWebGL2,g=new function(){let b=!1;const c=new D;let d=null;const e=new D(0,0,0,0);return{setMask:function(c){d===c||b||(a.colorMask(c,c,c,c),d=c)},setLocked:function(a){b=a},setClear:function(d,f,g,b,h){!0===h&&(d*=b,f*=b,g*=b),c.set(d,f,g,b),!1===e.equals(c)&&(a.clearColor(d,f,g,b),e.copy(c))},reset:function(){b=!1,d=null,e.set(-1,0,0,0)}}},d=new function(){let b=!1,c=null,d=null,f=null;return{setTest:function(a){a?e(2929):q(2929)},setMask:function(d){c===d||b||(a.depthMask(d),c=d)},setFunc:function(b){if(d!==b){if(b)switch(b){case 0:a.depthFunc(512);break;case 1:a.depthFunc(519);break;case 2:a.depthFunc(513);break;case 3:a.depthFunc(515);break;case 4:a.depthFunc(514);break;case 5:a.depthFunc(518);break;case 6:a.depthFunc(516);break;case 7:a.depthFunc(517);break;default:a.depthFunc(515)}else a.depthFunc(515);d=b}},setLocked:function(a){b=a},setClear:function(b){f!==b&&(a.clearDepth(b),f=b)},reset:function(){b=!1,c=null,d=null,f=null}}},h=new function(){let b=!1,c=null,d=null,f=null,g=null,h=null,i=null,j=null,k=null;return{setTest:function(a){b||(a?e(2960):q(2960))},setMask:function(d){c===d||b||(a.stencilMask(d),c=d)},setFunc:function(b,c,e){(d!==b||f!==c||g!==e)&&(a.stencilFunc(b,c,e),d=b,f=c,g=e)},setOp:function(b,c,d){(h!==b||i!==c||j!==d)&&(a.stencilOp(b,c,d),h=b,i=c,j=d)},setLocked:function(a){b=a},setClear:function(b){k!==b&&(a.clearStencil(b),k=b)},reset:function(){b=!1,c=null,d=null,f=null,g=null,h=null,i=null,j=null,k=null}}};let w={},x=null,y={},z=null,A=!1,B=null,C=null,E=null,F=null,G=null,H=null,I=null,J=!1,K=null,L=null,M=null,N=null,O=null;const P=a.getParameter(35661);let i=!1;const b=a.getParameter(7938);-1!==b.indexOf("WebGL")?i=parseFloat(/^WebGL (\d)/.exec(b)[1])>=1:-1!==b.indexOf("OpenGL ES")&&(i=parseFloat(/^OpenGL ES (\d)/.exec(b)[1])>=2);let Q=null,R={};const o=a.getParameter(3088),p=a.getParameter(2978),S=new D().fromArray(o),T=new D().fromArray(p);function j(b,e,f){const g=new Uint8Array(4),d=a.createTexture();a.bindTexture(b,d),a.texParameteri(b,10241,9728),a.texParameteri(b,10240,9728);for(let c=0;c<f;c++)a.texImage2D(e+c,0,6408,1,1,0,6408,5121,g);return d}const k={};function e(b){!0!==w[b]&&(a.enable(b),w[b]=!0)}function q(b){!1!==w[b]&&(a.disable(b),w[b]=!1)}k[3553]=j(3553,3553,1),k[34067]=j(34067,34069,6),g.setClear(0,0,0,1),d.setClear(1),h.setClear(0),e(2929),d.setFunc(3),s(!1),t(1),e(2884),r(0);const c={[100]:32774,[101]:32778,[102]:32779};if(n)c[103]=32775,c[104]=32776;else{const f=l.get("EXT_blend_minmax");null!==f&&(c[103]=f.MIN_EXT,c[104]=f.MAX_EXT)}const U={[200]:0,[201]:1,[202]:768,[204]:770,[210]:776,[208]:774,[206]:772,[203]:769,[205]:771,[209]:775,[207]:773};function r(b,h,i,j,d,f,g,k){if(0===b){!0===A&&(q(3042),A=!1);return}if(!1===A&&(e(3042),A=!0),5!==b){if(b!==B||k!==J){if((100!==C||100!==G)&&(a.blendEquation(32774),C=100,G=100),k)switch(b){case 1:a.blendFuncSeparate(1,771,1,771);break;case 2:a.blendFunc(1,1);break;case 3:a.blendFuncSeparate(0,0,769,771);break;case 4:a.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",b);break}else switch(b){case 1:a.blendFuncSeparate(770,771,1,771);break;case 2:a.blendFunc(770,1);break;case 3:a.blendFunc(0,769);break;case 4:a.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",b);break}E=null,F=null,H=null,I=null,B=b,J=k}return}d=d||h,f=f||i,g=g||j,(h!==C||d!==G)&&(a.blendEquationSeparate(c[h],c[d]),C=h,G=d),(i!==E||j!==F||f!==H||g!==I)&&(a.blendFuncSeparate(U[i],U[j],U[f],U[g]),E=i,F=j,H=f,I=g),B=b,J=null}function s(b){K!==b&&(b?a.frontFace(2304):a.frontFace(2305),K=b)}function t(b){0!==b?(e(2884),b!==L&&(1===b?a.cullFace(1029):2===b?a.cullFace(1028):a.cullFace(1032))):q(2884),L=b}function u(d,b,c){d?(e(32823),(N!==b||O!==c)&&(a.polygonOffset(b,c),N=b,O=c)):q(32823)}function v(b){void 0===b&&(b=33984+P-1),Q!==b&&(a.activeTexture(b),Q=b)}return{buffers:{color:g,depth:d,stencil:h},enable:e,disable:q,bindFramebuffer:function(c,b){return null===b&&null!==x&&(b=x),y[c]!==b&&(a.bindFramebuffer(c,b),y[c]=b,n&&(36009===c&&(y[36160]=b),36160===c&&(y[36009]=b)),!0)},bindXRFramebuffer:function(b){b!==x&&(a.bindFramebuffer(36160,b),x=b)},useProgram:function(b){return z!==b&&(a.useProgram(b),z=b,!0)},setBlending:r,setMaterial:function(a,f){a.side===bA?q(2884):e(2884);let b=a.side===bz;f&&(b=!b),s(b),1===a.blending&& !1===a.transparent?r(0):r(a.blending,a.blendEquation,a.blendSrc,a.blendDst,a.blendEquationAlpha,a.blendSrcAlpha,a.blendDstAlpha,a.premultipliedAlpha),d.setFunc(a.depthFunc),d.setTest(a.depthTest),d.setMask(a.depthWrite),g.setMask(a.colorWrite);const c=a.stencilWrite;h.setTest(c),c&&(h.setMask(a.stencilWriteMask),h.setFunc(a.stencilFunc,a.stencilRef,a.stencilFuncMask),h.setOp(a.stencilFail,a.stencilZFail,a.stencilZPass)),u(a.polygonOffset,a.polygonOffsetFactor,a.polygonOffsetUnits),!0===a.alphaToCoverage?e(32926):q(32926)},setFlipSided:s,setCullFace:t,setLineWidth:function(b){b!==M&&(i&&a.lineWidth(b),M=b)},setPolygonOffset:u,setScissorTest:function(a){a?e(3089):q(3089)},activeTexture:v,bindTexture:function(c,d){null===Q&&v();let b=R[Q];void 0===b&&(b={type:void 0,texture:void 0},R[Q]=b),(b.type!==c||b.texture!==d)&&(a.bindTexture(c,d||k[c]),b.type=c,b.texture=d)},unbindTexture:function(){const b=R[Q];void 0!==b&& void 0!==b.type&&(a.bindTexture(b.type,null),b.type=void 0,b.texture=void 0)},compressedTexImage2D:function(){try{a.compressedTexImage2D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},texImage2D:function(){try{a.texImage2D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},texImage3D:function(){try{a.texImage3D.apply(a,arguments)}catch(b){console.error("THREE.WebGLState:",b)}},scissor:function(b){!1===S.equals(b)&&(a.scissor(b.x,b.y,b.z,b.w),S.copy(b))},viewport:function(b){!1===T.equals(b)&&(a.viewport(b.x,b.y,b.z,b.w),T.copy(b))},reset:function(){a.disable(3042),a.disable(2884),a.disable(2929),a.disable(32823),a.disable(3089),a.disable(2960),a.disable(32926),a.blendEquation(32774),a.blendFunc(1,0),a.blendFuncSeparate(1,0,1,0),a.colorMask(!0,!0,!0,!0),a.clearColor(0,0,0,0),a.depthMask(!0),a.depthFunc(513),a.clearDepth(1),a.stencilMask(4294967295),a.stencilFunc(519,0,4294967295),a.stencilOp(7680,7680,7680),a.clearStencil(0),a.cullFace(1029),a.frontFace(2305),a.polygonOffset(0,0),a.activeTexture(33984),a.bindFramebuffer(36160,null),!0===n&&(a.bindFramebuffer(36009,null),a.bindFramebuffer(36008,null)),a.useProgram(null),a.lineWidth(1),a.scissor(0,0,a.canvas.width,a.canvas.height),a.viewport(0,0,a.canvas.width,a.canvas.height),w={},Q=null,R={},x=null,y={},z=null,A=!1,B=null,C=null,E=null,F=null,G=null,H=null,I=null,J=!1,K=null,L=null,M=null,N=null,O=null,S.set(0,0,a.canvas.width,a.canvas.height),T.set(0,0,a.canvas.width,a.canvas.height),g.reset(),d.reset(),h.reset()}}}function fr(f,g,h,i,a,j,k){const l=a.isWebGL2,m=a.maxTextures,n=a.maxCubemapSize,o=a.maxTextureSize,p=a.maxSamples,q=new WeakMap;let r,b=!1;try{b="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(s){}function t(a,c){return b?new OffscreenCanvas(a,c):bT("canvas")}function u(a,g,i,f){let d=1;if((a.width>f||a.height>f)&&(d=f/Math.max(a.width,a.height)),d<1|| !0===g){if(("undefined"==typeof HTMLImageElement||!(a instanceof HTMLImageElement))&&("undefined"==typeof HTMLCanvasElement||!(a instanceof HTMLCanvasElement))&&("undefined"==typeof ImageBitmap||!(a instanceof ImageBitmap)))return"data"in a&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+a.width+"x"+a.height+")."),a;{const h=g?aI:Math.floor,b=h(d*a.width),c=h(d*a.height);void 0===r&&(r=t(b,c));const e=i?t(b,c):r;e.width=b,e.height=c;const j=e.getContext("2d");return j.drawImage(a,0,0,b,c),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+a.width+"x"+a.height+") to ("+b+"x"+c+")."),e}}return a}function v(c){var a,b;return((a=c.width)&a-1)==0&&0!==a&&((b=c.height)&b-1)==0&&0!==b}function w(a,b){return a.generateMipmaps&&b&&a.minFilter!==bE&&a.minFilter!==bH}function x(a,b,c,d,e=1){f.generateMipmap(a);const g=i.get(b);g.__maxMipLevel=Math.log2(Math.max(c,d,e))}function y(d,c,b,e){if(!1===l)return c;if(null!==d){if(void 0!==f[d])return f[d];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+d+"'")}let a=c;return 6403===c&&(5126===b&&(a=33326),5131===b&&(a=33325),5121===b&&(a=33321)),6407===c&&(5126===b&&(a=34837),5131===b&&(a=34843),5121===b&&(a=32849)),6408===c&&(5126===b&&(a=34836),5131===b&&(a=34842),5121===b&&(a=e===av?35907:32856)),(33325===a||33326===a||34842===a||34836===a)&&g.get("EXT_color_buffer_float"),a}function z(a){return a===bE||a===bF||a===bG?9728:9729}function A(b){const a=b.target;a.removeEventListener("dispose",A),C(a),a.isVideoTexture&&q.delete(a),k.memory.textures--}function B(b){const a=b.target;a.removeEventListener("dispose",B),D(a)}function C(a){const b=i.get(a);void 0!==b.__webglInit&&(f.deleteTexture(b.__webglTexture),i.remove(a))}function D(b){const c=b.texture,a=i.get(b),g=i.get(c);if(b){if(void 0!==g.__webglTexture&&(f.deleteTexture(g.__webglTexture),k.memory.textures--),b.depthTexture&&b.depthTexture.dispose(),b.isWebGLCubeRenderTarget)for(let d=0;d<6;d++)f.deleteFramebuffer(a.__webglFramebuffer[d]),a.__webglDepthbuffer&&f.deleteRenderbuffer(a.__webglDepthbuffer[d]);else f.deleteFramebuffer(a.__webglFramebuffer),a.__webglDepthbuffer&&f.deleteRenderbuffer(a.__webglDepthbuffer),a.__webglMultisampledFramebuffer&&f.deleteFramebuffer(a.__webglMultisampledFramebuffer),a.__webglColorRenderbuffer&&f.deleteRenderbuffer(a.__webglColorRenderbuffer),a.__webglDepthRenderbuffer&&f.deleteRenderbuffer(a.__webglDepthRenderbuffer);if(b.isWebGLMultipleRenderTargets)for(let e=0,j=c.length;e<j;e++){const h=i.get(c[e]);h.__webglTexture&&(f.deleteTexture(h.__webglTexture),k.memory.textures--),i.remove(c[e])}i.remove(c),i.remove(b)}}let E=0;function c(){E=0}function d(a,c){const b=i.get(a);if(a.isVideoTexture&&O(a),a.version>0&&b.__version!==a.version){const d=a.image;if(void 0===d)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else if(!1===d.complete)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{J(b,a,c);return}}h.activeTexture(33984+c),h.bindTexture(3553,b.__webglTexture)}function e(a,c){const b=i.get(a);if(a.version>0&&b.__version!==a.version){K(b,a,c);return}h.activeTexture(33984+c),h.bindTexture(34067,b.__webglTexture)}const F={[bB]:10497,[bC]:33071,[bD]:33648},G={[bE]:9728,[bF]:9984,[bG]:9986,[bH]:9729,[bI]:9985,[bJ]:9987};function H(c,b,d){if(d?(f.texParameteri(c,10242,F[b.wrapS]),f.texParameteri(c,10243,F[b.wrapT]),(32879===c||35866===c)&&f.texParameteri(c,32882,F[b.wrapR]),f.texParameteri(c,10240,G[b.magFilter]),f.texParameteri(c,10241,G[b.minFilter])):(f.texParameteri(c,10242,33071),f.texParameteri(c,10243,33071),(32879===c||35866===c)&&f.texParameteri(c,32882,33071),(b.wrapS!==bC||b.wrapT!==bC)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),f.texParameteri(c,10240,z(b.magFilter)),f.texParameteri(c,10241,z(b.minFilter)),b.minFilter!==bE&&b.minFilter!==bH&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),!0===g.has("EXT_texture_filter_anisotropic")){const e=g.get("EXT_texture_filter_anisotropic");(1015!==b.type|| !1!==g.has("OES_texture_float_linear"))&&(!1!==l||1016!==b.type|| !1!==g.has("OES_texture_half_float_linear"))&&(b.anisotropy>1||i.get(b).__currentAnisotropy)&&(f.texParameterf(c,e.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(b.anisotropy,a.getMaxAnisotropy())),i.get(b).__currentAnisotropy=b.anisotropy)}}function I(a,b){void 0===a.__webglInit&&(a.__webglInit=!0,b.addEventListener("dispose",A),a.__webglTexture=f.createTexture(),k.memory.textures++)}function J(i,a,t){var m;let n=3553;a.isDataTexture2DArray&&(n=35866),a.isDataTexture3D&&(n=32879),I(i,a),h.activeTexture(33984+t),h.bindTexture(n,i.__webglTexture),f.pixelStorei(37440,a.flipY),f.pixelStorei(37441,a.premultiplyAlpha),f.pixelStorei(3317,a.unpackAlignment),f.pixelStorei(37443,0);const z=(m=a,!l&&(m.wrapS!==bC||m.wrapT!==bC||m.minFilter!==bE&&m.minFilter!==bH)&& !1===v(a.image)),b=u(a.image,z,!1,o),q=v(b)||l,k=j.convert(a.format);let e=j.convert(a.type),c=y(a.internalFormat,k,e,a.encoding);H(n,a,q);let d;const g=a.mipmaps;if(a.isDepthTexture)c=6402,l?c=1015===a.type?36012:1014===a.type?33190:1020===a.type?35056:33189:1015===a.type&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),1026===a.format&&6402===c&&1012!==a.type&&1014!==a.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),a.type=1012,e=j.convert(a.type)),1027===a.format&&6402===c&&(c=34041,1020!==a.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),a.type=1020,e=j.convert(a.type))),h.texImage2D(3553,0,c,b.width,b.height,0,k,e,null);else if(a.isDataTexture)if(g.length>0&&q){for(let r=0,A=g.length;r<A;r++)d=g[r],h.texImage2D(3553,r,c,d.width,d.height,0,k,e,d.data);a.generateMipmaps=!1,i.__maxMipLevel=g.length-1}else h.texImage2D(3553,0,c,b.width,b.height,0,k,e,b.data),i.__maxMipLevel=0;else if(a.isCompressedTexture){for(let p=0,B=g.length;p<B;p++)d=g[p],1023!==a.format&&a.format!==bK?null!==k?h.compressedTexImage2D(3553,p,c,d.width,d.height,0,d.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):h.texImage2D(3553,p,c,d.width,d.height,0,k,e,d.data);i.__maxMipLevel=g.length-1}else if(a.isDataTexture2DArray)h.texImage3D(35866,0,c,b.width,b.height,b.depth,0,k,e,b.data),i.__maxMipLevel=0;else if(a.isDataTexture3D)h.texImage3D(32879,0,c,b.width,b.height,b.depth,0,k,e,b.data),i.__maxMipLevel=0;else if(g.length>0&&q){for(let s=0,C=g.length;s<C;s++)d=g[s],h.texImage2D(3553,s,c,k,e,d);a.generateMipmaps=!1,i.__maxMipLevel=g.length-1}else h.texImage2D(3553,0,c,k,e,b),i.__maxMipLevel=0;w(a,q)&&x(n,a,b.width,b.height),i.__version=a.version,a.onUpdate&&a.onUpdate(a)}function K(o,a,D){if(6!==a.image.length)return;I(o,a),h.activeTexture(33984+D),h.bindTexture(34067,o.__webglTexture),f.pixelStorei(37440,a.flipY),f.pixelStorei(37441,a.premultiplyAlpha),f.pixelStorei(3317,a.unpackAlignment),f.pixelStorei(37443,0);const B=a&&(a.isCompressedTexture||a.image[0].isCompressedTexture),t=a.image[0]&&a.image[0].isDataTexture,d=[];for(let e=0;e<6;e++)B||t?d[e]=t?a.image[e].image:a.image[e]:d[e]=u(a.image[e],!1,!0,n);const z=d[0],C=v(z)||l,g=j.convert(a.format),i=j.convert(a.type),k=y(a.internalFormat,g,i,a.encoding);H(34067,a,C);let c;if(B){for(let p=0;p<6;p++){c=d[p].mipmaps;for(let q=0;q<c.length;q++){const m=c[q];1023!==a.format&&a.format!==bK?null!==g?h.compressedTexImage2D(34069+p,q,k,m.width,m.height,0,m.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):h.texImage2D(34069+p,q,k,m.width,m.height,0,g,i,m.data)}}o.__maxMipLevel=c.length-1}else{c=a.mipmaps;for(let b=0;b<6;b++)if(t){h.texImage2D(34069+b,0,k,d[b].width,d[b].height,0,g,i,d[b].data);for(let r=0;r<c.length;r++){const E=c[r],A=E.image[b].image;h.texImage2D(34069+b,r+1,k,A.width,A.height,0,g,i,A.data)}}else{h.texImage2D(34069+b,0,k,g,i,d[b]);for(let s=0;s<c.length;s++){const F=c[s];h.texImage2D(34069+b,s+1,k,g,i,F.image[b])}}o.__maxMipLevel=c.length}w(a,C)&&x(34067,a,z.width,z.height),o.__version=a.version,a.onUpdate&&a.onUpdate(a)}function L(k,a,b,l,c){const d=j.convert(b.format),e=j.convert(b.type),g=y(b.internalFormat,d,e,b.encoding);32879===c||35866===c?h.texImage3D(c,0,g,a.width,a.height,a.depth,0,d,e,null):h.texImage2D(c,0,g,a.width,a.height,0,d,e,null),h.bindFramebuffer(36160,k),f.framebufferTexture2D(36160,l,c,i.get(b).__webglTexture,0),h.bindFramebuffer(36160,null)}function M(e,a,g){if(f.bindRenderbuffer(36161,e),a.depthBuffer&&!a.stencilBuffer){let b=33189;if(g){const c=a.depthTexture;c&&c.isDepthTexture&&(1015===c.type?b=36012:1014===c.type&&(b=33190));const i=N(a);f.renderbufferStorageMultisample(36161,i,b,a.width,a.height)}else f.renderbufferStorage(36161,b,a.width,a.height);f.framebufferRenderbuffer(36160,36096,36161,e)}else if(a.depthBuffer&&a.stencilBuffer){if(g){const k=N(a);f.renderbufferStorageMultisample(36161,k,35056,a.width,a.height)}else f.renderbufferStorage(36161,34041,a.width,a.height);f.framebufferRenderbuffer(36160,33306,36161,e)}else{const d=!0===a.isWebGLMultipleRenderTargets?a.texture[0]:a.texture,l=j.convert(d.format),m=j.convert(d.type),h=y(d.internalFormat,l,m,d.encoding);if(g){const n=N(a);f.renderbufferStorageMultisample(36161,n,h,a.width,a.height)}else f.renderbufferStorage(36161,h,a.width,a.height)}f.bindRenderbuffer(36161,null)}function N(a){return l&&a.isWebGLMultisampleRenderTarget?Math.min(p,a.samples):0}function O(a){const b=k.render.frame;q.get(a)!==b&&(q.set(a,b),a.update())}let P=!1,Q=!1;this.allocateTextureUnit=function(){const a=E;return a>=m&&console.warn("THREE.WebGLTextures: Trying to use "+a+" texture units while this GPU supports only "+m),E+=1,a},this.resetTextureUnits=c,this.setTexture2D=d,this.setTexture2DArray=function(a,c){const b=i.get(a);if(a.version>0&&b.__version!==a.version){J(b,a,c);return}h.activeTexture(33984+c),h.bindTexture(35866,b.__webglTexture)},this.setTexture3D=function(a,c){const b=i.get(a);if(a.version>0&&b.__version!==a.version){J(b,a,c);return}h.activeTexture(33984+c),h.bindTexture(32879,b.__webglTexture)},this.setTextureCube=e,this.setupRenderTarget=function(b){const c=b.texture,e=i.get(b),o=i.get(c);b.addEventListener("dispose",B),!0!==b.isWebGLMultipleRenderTargets&&(o.__webglTexture=f.createTexture(),o.__version=c.version,k.memory.textures++);const t=!0===b.isWebGLCubeRenderTarget,u=!0===b.isWebGLMultipleRenderTargets,D=!0===b.isWebGLMultisampleRenderTarget,E=c.isDataTexture3D||c.isDataTexture2DArray,g=v(b)||l;if(l&&c.format===bK&&(1015===c.type||1016===c.type)&&(c.format=1023,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),t){e.__webglFramebuffer=[];for(let r=0;r<6;r++)e.__webglFramebuffer[r]=f.createFramebuffer()}else if(e.__webglFramebuffer=f.createFramebuffer(),u)if(a.drawBuffers){const z=b.texture;for(let s=0,F=z.length;s<F;s++){const A=i.get(z[s]);void 0===A.__webglTexture&&(A.__webglTexture=f.createTexture(),k.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");else if(D)if(l){e.__webglMultisampledFramebuffer=f.createFramebuffer(),e.__webglColorRenderbuffer=f.createRenderbuffer(),f.bindRenderbuffer(36161,e.__webglColorRenderbuffer);const G=j.convert(c.format),I=j.convert(c.type),J=y(c.internalFormat,G,I,c.encoding),K=N(b);f.renderbufferStorageMultisample(36161,K,J,b.width,b.height),h.bindFramebuffer(36160,e.__webglMultisampledFramebuffer),f.framebufferRenderbuffer(36160,36064,36161,e.__webglColorRenderbuffer),f.bindRenderbuffer(36161,null),b.depthBuffer&&(e.__webglDepthRenderbuffer=f.createRenderbuffer(),M(e.__webglDepthRenderbuffer,b,!0)),h.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(t){h.bindTexture(34067,o.__webglTexture),H(34067,c,g);for(let p=0;p<6;p++)L(e.__webglFramebuffer[p],b,c,36064,34069+p);w(c,g)&&x(34067,c,b.width,b.height),h.unbindTexture()}else if(u){const C=b.texture;for(let q=0,O=C.length;q<O;q++){const m=C[q],P=i.get(m);h.bindTexture(3553,P.__webglTexture),H(3553,m,g),L(e.__webglFramebuffer,b,m,36064+q,3553),w(m,g)&&x(3553,m,b.width,b.height)}h.unbindTexture()}else{let n=3553;if(E)if(l){const Q=c.isDataTexture3D;n=Q?32879:35866}else console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.");h.bindTexture(n,o.__webglTexture),H(n,c,g),L(e.__webglFramebuffer,b,c,36064,n),w(c,g)&&x(n,c,b.width,b.height,b.depth),h.unbindTexture()}b.depthBuffer&&function(b){const a=i.get(b),e=!0===b.isWebGLCubeRenderTarget;if(b.depthTexture){if(e)throw new Error("target.depthTexture not supported in Cube render targets");!function(c,a){const e=a&&a.isWebGLCubeRenderTarget;if(e)throw new Error("Depth Texture with cube render targets is not supported");if(h.bindFramebuffer(36160,c),!(a.depthTexture&&a.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");i.get(a.depthTexture).__webglTexture&&a.depthTexture.image.width===a.width&&a.depthTexture.image.height===a.height||(a.depthTexture.image.width=a.width,a.depthTexture.image.height=a.height,a.depthTexture.needsUpdate=!0),d(a.depthTexture,0);const b=i.get(a.depthTexture).__webglTexture;if(1026===a.depthTexture.format)f.framebufferTexture2D(36160,36096,3553,b,0);else if(1027===a.depthTexture.format)f.framebufferTexture2D(36160,33306,3553,b,0);else throw new Error("Unknown depthTexture format")}(a.__webglFramebuffer,b)}else if(e){a.__webglDepthbuffer=[];for(let c=0;c<6;c++)h.bindFramebuffer(36160,a.__webglFramebuffer[c]),a.__webglDepthbuffer[c]=f.createRenderbuffer(),M(a.__webglDepthbuffer[c],b,!1)}else h.bindFramebuffer(36160,a.__webglFramebuffer),a.__webglDepthbuffer=f.createRenderbuffer(),M(a.__webglDepthbuffer,b,!1);h.bindFramebuffer(36160,null)}(b)},this.updateRenderTargetMipmap=function(a){const f=v(a)||l,d=!0===a.isWebGLMultipleRenderTargets?a.texture:[a.texture];for(let b=0,g=d.length;b<g;b++){const c=d[b];if(w(c,f)){const e=a.isWebGLCubeRenderTarget?34067:3553,j=i.get(c).__webglTexture;h.bindTexture(e,j),x(e,c,a.width,a.height),h.unbindTexture()}}},this.updateMultisampleRenderTarget=function(a){if(a.isWebGLMultisampleRenderTarget)if(l){const d=a.width,e=a.height;let b=16384;a.depthBuffer&&(b|=256),a.stencilBuffer&&(b|=1024);const c=i.get(a);h.bindFramebuffer(36008,c.__webglMultisampledFramebuffer),h.bindFramebuffer(36009,c.__webglFramebuffer),f.blitFramebuffer(0,0,d,e,0,0,d,e,b,9728),h.bindFramebuffer(36008,null),h.bindFramebuffer(36009,c.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.safeSetTexture2D=function(a,b){a&&a.isWebGLRenderTarget&&(!1===P&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),P=!0),a=a.texture),d(a,b)},this.safeSetTextureCube=function(a,b){a&&a.isWebGLCubeRenderTarget&&(!1===Q&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),Q=!0),a=a.texture),e(a,b)}}function fs(b,c,a){const d=a.isWebGL2;return{convert:function(a){let b;if(1009===a)return 5121;if(1017===a)return 32819;if(1018===a)return 32820;if(1019===a)return 33635;if(1010===a)return 5120;if(1011===a)return 5122;if(1012===a)return 5123;if(1013===a)return 5124;if(1014===a)return 5125;if(1015===a)return 5126;if(1016===a)return d?5131:null!==(b=c.get("OES_texture_half_float"))?b.HALF_FLOAT_OES:null;if(1021===a)return 6406;if(a===bK)return 6407;if(1023===a)return 6408;if(1024===a)return 6409;if(1025===a)return 6410;if(1026===a)return 6402;if(1027===a)return 34041;if(1028===a)return 6403;if(1029===a)return 36244;if(1030===a)return 33319;if(1031===a)return 33320;if(1032===a)return 36248;if(1033===a)return 36249;if(33776===a||33777===a||33778===a||33779===a){if(null===(b=c.get("WEBGL_compressed_texture_s3tc")))return null;if(33776===a)return b.COMPRESSED_RGB_S3TC_DXT1_EXT;if(33777===a)return b.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(33778===a)return b.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(33779===a)return b.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(35840===a||35841===a||35842===a||35843===a){if(null===(b=c.get("WEBGL_compressed_texture_pvrtc")))return null;if(35840===a)return b.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===a)return b.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===a)return b.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===a)return b.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===a)return null!==(b=c.get("WEBGL_compressed_texture_etc1"))?b.COMPRESSED_RGB_ETC1_WEBGL:null;if((37492===a||37496===a)&&null!==(b=c.get("WEBGL_compressed_texture_etc"))){if(37492===a)return b.COMPRESSED_RGB8_ETC2;if(37496===a)return b.COMPRESSED_RGBA8_ETC2_EAC}return 37808===a||37809===a||37810===a||37811===a||37812===a||37813===a||37814===a||37815===a||37816===a||37817===a||37818===a||37819===a||37820===a||37821===a||37840===a||37841===a||37842===a||37843===a||37844===a||37845===a||37846===a||37847===a||37848===a||37849===a||37850===a||37851===a||37852===a||37853===a?null!==(b=c.get("WEBGL_compressed_texture_astc"))?a:null:36492===a?null!==(b=c.get("EXT_texture_compression_bptc"))?a:null:1020===a?d?34042:null!==(b=c.get("WEBGL_depth_texture"))?b.UNSIGNED_INT_24_8_WEBGL:null:void 0}}}aU.prototype.isMeshDistanceMaterial=!0;class aW extends P{constructor(a=[]){super(),this.cameras=a}}aW.prototype.isArrayCamera=!0;class aX extends i{constructor(){super(),this.type="Group"}}aX.prototype.isGroup=!0;const ft={type:"move"};class fu{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new aX,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new aX,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new a,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new a),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new aX,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new a,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new a),this._grip}dispatchEvent(a){return null!==this._targetRay&&this._targetRay.dispatchEvent(a),null!==this._grip&&this._grip.dispatchEvent(a),null!==this._hand&&this._hand.dispatchEvent(a),this}disconnect(a){return this.dispatchEvent({type:"disconnected",data:a}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(d,h,l){let e=null,f=null,m=null;const a=this._targetRay,b=this._grip,c=this._hand;if(d&&"visible-blurred"!==h.session.visibilityState)if(null!==a&&null!==(e=h.getPose(d.targetRaySpace,l))&&(a.matrix.fromArray(e.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),e.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(e.linearVelocity)):a.hasLinearVelocity=!1,e.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(e.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(ft)),c&&d.hand){for(const i of(m=!0,d.hand.values())){const j=h.getJointPose(i,l);if(void 0===c.joints[i.jointName]){const k=new aX;k.matrixAutoUpdate=!1,k.visible=!1,c.joints[i.jointName]=k,c.add(k)}const g=c.joints[i.jointName];null!==j&&(g.matrix.fromArray(j.transform.matrix),g.matrix.decompose(g.position,g.rotation,g.scale),g.jointRadius=j.radius),g.visible=null!==j}const q=c.joints["index-finger-tip"],r=c.joints["thumb-tip"],n=q.position.distanceTo(r.position),o=.02,p=.005;c.inputState.pinching&&n>o+p?(c.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:d.handedness,target:this})):!c.inputState.pinching&&n<=o-p&&(c.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:d.handedness,target:this}))}else null!==b&&d.gripSpace&&null!==(f=h.getPose(d.gripSpace,l))&&(b.matrix.fromArray(f.transform.matrix),b.matrix.decompose(b.position,b.rotation,b.scale),f.linearVelocity?(b.hasLinearVelocity=!0,b.linearVelocity.copy(f.linearVelocity)):b.hasLinearVelocity=!1,f.angularVelocity?(b.hasAngularVelocity=!0,b.angularVelocity.copy(f.angularVelocity)):b.hasAngularVelocity=!1);return null!==a&&(a.visible=null!==e),null!==b&&(b.visible=null!==f),null!==c&&(c.visible=null!==m),this}}class fv extends y{constructor(e,g){super();const h=this,i=e.state;let j=null,k=1,l=null,m="local-floor",n=null,o=null,p=null,q=null,r=null,s=!1,t=null,u=null,v=null,w=null,x=null,y=null;const z=[],A=new Map,b=new P;b.layers.enable(1),b.viewport=new D;const c=new P;c.layers.enable(2),c.viewport=new D;const B=[b,c],d=new aW;d.layers.enable(1),d.layers.enable(2);let C=null,E=null;function F(a){const b=A.get(a.inputSource);b&&b.dispatchEvent({type:a.type,data:a.inputSource})}function G(){A.forEach(function(a,b){a.disconnect(b)}),A.clear(),C=null,E=null,i.bindXRFramebuffer(null),e.setRenderTarget(e.getRenderTarget()),p&&g.deleteFramebuffer(p),t&&g.deleteFramebuffer(t),u&&g.deleteRenderbuffer(u),v&&g.deleteRenderbuffer(v),p=null,t=null,u=null,v=null,r=null,q=null,o=null,j=null,f.stop(),h.isPresenting=!1,h.dispatchEvent({type:"sessionend"})}function H(a){const i=j.inputSources;for(let b=0;b<z.length;b++)A.set(i[b],z[b]);for(let c=0;c<a.removed.length;c++){const d=a.removed[c],f=A.get(d);f&&(f.dispatchEvent({type:"disconnected",data:d}),A.delete(d))}for(let e=0;e<a.added.length;e++){const g=a.added[e],h=A.get(g);h&&h.dispatchEvent({type:"connected",data:g})}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(b){let a=z[b];return void 0===a&&(a=new fu,z[b]=a),a.getTargetRaySpace()},this.getControllerGrip=function(b){let a=z[b];return void 0===a&&(a=new fu,z[b]=a),a.getGripSpace()},this.getHand=function(b){let a=z[b];return void 0===a&&(a=new fu,z[b]=a),a.getHandSpace()},this.setFramebufferScaleFactor=function(a){k=a,!0===h.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(a){m=a,!0===h.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return l},this.getBaseLayer=function(){return null!==q?q:r},this.getBinding=function(){return o},this.getFrame=function(){return w},this.getSession=function(){return j},this.setSession=async function(c){if(null!==(j=c)){j.addEventListener("select",F),j.addEventListener("selectstart",F),j.addEventListener("selectend",F),j.addEventListener("squeeze",F),j.addEventListener("squeezestart",F),j.addEventListener("squeezeend",F),j.addEventListener("end",G),j.addEventListener("inputsourceschange",H);const a=g.getContextAttributes();if(!0!==a.xrCompatible&&await g.makeXRCompatible(),void 0===j.renderState.layers){const d={antialias:a.antialias,alpha:a.alpha,depth:a.depth,stencil:a.stencil,framebufferScaleFactor:k};r=new XRWebGLLayer(j,g,d),j.updateRenderState({baseLayer:r})}else if(g instanceof WebGLRenderingContext){const e={antialias:!0,alpha:a.alpha,depth:a.depth,stencil:a.stencil,framebufferScaleFactor:k};r=new XRWebGLLayer(j,g,e),j.updateRenderState({layers:[r]})}else{s=a.antialias;let b=null;a.depth&&(y=256,a.stencil&&(y|=1024),x=a.stencil?33306:36096,b=a.stencil?35056:33190);const n={colorFormat:a.alpha?32856:32849,depthFormat:b,scaleFactor:k};q=(o=new XRWebGLBinding(j,g)).createProjectionLayer(n),p=g.createFramebuffer(),j.updateRenderState({layers:[q]}),s&&(t=g.createFramebuffer(),u=g.createRenderbuffer(),g.bindRenderbuffer(36161,u),g.renderbufferStorageMultisample(36161,4,32856,q.textureWidth,q.textureHeight),i.bindFramebuffer(36160,t),g.framebufferRenderbuffer(36160,36064,36161,u),g.bindRenderbuffer(36161,null),null!==b&&(v=g.createRenderbuffer(),g.bindRenderbuffer(36161,v),g.renderbufferStorageMultisample(36161,4,b,q.textureWidth,q.textureHeight),g.framebufferRenderbuffer(36160,x,36161,v),g.bindRenderbuffer(36161,null)),i.bindFramebuffer(36160,null))}l=await j.requestReferenceSpace(m),f.setContext(j),f.start(),h.isPresenting=!0,h.dispatchEvent({type:"sessionstart"})}};const I=new a,J=new a;function K(a,b){null===b?a.matrixWorld.copy(a.matrix):a.matrixWorld.multiplyMatrices(b.matrixWorld,a.matrix),a.matrixWorldInverse.copy(a.matrixWorld).invert()}this.updateCamera=function(a){if(null===j)return;d.near=c.near=b.near=a.near,d.far=c.far=b.far=a.far,(C!==d.near||E!==d.far)&&(j.updateRenderState({depthNear:d.near,depthFar:d.far}),C=d.near,E=d.far);const h=a.parent,e=d.cameras;K(d,h);for(let f=0;f<e.length;f++)K(e[f],h);d.matrixWorld.decompose(d.position,d.quaternion,d.scale),a.position.copy(d.position),a.quaternion.copy(d.quaternion),a.scale.copy(d.scale),a.matrix.copy(d.matrix),a.matrixWorld.copy(d.matrixWorld);const i=a.children;for(let g=0,k=i.length;g<k;g++)i[g].updateMatrixWorld(!0);2===e.length?function(a,d,k){I.setFromMatrixPosition(d.matrixWorld),J.setFromMatrixPosition(k.matrixWorld);const l=I.distanceTo(J),b=d.projectionMatrix.elements,m=k.projectionMatrix.elements,e=b[14]/(b[10]-1),f=b[14]/(b[10]+1),o=(b[9]+1)/b[5],p=(b[9]-1)/b[5],g=(b[8]-1)/b[0],n=(m[8]+1)/m[0],c=l/(-g+n),h=-(c*g);d.matrixWorld.decompose(a.position,a.quaternion,a.scale),a.translateX(h),a.translateZ(c),a.matrixWorld.compose(a.position,a.quaternion,a.scale),a.matrixWorldInverse.copy(a.matrixWorld).invert();const i=e+c,j=f+c;a.projectionMatrix.makePerspective(e*g-h,e*n+(l-h),o*f/j*i,p*f/j*i,i,j)}(d,b,c):d.projectionMatrix.copy(b.projectionMatrix)},this.getCamera=function(){return d},this.getFoveation=function(){return null!==q?q.fixedFoveation:null!==r?r.fixedFoveation:void 0},this.setFoveation=function(a){null!==q&&(q.fixedFoveation=a),null!==r&& void 0!==r.fixedFoveation&&(r.fixedFoveation=a)};let L=null;const f=new dz;f.setAnimationLoop(function(C,e){if(n=e.getViewerPose(l),w=e,null!==n){const m=n.views;null!==r&&i.bindXRFramebuffer(r.framebuffer);let u=!1;m.length!==d.cameras.length&&(d.cameras.length=0,u=!0);for(let b=0;b<m.length;b++){const f=m[b];let a=null;if(null!==r)a=r.getViewport(f);else{const h=o.getViewSubImage(q,f);i.bindXRFramebuffer(p),void 0!==h.depthStencilTexture&&g.framebufferTexture2D(36160,x,3553,h.depthStencilTexture,0),g.framebufferTexture2D(36160,36064,3553,h.colorTexture,0),a=h.viewport}const c=B[b];c.matrix.fromArray(f.transform.matrix),c.projectionMatrix.fromArray(f.projectionMatrix),c.viewport.set(a.x,a.y,a.width,a.height),0===b&&d.matrix.copy(c.matrix),!0===u&&d.cameras.push(c)}s&&(i.bindXRFramebuffer(t),null!==y&&g.clear(y))}const D=j.inputSources;for(let k=0;k<z.length;k++){const E=z[k],F=D[k];E.update(F,e,l)}if(L&&L(C,e),s){const v=q.textureWidth,A=q.textureHeight;i.bindFramebuffer(36008,t),i.bindFramebuffer(36009,p),g.invalidateFramebuffer(36008,[x]),g.invalidateFramebuffer(36009,[x]),g.blitFramebuffer(0,0,v,A,0,0,v,A,16384,9728),g.invalidateFramebuffer(36008,[36064]),i.bindFramebuffer(36008,null),i.bindFramebuffer(36009,null),i.bindFramebuffer(36160,t)}w=null}),this.setAnimationLoop=function(a){L=a},this.dispose=function(){}}}function fw(a){function b(d,b){d.opacity.value=b.opacity,b.color&&d.diffuse.value.copy(b.color),b.emissive&&d.emissive.value.copy(b.emissive).multiplyScalar(b.emissiveIntensity),b.map&&(d.map.value=b.map),b.alphaMap&&(d.alphaMap.value=b.alphaMap),b.specularMap&&(d.specularMap.value=b.specularMap),b.alphaTest>0&&(d.alphaTest.value=b.alphaTest);const f=a.get(b).envMap;if(f){d.envMap.value=f,d.flipEnvMap.value=f.isCubeTexture&& !1===f.isRenderTargetTexture?-1:1,d.reflectivity.value=b.reflectivity,d.ior.value=b.ior,d.refractionRatio.value=b.refractionRatio;const g=a.get(f).__maxMipLevel;void 0!==g&&(d.maxMipLevel.value=g)}b.lightMap&&(d.lightMap.value=b.lightMap,d.lightMapIntensity.value=b.lightMapIntensity),b.aoMap&&(d.aoMap.value=b.aoMap,d.aoMapIntensity.value=b.aoMapIntensity);let c;b.map?c=b.map:b.specularMap?c=b.specularMap:b.displacementMap?c=b.displacementMap:b.normalMap?c=b.normalMap:b.bumpMap?c=b.bumpMap:b.roughnessMap?c=b.roughnessMap:b.metalnessMap?c=b.metalnessMap:b.alphaMap?c=b.alphaMap:b.emissiveMap?c=b.emissiveMap:b.clearcoatMap?c=b.clearcoatMap:b.clearcoatNormalMap?c=b.clearcoatNormalMap:b.clearcoatRoughnessMap?c=b.clearcoatRoughnessMap:b.specularIntensityMap?c=b.specularIntensityMap:b.specularColorMap?c=b.specularColorMap:b.transmissionMap?c=b.transmissionMap:b.thicknessMap?c=b.thicknessMap:b.sheenColorMap?c=b.sheenColorMap:b.sheenRoughnessMap&&(c=b.sheenRoughnessMap),void 0!==c&&(c.isWebGLRenderTarget&&(c=c.texture),!0===c.matrixAutoUpdate&&c.updateMatrix(),d.uvTransform.value.copy(c.matrix));let e;b.aoMap?e=b.aoMap:b.lightMap&&(e=b.lightMap),void 0!==e&&(e.isWebGLRenderTarget&&(e=e.texture),!0===e.matrixAutoUpdate&&e.updateMatrix(),d.uv2Transform.value.copy(e.matrix))}function c(c,b){c.roughness.value=b.roughness,c.metalness.value=b.metalness,b.roughnessMap&&(c.roughnessMap.value=b.roughnessMap),b.metalnessMap&&(c.metalnessMap.value=b.metalnessMap),b.emissiveMap&&(c.emissiveMap.value=b.emissiveMap),b.bumpMap&&(c.bumpMap.value=b.bumpMap,c.bumpScale.value=b.bumpScale,b.side===bz&&(c.bumpScale.value*=-1)),b.normalMap&&(c.normalMap.value=b.normalMap,c.normalScale.value.copy(b.normalScale),b.side===bz&&c.normalScale.value.negate()),b.displacementMap&&(c.displacementMap.value=b.displacementMap,c.displacementScale.value=b.displacementScale,c.displacementBias.value=b.displacementBias);const d=a.get(b).envMap;d&&(c.envMapIntensity.value=b.envMapIntensity)}return{refreshFogUniforms:function(b,a){b.fogColor.value.copy(a.color),a.isFog?(b.fogNear.value=a.near,b.fogFar.value=a.far):a.isFogExp2&&(b.fogDensity.value=a.density)},refreshMaterialUniforms:function(f,a,H,I,J){var D,E,m,h,l,g,e,d,x,o,i,y,z,s,t,p,n,B,C,A,w,q,j,F,G,r,k;let u,v;a.isMeshBasicMaterial?b(f,a):a.isMeshLambertMaterial?(b(f,a),D=f,(E=a).emissiveMap&&(D.emissiveMap.value=E.emissiveMap)):a.isMeshToonMaterial?(b(f,a),m=f,(h=a).gradientMap&&(m.gradientMap.value=h.gradientMap),h.emissiveMap&&(m.emissiveMap.value=h.emissiveMap),h.bumpMap&&(m.bumpMap.value=h.bumpMap,m.bumpScale.value=h.bumpScale,h.side===bz&&(m.bumpScale.value*=-1)),h.normalMap&&(m.normalMap.value=h.normalMap,m.normalScale.value.copy(h.normalScale),h.side===bz&&m.normalScale.value.negate()),h.displacementMap&&(m.displacementMap.value=h.displacementMap,m.displacementScale.value=h.displacementScale,m.displacementBias.value=h.displacementBias)):a.isMeshPhongMaterial?(b(f,a),l=f,g=a,l.specular.value.copy(g.specular),l.shininess.value=Math.max(g.shininess,1e-4),g.emissiveMap&&(l.emissiveMap.value=g.emissiveMap),g.bumpMap&&(l.bumpMap.value=g.bumpMap,l.bumpScale.value=g.bumpScale,g.side===bz&&(l.bumpScale.value*=-1)),g.normalMap&&(l.normalMap.value=g.normalMap,l.normalScale.value.copy(g.normalScale),g.side===bz&&l.normalScale.value.negate()),g.displacementMap&&(l.displacementMap.value=g.displacementMap,l.displacementScale.value=g.displacementScale,l.displacementBias.value=g.displacementBias)):a.isMeshStandardMaterial?(b(f,a),a.isMeshPhysicalMaterial?(e=f,d=a,x=J,c(e,d),e.ior.value=d.ior,d.sheen>0&&(e.sheenColor.value.copy(d.sheenColor).multiplyScalar(d.sheen),e.sheenRoughness.value=d.sheenRoughness,d.sheenColorMap&&(e.sheenColorMap.value=d.sheenColorMap),d.sheenRoughnessMap&&(e.sheenRoughnessMap.value=d.sheenRoughnessMap)),d.clearcoat>0&&(e.clearcoat.value=d.clearcoat,e.clearcoatRoughness.value=d.clearcoatRoughness,d.clearcoatMap&&(e.clearcoatMap.value=d.clearcoatMap),d.clearcoatRoughnessMap&&(e.clearcoatRoughnessMap.value=d.clearcoatRoughnessMap),d.clearcoatNormalMap&&(e.clearcoatNormalScale.value.copy(d.clearcoatNormalScale),e.clearcoatNormalMap.value=d.clearcoatNormalMap,d.side===bz&&e.clearcoatNormalScale.value.negate())),d.transmission>0&&(e.transmission.value=d.transmission,e.transmissionSamplerMap.value=x.texture,e.transmissionSamplerSize.value.set(x.width,x.height),d.transmissionMap&&(e.transmissionMap.value=d.transmissionMap),e.thickness.value=d.thickness,d.thicknessMap&&(e.thicknessMap.value=d.thicknessMap),e.attenuationDistance.value=d.attenuationDistance,e.attenuationColor.value.copy(d.attenuationColor)),e.specularIntensity.value=d.specularIntensity,e.specularColor.value.copy(d.specularColor),d.specularIntensityMap&&(e.specularIntensityMap.value=d.specularIntensityMap),d.specularColorMap&&(e.specularColorMap.value=d.specularColorMap)):c(f,a)):a.isMeshMatcapMaterial?(b(f,a),o=f,(i=a).matcap&&(o.matcap.value=i.matcap),i.bumpMap&&(o.bumpMap.value=i.bumpMap,o.bumpScale.value=i.bumpScale,i.side===bz&&(o.bumpScale.value*=-1)),i.normalMap&&(o.normalMap.value=i.normalMap,o.normalScale.value.copy(i.normalScale),i.side===bz&&o.normalScale.value.negate()),i.displacementMap&&(o.displacementMap.value=i.displacementMap,o.displacementScale.value=i.displacementScale,o.displacementBias.value=i.displacementBias)):a.isMeshDepthMaterial?(b(f,a),y=f,(z=a).displacementMap&&(y.displacementMap.value=z.displacementMap,y.displacementScale.value=z.displacementScale,y.displacementBias.value=z.displacementBias)):a.isMeshDistanceMaterial?(b(f,a),s=f,(t=a).displacementMap&&(s.displacementMap.value=t.displacementMap,s.displacementScale.value=t.displacementScale,s.displacementBias.value=t.displacementBias),s.referencePosition.value.copy(t.referencePosition),s.nearDistance.value=t.nearDistance,s.farDistance.value=t.farDistance):a.isMeshNormalMaterial?(b(f,a),p=f,(n=a).bumpMap&&(p.bumpMap.value=n.bumpMap,p.bumpScale.value=n.bumpScale,n.side===bz&&(p.bumpScale.value*=-1)),n.normalMap&&(p.normalMap.value=n.normalMap,p.normalScale.value.copy(n.normalScale),n.side===bz&&p.normalScale.value.negate()),n.displacementMap&&(p.displacementMap.value=n.displacementMap,p.displacementScale.value=n.displacementScale,p.displacementBias.value=n.displacementBias)):a.isLineBasicMaterial?(B=f,C=a,B.diffuse.value.copy(C.color),B.opacity.value=C.opacity,a.isLineDashedMaterial&&(A=f,w=a,A.dashSize.value=w.dashSize,A.totalSize.value=w.dashSize+w.gapSize,A.scale.value=w.scale)):a.isPointsMaterial?(q=f,j=a,F=H,G=I,q.diffuse.value.copy(j.color),q.opacity.value=j.opacity,q.size.value=j.size*F,q.scale.value=.5*G,j.map&&(q.map.value=j.map),j.alphaMap&&(q.alphaMap.value=j.alphaMap),j.alphaTest>0&&(q.alphaTest.value=j.alphaTest),j.map?u=j.map:j.alphaMap&&(u=j.alphaMap),void 0!==u&&(!0===u.matrixAutoUpdate&&u.updateMatrix(),q.uvTransform.value.copy(u.matrix))):a.isSpriteMaterial?(r=f,k=a,r.diffuse.value.copy(k.color),r.opacity.value=k.opacity,r.rotation.value=k.rotation,k.map&&(r.map.value=k.map),k.alphaMap&&(r.alphaMap.value=k.alphaMap),k.alphaTest>0&&(r.alphaTest.value=k.alphaTest),k.map?v=k.map:k.alphaMap&&(v=k.alphaMap),void 0!==v&&(!0===v.matrixAutoUpdate&&v.updateMatrix(),r.uvTransform.value.copy(v.matrix))):a.isShadowMaterial?(f.color.value.copy(a.color),f.opacity.value=a.opacity):a.isShaderMaterial&&(a.uniformsNeedUpdate=!1)}}}function e(b={}){const e=void 0!==b.canvas?b.canvas:function(){const a=bT("canvas");return a.style.display="block",a}(),n=void 0!==b.context?b.context:null,o=void 0!==b.alpha&&b.alpha,p=void 0===b.depth||b.depth,q=void 0===b.stencil||b.stencil,r=void 0!==b.antialias&&b.antialias,s=void 0===b.premultipliedAlpha||b.premultipliedAlpha,t=void 0!==b.preserveDrawingBuffer&&b.preserveDrawingBuffer,u=void 0!==b.powerPreference?b.powerPreference:"default",v=void 0!==b.failIfMajorPerformanceCaveat&&b.failIfMajorPerformanceCaveat;let A=null,B=null;const C=[],E=[];this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=3e3,this.physicallyCorrectLights=!1,this.toneMapping=0,this.toneMappingExposure=1;const h=this;let F=!1,G=0,H=0,I=null,K=-1,M=null;const N=new D,O=new D;let P=null,i=e.width,j=e.height,Q=1,R=null,S=null;const T=new D(0,0,i,j),U=new D(0,0,i,j);let V=!1;const W=[],X=new aO;let Y=!1,Z=!1,$=null;const _=new c,aa=new a,ab={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function ac(){return null===I?Q:1}let d=n;function k(b,d){for(let a=0;a<b.length;a++){const f=b[a],c=e.getContext(f,d);if(null!==c)return c}return null}try{const w={alpha:o,depth:p,stencil:q,antialias:r,premultipliedAlpha:s,preserveDrawingBuffer:t,powerPreference:u,failIfMajorPerformanceCaveat:v};if(e.addEventListener("webglcontextlost",aA,!1),e.addEventListener("webglcontextrestored",aB,!1),null===d){const f=["webgl2","webgl","experimental-webgl"];if(!0===h.isWebGL1Renderer&&f.shift(),d=k(f,w),null===d){if(k(f))throw new Error("Error creating WebGL context with your selected attributes.");throw new Error("Error creating WebGL context.")}}void 0===d.getShaderPrecisionFormat&&(d.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(l){throw console.error("THREE.WebGLRenderer: "+l.message),l}let ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az;function x(){ad=new d$(d),ae=new dF(d,ad,b),ad.init(ae),ay=new fs(d,ad,ae),af=new fq(d,ad,ae),W[0]=1029,ag=new d1(d),ah=new ff,ai=new fr(d,ad,af,ah,ae,ay,ag),aj=new dH(h),ak=new dZ(h),al=new dA(d,ae),az=new dD(d,ad,al,ae),am=new d_(d,al,ag,az),an=new d6(d,am,al,ag),av=new d5(d,ae,ai),as=new dG(ah),ao=new fe(h,aj,ak,ad,ae,az,as),ap=new fw(ah),aq=new fj(ah),ar=new fp(ad,ae),au=new dC(h,aj,af,an,s),at=new aV(h,an,ae),aw=new dE(d,ad,ag,ae),ax=new d0(d,ad,ag,ae),ag.programs=ao.programs,h.capabilities=ae,h.extensions=ad,h.properties=ah,h.renderLists=aq,h.shadowMap=at,h.state=af,h.info=ag}x();const g=new fv(h,d);function aA(a){a.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),F=!0}function aB(){console.log("THREE.WebGLRenderer: Context Restored."),F=!1;const a=ag.autoReset,b=at.enabled,c=at.autoUpdate,d=at.needsUpdate,e=at.type;x(),ag.autoReset=a,at.enabled=b,at.autoUpdate=c,at.needsUpdate=d,at.type=e}function aC(b){const a=b.target;a.removeEventListener("dispose",aC),aD(a)}function aD(a){aE(a),ah.remove(a)}function aE(b){const a=ah.get(b).programs;void 0!==a&&a.forEach(function(a){ao.releaseProgram(a)})}this.xr=g,this.getContext=function(){return d},this.getContextAttributes=function(){return d.getContextAttributes()},this.forceContextLoss=function(){const a=ad.get("WEBGL_lose_context");a&&a.loseContext()},this.forceContextRestore=function(){const a=ad.get("WEBGL_lose_context");a&&a.restoreContext()},this.getPixelRatio=function(){return Q},this.setPixelRatio=function(a){void 0!==a&&(Q=a,this.setSize(i,j,!1))},this.getSize=function(a){return a.set(i,j)},this.setSize=function(a,b,c){if(g.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}i=a,j=b,e.width=Math.floor(a*Q),e.height=Math.floor(b*Q),!1!==c&&(e.style.width=a+"px",e.style.height=b+"px"),this.setViewport(0,0,a,b)},this.getDrawingBufferSize=function(a){return a.set(i*Q,j*Q).floor()},this.setDrawingBufferSize=function(a,b,c){i=a,j=b,Q=c,e.width=Math.floor(a*c),e.height=Math.floor(b*c),this.setViewport(0,0,a,b)},this.getCurrentViewport=function(a){return a.copy(N)},this.getViewport=function(a){return a.copy(T)},this.setViewport=function(a,b,c,d){a.isVector4?T.set(a.x,a.y,a.z,a.w):T.set(a,b,c,d),af.viewport(N.copy(T).multiplyScalar(Q).floor())},this.getScissor=function(a){return a.copy(U)},this.setScissor=function(a,b,c,d){a.isVector4?U.set(a.x,a.y,a.z,a.w):U.set(a,b,c,d),af.scissor(O.copy(U).multiplyScalar(Q).floor())},this.getScissorTest=function(){return V},this.setScissorTest=function(a){af.setScissorTest(V=a)},this.setOpaqueSort=function(a){R=a},this.setTransparentSort=function(a){S=a},this.getClearColor=function(a){return a.copy(au.getClearColor())},this.setClearColor=function(){au.setClearColor.apply(au,arguments)},this.getClearAlpha=function(){return au.getClearAlpha()},this.setClearAlpha=function(){au.setClearAlpha.apply(au,arguments)},this.clear=function(b,c,e){let a=0;(void 0===b||b)&&(a|=16384),(void 0===c||c)&&(a|=256),(void 0===e||e)&&(a|=1024),d.clear(a)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",aA,!1),e.removeEventListener("webglcontextrestored",aB,!1),aq.dispose(),ar.dispose(),ah.dispose(),aj.dispose(),ak.dispose(),an.dispose(),az.dispose(),g.dispose(),g.removeEventListener("sessionstart",y),g.removeEventListener("sessionend",z),$&&($.dispose(),$=null),m.stop()},this.renderBufferDirect=function(p,j,c,e,a,g){null===j&&(j=ab);const q=a.isMesh&&0>a.matrixWorld.determinant(),r=aP(p,j,c,e,a);af.setMaterial(e,q);let d=c.index;const k=c.attributes.position;if(null===d){if(void 0===k||0===k.count)return}else if(0===d.count)return;let f=1;!0===e.wireframe&&(d=am.getWireframeAttribute(c),f=2),az.setup(a,e,r,c,d);let m,b=aw;null!==d&&(m=al.get(d),(b=ax).setIndex(m));const s=null!==d?d.count:k.count,n=c.drawRange.start*f,t=c.drawRange.count*f,o=null!==g?g.start*f:0,u=null!==g?g.count*f:1/0,h=Math.max(n,o),i=Math.max(0,Math.min(s,n+t,o+u)-1-h+1);if(0!==i){if(a.isMesh)!0===e.wireframe?(af.setLineWidth(e.wireframeLinewidth*ac()),b.setMode(1)):b.setMode(4);else if(a.isLine){let l=e.linewidth;void 0===l&&(l=1),af.setLineWidth(l*ac()),a.isLineSegments?b.setMode(1):a.isLineLoop?b.setMode(2):b.setMode(3)}else a.isPoints?b.setMode(0):a.isSprite&&b.setMode(4);if(a.isInstancedMesh)b.renderInstances(h,i,a.count);else if(c.isInstancedBufferGeometry){const v=Math.min(c.instanceCount,c._maxInstanceCount);b.renderInstances(h,i,v)}else b.render(h,i)}},this.compile=function(a,b){(B=ar.get(a)).init(),E.push(B),a.traverseVisible(function(a){a.isLight&&a.layers.test(b.layers)&&(B.pushLight(a),a.castShadow&&B.pushShadow(a))}),B.setupLights(h.physicallyCorrectLights),a.traverse(function(c){const b=c.material;if(b)if(Array.isArray(b))for(let d=0;d<b.length;d++){const e=b[d];aM(e,a,c)}else aM(b,a,c)}),E.pop(),B=null};let aF=null;function y(){m.stop()}function z(){m.start()}const m=new dz;function aG(a,d,b,e){if(!1===a.visible)return;const n=a.layers.test(d.layers);if(n){if(a.isGroup)b=a.renderOrder;else if(a.isLOD)!0===a.autoUpdate&&a.update(d);else if(a.isLight)B.pushLight(a),a.castShadow&&B.pushShadow(a);else if(a.isSprite){if(!a.frustumCulled||X.intersectsSprite(a)){e&&aa.setFromMatrixPosition(a.matrixWorld).applyMatrix4(_);const o=an.update(a),j=a.material;j.visible&&A.push(a,o,j,b,aa.z,null)}}else if((a.isMesh||a.isLine||a.isPoints)&&(a.isSkinnedMesh&&a.skeleton.frame!==ag.render.frame&&(a.skeleton.update(),a.skeleton.frame=ag.render.frame),!a.frustumCulled||X.intersectsObject(a))){e&&aa.setFromMatrixPosition(a.matrixWorld).applyMatrix4(_);const f=an.update(a),c=a.material;if(Array.isArray(c)){const k=f.groups;for(let g=0,p=k.length;g<p;g++){const l=k[g],h=c[l.materialIndex];h&&h.visible&&A.push(a,f,h,b,aa.z,l)}}else c.visible&&A.push(a,f,c,b,aa.z,null)}}const m=a.children;for(let i=0,q=m.length;i<q;i++)aG(m[i],d,b,e)}function aH(c,b,a,f){const d=c.opaque,e=c.transmissive,g=c.transparent;B.setupLightsView(a),e.length>0&&aI(d,b,a),f&&af.viewport(N.copy(f)),d.length>0&&aK(d,b,a),e.length>0&&aK(e,b,a),g.length>0&&aK(g,b,a)}function aI(a,b,c){if(null===$){const d=!0===r&& !0===ae.isWebGL2,e=d?aJ:J;$=new e(1024,1024,{generateMipmaps:!0,type:null!==ay.convert(1016)?1016:1009,minFilter:bJ,magFilter:bE,wrapS:bC,wrapT:bC})}const f=h.getRenderTarget();h.setRenderTarget($),h.clear();const g=h.toneMapping;h.toneMapping=0,aK(a,b,c),h.toneMapping=g,ai.updateMultisampleRenderTarget($),ai.updateRenderTargetMipmap($),h.setRenderTarget(f)}function aK(d,b,e){const f=!0===b.isScene?b.overrideMaterial:null;for(let c=0,h=d.length;c<h;c++){const a=d[c],g=a.object,i=a.geometry,j=null===f?a.material:f,k=a.group;g.layers.test(e.layers)&&aL(g,b,e,i,j,k)}}function aL(b,d,c,e,a,f){b.onBeforeRender(h,d,c,e,a,f),b.modelViewMatrix.multiplyMatrices(c.matrixWorldInverse,b.matrixWorld),b.normalMatrix.getNormalMatrix(b.modelViewMatrix),a.onBeforeRender(h,d,c,e,b,f),!0===a.transparent&&a.side===bA?(a.side=bz,a.needsUpdate=!0,h.renderBufferDirect(c,d,e,a,b,f),a.side=by,a.needsUpdate=!0,h.renderBufferDirect(c,d,e,a,b,f),a.side=bA):h.renderBufferDirect(c,d,e,a,b,f),b.onAfterRender(h,d,c,e,a,f)}function aM(c,g,k){!0!==g.isScene&&(g=ab);const d=ah.get(c),a=B.state.lights,m=B.state.shadowsArray,l=a.state.version,e=ao.getParameters(c,a.state,m,g,k),j=ao.getProgramCacheKey(e);let i=d.programs;d.environment=c.isMeshStandardMaterial?g.environment:null,d.fog=g.fog,d.envMap=(c.isMeshStandardMaterial?ak:aj).get(c.envMap||d.environment),void 0===i&&(c.addEventListener("dispose",aC),i=new Map,d.programs=i);let f=i.get(j);if(void 0!==f){if(d.currentProgram===f&&d.lightsStateVersion===l)return aN(c,e),f}else e.uniforms=ao.getUniforms(c),c.onBuild(k,e,h),c.onBeforeCompile(e,h),f=ao.acquireProgram(e,j),i.set(j,f),d.uniforms=e.uniforms;const b=d.uniforms;(c.isShaderMaterial||c.isRawShaderMaterial)&& !0!==c.clipping||(b.clippingPlanes=as.uniform),aN(c,e),d.needsLights=aR(c),d.lightsStateVersion=l,d.needsLights&&(b.ambientLightColor.value=a.state.ambient,b.lightProbe.value=a.state.probe,b.directionalLights.value=a.state.directional,b.directionalLightShadows.value=a.state.directionalShadow,b.spotLights.value=a.state.spot,b.spotLightShadows.value=a.state.spotShadow,b.rectAreaLights.value=a.state.rectArea,b.ltc_1.value=a.state.rectAreaLTC1,b.ltc_2.value=a.state.rectAreaLTC2,b.pointLights.value=a.state.point,b.pointLightShadows.value=a.state.pointShadow,b.hemisphereLights.value=a.state.hemi,b.directionalShadowMap.value=a.state.directionalShadowMap,b.directionalShadowMatrix.value=a.state.directionalShadowMatrix,b.spotShadowMap.value=a.state.spotShadowMap,b.spotShadowMatrix.value=a.state.spotShadowMatrix,b.pointShadowMap.value=a.state.pointShadowMap,b.pointShadowMatrix.value=a.state.pointShadowMatrix);const n=f.getUniforms(),o=L.seqWithValue(n.seq,b);return d.currentProgram=f,d.uniformsList=o,f}function aN(c,a){const b=ah.get(c);b.outputEncoding=a.outputEncoding,b.instancing=a.instancing,b.skinning=a.skinning,b.morphTargets=a.morphTargets,b.morphNormals=a.morphNormals,b.morphTargetsCount=a.morphTargetsCount,b.numClippingPlanes=a.numClippingPlanes,b.numIntersection=a.numClipIntersection,b.vertexAlphas=a.vertexAlphas,b.vertexTangents=a.vertexTangents}function aP(g,l,i,a,c){!0!==l.isScene&&(l=ab),ai.resetTextureUnits();const p=l.fog,t=a.isMeshStandardMaterial?l.environment:null,u=null===I?h.outputEncoding:I.texture.encoding,v=(a.isMeshStandardMaterial?ak:aj).get(a.envMap||t),w=!0===a.vertexColors&&!!i.attributes.color&&4===i.attributes.color.itemSize,x=!!a.normalMap&&!!i.attributes.tangent,y=!!i.morphAttributes.position,z=!!i.morphAttributes.normal,A=i.morphAttributes.position?i.morphAttributes.position.length:0,b=ah.get(a),C=B.state.lights;if(!0===Y&&(!0===Z||g!==M)){const D=g===M&&a.id===K;as.setState(a,g,D)}let e=!1;a.version===b.__version?b.needsLights&&b.lightsStateVersion!==C.state.version?e=!0:b.outputEncoding!==u?e=!0:c.isInstancedMesh&& !1===b.instancing?e=!0:c.isInstancedMesh|| !0!==b.instancing?c.isSkinnedMesh&& !1===b.skinning?e=!0:c.isSkinnedMesh|| !0!==b.skinning?b.envMap!==v?e=!0:a.fog&&b.fog!==p?e=!0:void 0!==b.numClippingPlanes&&(b.numClippingPlanes!==as.numPlanes||b.numIntersection!==as.numIntersection)?e=!0:b.vertexAlphas!==w?e=!0:b.vertexTangents!==x?e=!0:b.morphTargets!==y?e=!0:b.morphNormals!==z?e=!0:!0===ae.isWebGL2&&b.morphTargetsCount!==A&&(e=!0):e=!0:e=!0:(e=!0,b.__version=a.version);let m=b.currentProgram;!0===e&&(m=aM(a,l,c));let r=!1,n=!1,q=!1;const f=m.getUniforms(),o=b.uniforms;if(af.useProgram(m.program)&&(r=!0,n=!0,q=!0),a.id!==K&&(K=a.id,n=!0),r||M!==g){if(f.setValue(d,"projectionMatrix",g.projectionMatrix),ae.logarithmicDepthBuffer&&f.setValue(d,"logDepthBufFC",2/(Math.log(g.far+1)/Math.LN2)),M!==g&&(M=g,n=!0,q=!0),a.isShaderMaterial||a.isMeshPhongMaterial||a.isMeshToonMaterial||a.isMeshStandardMaterial||a.envMap){const s=f.map.cameraPosition;void 0!==s&&s.setValue(d,aa.setFromMatrixPosition(g.matrixWorld))}(a.isMeshPhongMaterial||a.isMeshToonMaterial||a.isMeshLambertMaterial||a.isMeshBasicMaterial||a.isMeshStandardMaterial||a.isShaderMaterial)&&f.setValue(d,"isOrthographic",!0===g.isOrthographicCamera),(a.isMeshPhongMaterial||a.isMeshToonMaterial||a.isMeshLambertMaterial||a.isMeshBasicMaterial||a.isMeshStandardMaterial||a.isShaderMaterial||a.isShadowMaterial||c.isSkinnedMesh)&&f.setValue(d,"viewMatrix",g.matrixWorldInverse)}if(c.isSkinnedMesh){f.setOptional(d,c,"bindMatrix"),f.setOptional(d,c,"bindMatrixInverse");const k=c.skeleton;k&&(ae.floatVertexTextures?(null===k.boneTexture&&k.computeBoneTexture(),f.setValue(d,"boneTexture",k.boneTexture,ai),f.setValue(d,"boneTextureSize",k.boneTextureSize)):f.setOptional(d,k,"boneMatrices"))}return i&&(void 0!==i.morphAttributes.position|| void 0!==i.morphAttributes.normal)&&av.update(c,i,a,m),(n||b.receiveShadow!==c.receiveShadow)&&(b.receiveShadow=c.receiveShadow,f.setValue(d,"receiveShadow",c.receiveShadow)),n&&(f.setValue(d,"toneMappingExposure",h.toneMappingExposure),b.needsLights&&aQ(o,q),p&&a.fog&&ap.refreshFogUniforms(o,p),ap.refreshMaterialUniforms(o,a,Q,j,$),L.upload(d,b.uniformsList,o,ai)),a.isShaderMaterial&& !0===a.uniformsNeedUpdate&&(L.upload(d,b.uniformsList,o,ai),a.uniformsNeedUpdate=!1),a.isSpriteMaterial&&f.setValue(d,"center",c.center),f.setValue(d,"modelViewMatrix",c.modelViewMatrix),f.setValue(d,"normalMatrix",c.normalMatrix),f.setValue(d,"modelMatrix",c.matrixWorld),m}function aQ(a,b){a.ambientLightColor.needsUpdate=b,a.lightProbe.needsUpdate=b,a.directionalLights.needsUpdate=b,a.directionalLightShadows.needsUpdate=b,a.pointLights.needsUpdate=b,a.pointLightShadows.needsUpdate=b,a.spotLights.needsUpdate=b,a.spotLightShadows.needsUpdate=b,a.rectAreaLights.needsUpdate=b,a.hemisphereLights.needsUpdate=b}function aR(a){return a.isMeshLambertMaterial||a.isMeshToonMaterial||a.isMeshPhongMaterial||a.isMeshStandardMaterial||a.isShadowMaterial||a.isShaderMaterial&& !0===a.lights}m.setAnimationLoop(function(a){aF&&aF(a)}),"undefined"!=typeof window&&m.setContext(window),this.setAnimationLoop=function(a){aF=a,g.setAnimationLoop(a),null===a?m.stop():m.start()},g.addEventListener("sessionstart",y),g.addEventListener("sessionend",z),this.render=function(b,a){if(void 0!==a&& !0!==a.isCamera){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(!0===F)return;!0===b.autoUpdate&&b.updateMatrixWorld(),null===a.parent&&a.updateMatrixWorld(),!0===g.enabled&& !0===g.isPresenting&&(!0===g.cameraAutoUpdate&&g.updateCamera(a),a=g.getCamera()),!0===b.isScene&&b.onBeforeRender(h,b,a,I),(B=ar.get(b,E.length)).init(),E.push(B),_.multiplyMatrices(a.projectionMatrix,a.matrixWorldInverse),X.setFromProjectionMatrix(_),Z=this.localClippingEnabled,Y=as.init(this.clippingPlanes,Z,a),(A=aq.get(b,C.length)).init(),C.push(A),aG(b,a,0,h.sortObjects),A.finish(),!0===h.sortObjects&&A.sort(R,S),!0===Y&&as.beginShadows();const f=B.state.shadowsArray;if(at.render(f,b,a),!0===Y&&as.endShadows(),!0===this.info.autoReset&&this.info.reset(),au.render(A,b),B.setupLights(h.physicallyCorrectLights),a.isArrayCamera){const d=a.cameras;for(let c=0,i=d.length;c<i;c++){const e=d[c];aH(A,b,e,e.viewport)}}else aH(A,b,a);null!==I&&(ai.updateMultisampleRenderTarget(I),ai.updateRenderTargetMipmap(I)),!0===b.isScene&&b.onAfterRender(h,b,a),af.buffers.depth.setTest(!0),af.buffers.depth.setMask(!0),af.buffers.color.setMask(!0),af.setPolygonOffset(!1),az.resetDefaultState(),K=-1,M=null,E.pop(),B=E.length>0?E[E.length-1]:null,C.pop(),A=C.length>0?C[C.length-1]:null},this.getActiveCubeFace=function(){return G},this.getActiveMipmapLevel=function(){return H},this.getRenderTarget=function(){return I},this.setRenderTarget=function(a,b=0,f=0){I=a,G=b,H=f,a&& void 0===ah.get(a).__webglFramebuffer&&ai.setupRenderTarget(a);let g=null,i=!1,j=!1;if(a){const k=a.texture;(k.isDataTexture3D||k.isDataTexture2DArray)&&(j=!0);const l=ah.get(a).__webglFramebuffer;a.isWebGLCubeRenderTarget?(g=l[b],i=!0):g=a.isWebGLMultisampleRenderTarget?ah.get(a).__webglMultisampledFramebuffer:l,N.copy(a.viewport),O.copy(a.scissor),P=a.scissorTest}else N.copy(T).multiplyScalar(Q).floor(),O.copy(U).multiplyScalar(Q).floor(),P=V;const m=af.bindFramebuffer(36160,g);if(m&&ae.drawBuffers){let c=!1;if(a)if(a.isWebGLMultipleRenderTargets){const h=a.texture;if(W.length!==h.length||36064!==W[0]){for(let e=0,n=h.length;e<n;e++)W[e]=36064+e;W.length=h.length,c=!0}}else(1!==W.length||36064!==W[0])&&(W[0]=36064,W.length=1,c=!0);else(1!==W.length||1029!==W[0])&&(W[0]=1029,W.length=1,c=!0);c&&(ae.isWebGL2?d.drawBuffers(W):ad.get("WEBGL_draw_buffers").drawBuffersWEBGL(W))}if(af.viewport(N),af.scissor(O),af.setScissorTest(P),i){const o=ah.get(a.texture);d.framebufferTexture2D(36160,36064,34069+b,o.__webglTexture,f)}else if(j){const p=ah.get(a.texture),q=b||0;d.framebufferTextureLayer(36160,36064,p.__webglTexture,f||0,q)}K=-1},this.readRenderTargetPixels=function(a,e,f,h,i,l,j){if(!(a&&a.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let c=ah.get(a).__webglFramebuffer;if(a.isWebGLCubeRenderTarget&& void 0!==j&&(c=c[j]),c){af.bindFramebuffer(36160,c);try{const k=a.texture,g=k.format,b=k.type;if(1023!==g&&ay.convert(g)!==d.getParameter(35739)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const m=1016===b&&(ad.has("EXT_color_buffer_half_float")||ae.isWebGL2&&ad.has("EXT_color_buffer_float"));if(1009!==b&&ay.convert(b)!==d.getParameter(35738)&&!(1015===b&&(ae.isWebGL2||ad.has("OES_texture_float")||ad.has("WEBGL_color_buffer_float")))&&!m){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}36053===d.checkFramebufferStatus(36160)?e>=0&&e<=a.width-h&&f>=0&&f<=a.height-i&&d.readPixels(e,f,h,i,ay.convert(g),ay.convert(b),l):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{const n=null!==I?ah.get(I).__webglFramebuffer:null;af.bindFramebuffer(36160,n)}}},this.copyFramebufferToTexture=function(c,b,e=0){const f=Math.pow(2,-e),g=Math.floor(b.image.width*f),h=Math.floor(b.image.height*f);let a=ay.convert(b.format);ae.isWebGL2&&(6407===a&&(a=32849),6408===a&&(a=32856)),ai.setTexture2D(b,0),d.copyTexImage2D(3553,e,a,c.x,c.y,g,h,0),af.unbindTexture()},this.copyTextureToTexture=function(c,a,b,e=0){const h=a.image.width,i=a.image.height,f=ay.convert(b.format),g=ay.convert(b.type);ai.setTexture2D(b,0),d.pixelStorei(37440,b.flipY),d.pixelStorei(37441,b.premultiplyAlpha),d.pixelStorei(3317,b.unpackAlignment),a.isDataTexture?d.texSubImage2D(3553,e,c.x,c.y,h,i,f,g,a.image.data):a.isCompressedTexture?d.compressedTexSubImage2D(3553,e,c.x,c.y,a.mipmaps[0].width,a.mipmaps[0].height,f,a.mipmaps[0].data):d.texSubImage2D(3553,e,c.x,c.y,f,g,a.image),0===e&&b.generateMipmaps&&d.generateMipmap(3553),af.unbindTexture()},this.copyTextureToTexture3D=function(b,c,e,a,i=0){if(h.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const j=b.max.x-b.min.x+1,k=b.max.y-b.min.y+1,l=b.max.z-b.min.z+1,m=ay.convert(a.format),n=ay.convert(a.type);let f;if(a.isDataTexture3D)ai.setTexture3D(a,0),f=32879;else if(a.isDataTexture2DArray)ai.setTexture2DArray(a,0),f=35866;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}d.pixelStorei(37440,a.flipY),d.pixelStorei(37441,a.premultiplyAlpha),d.pixelStorei(3317,a.unpackAlignment);const o=d.getParameter(3314),p=d.getParameter(32878),q=d.getParameter(3316),r=d.getParameter(3315),s=d.getParameter(32877),g=e.isCompressedTexture?e.mipmaps[0]:e.image;d.pixelStorei(3314,g.width),d.pixelStorei(32878,g.height),d.pixelStorei(3316,b.min.x),d.pixelStorei(3315,b.min.y),d.pixelStorei(32877,b.min.z),e.isDataTexture||e.isDataTexture3D?d.texSubImage3D(f,i,c.x,c.y,c.z,j,k,l,m,n,g.data):e.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),d.compressedTexSubImage3D(f,i,c.x,c.y,c.z,j,k,l,m,g.data)):d.texSubImage3D(f,i,c.x,c.y,c.z,j,k,l,m,n,g),d.pixelStorei(3314,o),d.pixelStorei(32878,p),d.pixelStorei(3316,q),d.pixelStorei(3315,r),d.pixelStorei(32877,s),0===i&&a.generateMipmaps&&d.generateMipmap(f),af.unbindTexture()},this.initTexture=function(a){ai.setTexture2D(a,0),af.unbindTexture()},this.resetState=function(){G=0,H=0,I=null,af.reset(),az.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}e.prototype.isWebGLRenderer=!0,(class extends e{}).prototype.isWebGL1Renderer=!0;class aY{constructor(a,b=25e-5){this.name="",this.color=new g(a),this.density=b}clone(){return new aY(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}aY.prototype.isFogExp2=!0;class aZ{constructor(a,b=1,c=1e3){this.name="",this.color=new g(a),this.near=b,this.far=c}clone(){return new aZ(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}aZ.prototype.isFog=!0;class ah extends i{constructor(){super(),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(a,b){return super.copy(a,b),null!==a.background&&(this.background=a.background.clone()),null!==a.environment&&(this.environment=a.environment.clone()),null!==a.fog&&(this.fog=a.fog.clone()),null!==a.overrideMaterial&&(this.overrideMaterial=a.overrideMaterial.clone()),this.autoUpdate=a.autoUpdate,this.matrixAutoUpdate=a.matrixAutoUpdate,this}toJSON(b){const a=super.toJSON(b);return null!==this.fog&&(a.object.fog=this.fog.toJSON()),a}}ah.prototype.isScene=!0;class Q{constructor(a,b){this.array=a,this.stride=b,this.count=void 0!==a?a.length/b:0,this.usage=35044,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=az()}onUploadCallback(){}set needsUpdate(a){!0===a&&this.version++}setUsage(a){return this.usage=a,this}copy(a){return this.array=new a.array.constructor(a.array),this.count=a.count,this.stride=a.stride,this.usage=a.usage,this}copyAt(b,c,d){b*=this.stride,d*=c.stride;for(let a=0,e=this.stride;a<e;a++)this.array[b+a]=c.array[d+a];return this}set(a,b=0){return this.array.set(a,b),this}clone(a){void 0===a.arrayBuffers&&(a.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=az()),void 0===a.arrayBuffers[this.array.buffer._uuid]&&(a.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const c=new this.array.constructor(a.arrayBuffers[this.array.buffer._uuid]),b=new this.constructor(c,this.stride);return b.setUsage(this.usage),b}onUpload(a){return this.onUploadCallback=a,this}toJSON(a){return void 0===a.arrayBuffers&&(a.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=az()),void 0===a.arrayBuffers[this.array.buffer._uuid]&&(a.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}Q.prototype.isInterleavedBuffer=!0;const fx=new a;class a${constructor(a,b,c,d=!1){this.name="",this.data=a,this.itemSize=b,this.offset=c,this.normalized=!0===d}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(a){this.data.needsUpdate=a}applyMatrix4(b){for(let a=0,c=this.data.count;a<c;a++)fx.x=this.getX(a),fx.y=this.getY(a),fx.z=this.getZ(a),fx.applyMatrix4(b),this.setXYZ(a,fx.x,fx.y,fx.z);return this}applyNormalMatrix(b){for(let a=0,c=this.count;a<c;a++)fx.x=this.getX(a),fx.y=this.getY(a),fx.z=this.getZ(a),fx.applyNormalMatrix(b),this.setXYZ(a,fx.x,fx.y,fx.z);return this}transformDirection(b){for(let a=0,c=this.count;a<c;a++)fx.x=this.getX(a),fx.y=this.getY(a),fx.z=this.getZ(a),fx.transformDirection(b),this.setXYZ(a,fx.x,fx.y,fx.z);return this}setX(a,b){return this.data.array[a*this.data.stride+this.offset]=b,this}setY(a,b){return this.data.array[a*this.data.stride+this.offset+1]=b,this}setZ(a,b){return this.data.array[a*this.data.stride+this.offset+2]=b,this}setW(a,b){return this.data.array[a*this.data.stride+this.offset+3]=b,this}getX(a){return this.data.array[a*this.data.stride+this.offset]}getY(a){return this.data.array[a*this.data.stride+this.offset+1]}getZ(a){return this.data.array[a*this.data.stride+this.offset+2]}getW(a){return this.data.array[a*this.data.stride+this.offset+3]}setXY(a,b,c){return a=a*this.data.stride+this.offset,this.data.array[a+0]=b,this.data.array[a+1]=c,this}setXYZ(a,b,c,d){return a=a*this.data.stride+this.offset,this.data.array[a+0]=b,this.data.array[a+1]=c,this.data.array[a+2]=d,this}setXYZW(a,b,c,d,e){return a=a*this.data.stride+this.offset,this.data.array[a+0]=b,this.data.array[a+1]=c,this.data.array[a+2]=d,this.data.array[a+3]=e,this}clone(a){if(void 0!==a)return void 0===a.interleavedBuffers&&(a.interleavedBuffers={}),void 0===a.interleavedBuffers[this.data.uuid]&&(a.interleavedBuffers[this.data.uuid]=this.data.clone(a)),new a$(a.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized);{console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const d=[];for(let b=0;b<this.count;b++){const e=b*this.data.stride+this.offset;for(let c=0;c<this.itemSize;c++)d.push(this.data.array[e+c])}return new q(new this.array.constructor(d),this.itemSize,this.normalized)}}toJSON(a){if(void 0!==a)return void 0===a.interleavedBuffers&&(a.interleavedBuffers={}),void 0===a.interleavedBuffers[this.data.uuid]&&(a.interleavedBuffers[this.data.uuid]=this.data.toJSON(a)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized};{console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const d=[];for(let b=0;b<this.count;b++){const e=b*this.data.stride+this.offset;for(let c=0;c<this.itemSize;c++)d.push(this.data.array[e+c])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:d,normalized:this.normalized}}}}a$.prototype.isInterleavedBufferAttribute=!0;class a_ extends n{constructor(a){super(),this.type="SpriteMaterial",this.color=new g(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(a)}copy(a){return super.copy(a),this.color.copy(a.color),this.map=a.map,this.alphaMap=a.alphaMap,this.rotation=a.rotation,this.sizeAttenuation=a.sizeAttenuation,this}}a_.prototype.isSpriteMaterial=!0;let fy;const fz=new a,fA=new a,fB=new a,fC=new j,fD=new j,fE=new c,fF=new a,fG=new a,fH=new a,fI=new j,fJ=new j,fK=new j;function fL(a,d,e,f,b,c){fC.subVectors(a,e).addScalar(.5).multiply(f),void 0!==b?(fD.x=c*fC.x-b*fC.y,fD.y=b*fC.x+c*fC.y):fD.copy(fC),a.copy(d),a.x+=fD.x,a.y+=fD.y,a.applyMatrix4(fE)}(class extends i{constructor(a){if(super(),this.type="Sprite",void 0===fy){fy=new f;const c=new Float32Array([-0.5,-0.5,0,0,0,.5,-0.5,0,1,0,.5,.5,0,1,1,-0.5,.5,0,0,1]),b=new Q(c,5);fy.setIndex([0,1,2,0,2,3]),fy.setAttribute("position",new a$(b,3,0,!1)),fy.setAttribute("uv",new a$(b,2,3,!1))}this.geometry=fy,this.material=void 0!==a?a:new a_,this.center=new j(.5,.5)}raycast(a,h){null===a.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),fA.setFromMatrixScale(this.matrixWorld),fE.copy(a.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(a.camera.matrixWorldInverse,this.matrixWorld),fB.setFromMatrixPosition(this.modelViewMatrix),a.camera.isPerspectiveCamera&& !1===this.material.sizeAttenuation&&fA.multiplyScalar(-fB.z);const e=this.material.rotation;let b,c;0!==e&&(c=Math.cos(e),b=Math.sin(e));const d=this.center;fL(fF.set(-0.5,-0.5,0),fB,d,fA,b,c),fL(fG.set(.5,-0.5,0),fB,d,fA,b,c),fL(fH.set(.5,.5,0),fB,d,fA,b,c),fI.set(0,0),fJ.set(1,0),fK.set(1,1);let g=a.ray.intersectTriangle(fF,fG,fH,!1,fz);if(null===g&&(fL(fG.set(-0.5,.5,0),fB,d,fA,b,c),fJ.set(0,1),null===(g=a.ray.intersectTriangle(fF,fH,fG,!1,fz))))return;const f=a.ray.origin.distanceTo(fz);f<a.near||f>a.far||h.push({distance:f,point:fz.clone(),uv:t.getUV(fz,fF,fG,fH,fI,fJ,fK,new j),face:null,object:this})}copy(a){return super.copy(a),void 0!==a.center&&this.center.copy(a.center),this.material=a.material,this}}).prototype.isSprite=!0,new a,new a;const fM=new a,fN=new D,fO=new D,fP=new a,fQ=new c;class ai extends F{constructor(a,b){super(a,b),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new c,this.bindMatrixInverse=new c}copy(a){return super.copy(a),this.bindMode=a.bindMode,this.bindMatrix.copy(a.bindMatrix),this.bindMatrixInverse.copy(a.bindMatrixInverse),this.skeleton=a.skeleton,this}bind(b,a){this.skeleton=b,void 0===a&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),a=this.matrixWorld),this.bindMatrix.copy(a),this.bindMatrixInverse.copy(a).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const a=new D,c=this.geometry.attributes.skinWeight;for(let b=0,e=c.count;b<e;b++){a.x=c.getX(b),a.y=c.getY(b),a.z=c.getZ(b),a.w=c.getW(b);const d=1/a.manhattanLength();d!==1/0?a.multiplyScalar(d):a.set(1,0,0,0),c.setXYZW(b,a.x,a.y,a.z,a.w)}}updateMatrixWorld(a){super.updateMatrixWorld(a),"attached"===this.bindMode?this.bindMatrixInverse.copy(this.matrixWorld).invert():"detached"===this.bindMode?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(c,a){const d=this.skeleton,e=this.geometry;fN.fromBufferAttribute(e.attributes.skinIndex,c),fO.fromBufferAttribute(e.attributes.skinWeight,c),fM.copy(a).applyMatrix4(this.bindMatrix),a.set(0,0,0);for(let b=0;b<4;b++){const f=fO.getComponent(b);if(0!==f){const g=fN.getComponent(b);fQ.multiplyMatrices(d.bones[g].matrixWorld,d.boneInverses[g]),a.addScaledVector(fP.copy(fM).applyMatrix4(fQ),f)}}return a.applyMatrix4(this.bindMatrixInverse)}}ai.prototype.isSkinnedMesh=!0;class a0 extends i{constructor(){super(),this.type="Bone"}}a0.prototype.isBone=!0;class a1 extends s{constructor(c=null,d=1,e=1,f,g,h,i,j,a=bE,b=bE,k,l){super(null,h,i,j,a,b,f,g,k,l),this.image={data:c,width:d,height:e},this.magFilter=a,this.minFilter=b,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}a1.prototype.isDataTexture=!0;const fR=new c,fS=new c;class fT{constructor(a=[],b=[]){this.uuid=az(),this.bones=a.slice(0),this.boneInverses=b,this.boneMatrices=null,this.boneTexture=null,this.boneTextureSize=0,this.frame=-1,this.init()}init(){const a=this.bones,b=this.boneInverses;if(this.boneMatrices=new Float32Array(16*a.length),0===b.length)this.calculateInverses();else if(a.length!==b.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let d=0,e=this.bones.length;d<e;d++)this.boneInverses.push(new c)}}calculateInverses(){this.boneInverses.length=0;for(let a=0,d=this.bones.length;a<d;a++){const b=new c;this.bones[a]&&b.copy(this.bones[a].matrixWorld).invert(),this.boneInverses.push(b)}}pose(){for(let b=0,e=this.bones.length;b<e;b++){const d=this.bones[b];d&&d.matrixWorld.copy(this.boneInverses[b]).invert()}for(let c=0,f=this.bones.length;c<f;c++){const a=this.bones[c];a&&(a.parent&&a.parent.isBone?(a.matrix.copy(a.parent.matrixWorld).invert(),a.matrix.multiply(a.matrixWorld)):a.matrix.copy(a.matrixWorld),a.matrix.decompose(a.position,a.quaternion,a.scale))}}update(){const b=this.bones,d=this.boneInverses,e=this.boneMatrices,c=this.boneTexture;for(let a=0,f=b.length;a<f;a++){const g=b[a]?b[a].matrixWorld:fS;fR.multiplyMatrices(g,d[a]),fR.toArray(e,16*a)}null!==c&&(c.needsUpdate=!0)}clone(){return new fT(this.bones,this.boneInverses)}computeBoneTexture(){let a=Math.sqrt(4*this.bones.length);a=Math.max(a=aH(a),4);const b=new Float32Array(a*a*4);b.set(this.boneMatrices);const c=new a1(b,a,a,1023,1015);return this.boneMatrices=b,this.boneTexture=c,this.boneTextureSize=a,this}getBoneByName(c){for(let a=0,d=this.bones.length;a<d;a++){const b=this.bones[a];if(b.name===c)return b}}dispose(){null!==this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(a,f){this.uuid=a.uuid;for(let b=0,g=a.bones.length;b<g;b++){const e=a.bones[b];let d=f[e];void 0===d&&(console.warn("THREE.Skeleton: No bone found with UUID:",e),d=new a0),this.bones.push(d),this.boneInverses.push(new c().fromArray(a.boneInverses[b]))}return this.init(),this}toJSON(){const a={metadata:{version:4.5,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};a.uuid=this.uuid;const c=this.bones,d=this.boneInverses;for(let b=0,e=c.length;b<e;b++){const f=c[b];a.bones.push(f.uuid);const g=d[b];a.boneInverses.push(g.toArray())}return a}}class a2 extends q{constructor(c,d,a,b=1){"number"==typeof a&&(b=a,a=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),super(c,d,a),this.meshPerAttribute=b}copy(a){return super.copy(a),this.meshPerAttribute=a.meshPerAttribute,this}toJSON(){const a=super.toJSON();return a.meshPerAttribute=this.meshPerAttribute,a.isInstancedBufferAttribute=!0,a}}a2.prototype.isInstancedBufferAttribute=!0;const fU=new c,fV=new c,fW=[],fX=new F;(class extends F{constructor(b,c,a){super(b,c),this.instanceMatrix=new a2(new Float32Array(16*a),16),this.instanceColor=null,this.count=a,this.frustumCulled=!1}copy(a){return super.copy(a),this.instanceMatrix.copy(a.instanceMatrix),null!==a.instanceColor&&(this.instanceColor=a.instanceColor.clone()),this.count=a.count,this}getColorAt(a,b){b.fromArray(this.instanceColor.array,3*a)}getMatrixAt(a,b){b.fromArray(this.instanceMatrix.array,16*a)}raycast(d,e){const f=this.matrixWorld,g=this.count;if(fX.geometry=this.geometry,fX.material=this.material,void 0!==fX.material)for(let a=0;a<g;a++){this.getMatrixAt(a,fU),fV.multiplyMatrices(f,fU),fX.matrixWorld=fV,fX.raycast(d,fW);for(let b=0,h=fW.length;b<h;b++){const c=fW[b];c.instanceId=a,c.object=this,e.push(c)}fW.length=0}}setColorAt(a,b){null===this.instanceColor&&(this.instanceColor=new a2(new Float32Array(3*this.instanceMatrix.count),3)),b.toArray(this.instanceColor.array,3*a)}setMatrixAt(a,b){b.toArray(this.instanceMatrix.array,16*a)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}).prototype.isInstancedMesh=!0;class a3 extends n{constructor(a){super(),this.type="LineBasicMaterial",this.color=new g(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(a)}copy(a){return super.copy(a),this.color.copy(a.color),this.linewidth=a.linewidth,this.linecap=a.linecap,this.linejoin=a.linejoin,this}}a3.prototype.isLineBasicMaterial=!0;const fY=new a,fZ=new a,f$=new c,f_=new z,f0=new E;class R extends i{constructor(a=new f,b=new a3){super(),this.type="Line",this.geometry=a,this.material=b,this.updateMorphTargets()}copy(a){return super.copy(a),this.material=a.material,this.geometry=a.geometry,this}computeLineDistances(){const b=this.geometry;if(b.isBufferGeometry)if(null===b.index){const d=b.attributes.position,c=[0];for(let a=1,e=d.count;a<e;a++)fY.fromBufferAttribute(d,a-1),fZ.fromBufferAttribute(d,a),c[a]=c[a-1],c[a]+=fY.distanceTo(fZ);b.setAttribute("lineDistance",new c1(c,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else b.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}raycast(b,o){const c=this.geometry,p=this.matrixWorld,q=b.params.Line.threshold,d=c.drawRange;if(null===c.boundingSphere&&c.computeBoundingSphere(),f0.copy(c.boundingSphere),f0.applyMatrix4(p),f0.radius+=q,!1===b.ray.intersectsSphere(f0))return;f$.copy(p).invert(),f_.copy(b.ray).applyMatrix4(f$);const r=q/((this.scale.x+this.scale.y+this.scale.z)/3),s=r*r,i=new a,j=new a,k=new a,e=new a,t=this.isLineSegments?2:1;if(c.isBufferGeometry){const l=c.index,u=c.attributes,f=u.position;if(null!==l){const v=Math.max(0,d.start),w=Math.min(l.count,d.start+d.count);for(let g=v,x=w-1;g<x;g+=t){const y=l.getX(g),z=l.getX(g+1);i.fromBufferAttribute(f,y),j.fromBufferAttribute(f,z);const A=f_.distanceSqToSegment(i,j,e,k);if(A>s)continue;e.applyMatrix4(this.matrixWorld);const m=b.ray.origin.distanceTo(e);m<b.near||m>b.far||o.push({distance:m,point:k.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this})}}else{const B=Math.max(0,d.start),C=Math.min(f.count,d.start+d.count);for(let h=B,D=C-1;h<D;h+=t){i.fromBufferAttribute(f,h),j.fromBufferAttribute(f,h+1);const E=f_.distanceSqToSegment(i,j,e,k);if(E>s)continue;e.applyMatrix4(this.matrixWorld);const n=b.ray.origin.distanceTo(e);n<b.near||n>b.far||o.push({distance:n,point:k.clone().applyMatrix4(this.matrixWorld),index:h,face:null,faceIndex:null,object:this})}}}else c.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const b=this.geometry;if(b.isBufferGeometry){const d=b.morphAttributes,e=Object.keys(d);if(e.length>0){const c=d[e[0]];if(void 0!==c){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let a=0,g=c.length;a<g;a++){const h=c[a].name||String(a);this.morphTargetInfluences.push(0),this.morphTargetDictionary[h]=a}}}}else{const f=b.morphTargets;void 0!==f&&f.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}R.prototype.isLine=!0;const f1=new a,f2=new a;class a4 extends R{constructor(a,b){super(a,b),this.type="LineSegments"}computeLineDistances(){const b=this.geometry;if(b.isBufferGeometry)if(null===b.index){const d=b.attributes.position,c=[];for(let a=0,e=d.count;a<e;a+=2)f1.fromBufferAttribute(d,a),f2.fromBufferAttribute(d,a+1),c[a]=0===a?0:c[a-1],c[a+1]=c[a]+f1.distanceTo(f2);b.setAttribute("lineDistance",new c1(c,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else b.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}}a4.prototype.isLineSegments=!0;class a5 extends R{constructor(a,b){super(a,b),this.type="LineLoop"}}a5.prototype.isLineLoop=!0;class a6 extends n{constructor(a){super(),this.type="PointsMaterial",this.color=new g(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.setValues(a)}copy(a){return super.copy(a),this.color.copy(a.color),this.map=a.map,this.alphaMap=a.alphaMap,this.size=a.size,this.sizeAttenuation=a.sizeAttenuation,this}}a6.prototype.isPointsMaterial=!0;const f3=new c,f4=new z,f5=new E,f6=new a;class a7 extends i{constructor(a=new f,b=new a6){super(),this.type="Points",this.geometry=a,this.material=b,this.updateMorphTargets()}copy(a){return super.copy(a),this.material=a.material,this.geometry=a.geometry,this}raycast(c,i){const a=this.geometry,d=this.matrixWorld,j=c.params.Points.threshold,b=a.drawRange;if(null===a.boundingSphere&&a.computeBoundingSphere(),f5.copy(a.boundingSphere),f5.applyMatrix4(d),f5.radius+=j,!1===c.ray.intersectsSphere(f5))return;f3.copy(d).invert(),f4.copy(c.ray).applyMatrix4(f3);const k=j/((this.scale.x+this.scale.y+this.scale.z)/3),l=k*k;if(a.isBufferGeometry){const f=a.index,n=a.attributes,g=n.position;if(null!==f){const o=Math.max(0,b.start),p=Math.min(f.count,b.start+b.count);for(let h=o,q=p;h<q;h++){const m=f.getX(h);f6.fromBufferAttribute(g,m),f7(f6,m,l,d,c,i,this)}}else{const r=Math.max(0,b.start),s=Math.min(g.count,b.start+b.count);for(let e=r,t=s;e<t;e++)f6.fromBufferAttribute(g,e),f7(f6,e,l,d,c,i,this)}}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const b=this.geometry;if(b.isBufferGeometry){const d=b.morphAttributes,e=Object.keys(d);if(e.length>0){const c=d[e[0]];if(void 0!==c){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let a=0,g=c.length;a<g;a++){const h=c[a].name||String(a);this.morphTargetInfluences.push(0),this.morphTargetDictionary[h]=a}}}}else{const f=b.morphTargets;void 0!==f&&f.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}function f7(e,g,h,i,c,j,k){const f=f4.distanceSqToPoint(e);if(f<h){const b=new a;f4.closestPointToPoint(e,b),b.applyMatrix4(i);const d=c.ray.origin.distanceTo(b);if(d<c.near||d>c.far)return;j.push({distance:d,distanceToRay:Math.sqrt(f),point:b,index:g,face:null,object:k})}}a7.prototype.isPoints=!0,(class extends s{constructor(a,e,f,g,b,c,d,h,i){super(a,e,f,g,b,c,d,h,i),this.format=void 0!==d?d:bK,this.minFilter=void 0!==c?c:bH,this.magFilter=void 0!==b?b:bH,this.generateMipmaps=!1;const k=this;function j(){k.needsUpdate=!0,a.requestVideoFrameCallback(j)}"requestVideoFrameCallback"in a&&a.requestVideoFrameCallback(j)}clone(){return new this.constructor(this.image).copy(this)}update(){const a=this.image;!1=="requestVideoFrameCallback"in a&&a.readyState>=a.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}).prototype.isVideoTexture=!0,(class extends s{constructor(a,b,c,d,e,f,g,h,i,j,k,l){super(null,f,g,h,i,j,d,e,k,l),this.image={width:b,height:c},this.mipmaps=a,this.flipY=!1,this.generateMipmaps=!1}}).prototype.isCompressedTexture=!0,(class extends s{constructor(a,b,c,d,e,f,g,h,i){super(a,b,c,d,e,f,g,h,i),this.needsUpdate=!0}}).prototype.isCanvasTexture=!0,(class extends s{constructor(e,f,b,g,h,i,c,d,j,a){if(1026!==(a=void 0!==a?a:1026)&&1027!==a)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===b&&1026===a&&(b=1012),void 0===b&&1027===a&&(b=1020),super(null,g,h,i,c,d,a,b,j),this.image={width:e,height:f},this.magFilter=void 0!==c?c:bE,this.minFilter=void 0!==d?d:bE,this.flipY=!1,this.generateMipmaps=!1}}).prototype.isDepthTexture=!0;class f8 extends f{constructor(c=1,b=8,m=0,n=2*Math.PI){super(),this.type="CircleGeometry",this.parameters={radius:c,segments:b,thetaStart:m,thetaLength:n},b=Math.max(3,b);const o=[],d=[],h=[],i=[],e=new a,f=new j;d.push(0,0,0),h.push(0,0,1),i.push(.5,.5);for(let k=0,l=3;k<=b;k++,l+=3){const p=m+k/b*n;e.x=c*Math.cos(p),e.y=c*Math.sin(p),d.push(e.x,e.y,e.z),h.push(0,0,1),f.x=(d[l]/c+1)/2,f.y=(d[l+1]/c+1)/2,i.push(f.x,f.y)}for(let g=1;g<=b;g++)o.push(g,g+1,0);this.setIndex(o),this.setAttribute("position",new c1(d,3)),this.setAttribute("normal",new c1(h,3)),this.setAttribute("uv",new c1(i,2))}static fromJSON(a){return new f8(a.radius,a.segments,a.thetaStart,a.thetaLength)}}class a8 extends f{constructor(d=1,e=1,f=1,b=8,c=1,g=!1,i=0,k=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:d,radiusBottom:e,height:f,radialSegments:b,heightSegments:c,openEnded:g,thetaStart:i,thetaLength:k};const p=this;b=Math.floor(b),c=Math.floor(c);const l=[],m=[],n=[],o=[];let q=0;const r=[],s=f/2;let t=0;function h(g){const D=q,h=new j,c=new a;let v=0;const x=!0===g?d:e,f=!0===g?1:-1;for(let y=1;y<=b;y++)m.push(0,s*f,0),n.push(0,f,0),o.push(.5,.5),q++;const E=q;for(let w=0;w<=b;w++){const F=w/b,z=F*k+i,A=Math.cos(z),B=Math.sin(z);c.x=x*B,c.y=s*f,c.z=x*A,m.push(c.x,c.y,c.z),n.push(0,f,0),h.x=.5*A+.5,h.y=.5*B*f+.5,o.push(h.x,h.y),q++}for(let r=0;r<b;r++){const C=D+r,u=E+r;!0===g?l.push(u,u+1,C):l.push(u+1,u,C),v+=3}p.addGroup(t,v,!0===g?1:2),t+=v}(function(){const u=new a,g=new a;let v=0;const H=(e-d)/f;for(let w=0;w<=c;w++){const z=[],x=w/c,A=x*(e-d)+d;for(let y=0;y<=b;y++){const B=y/b,C=B*k+i,D=Math.sin(C),E=Math.cos(C);g.x=A*D,g.y=-x*f+s,g.z=A*E,m.push(g.x,g.y,g.z),u.set(D,H,E).normalize(),n.push(u.x,u.y,u.z),o.push(B,1-x),z.push(q++)}r.push(z)}for(let h=0;h<b;h++)for(let j=0;j<c;j++){const I=r[j][h],F=r[j+1][h],J=r[j+1][h+1],G=r[j][h+1];l.push(I,F,G),l.push(F,J,G),v+=6}p.addGroup(t,v,0),t+=v})(),!1===g&&(d>0&&h(!0),e>0&&h(!1)),this.setIndex(l),this.setAttribute("position",new c1(m,3)),this.setAttribute("normal",new c1(n,3)),this.setAttribute("uv",new c1(o,2))}static fromJSON(a){return new a8(a.radiusTop,a.radiusBottom,a.height,a.radialSegments,a.heightSegments,a.openEnded,a.thetaStart,a.thetaLength)}}class f9 extends a8{constructor(a=1,b=1,c=8,d=1,e=!1,f=0,g=2*Math.PI){super(0,a,b,c,d,e,f,g),this.type="ConeGeometry",this.parameters={radius:a,height:b,radialSegments:c,heightSegments:d,openEnded:e,thetaStart:f,thetaLength:g}}static fromJSON(a){return new f9(a.radius,a.height,a.radialSegments,a.heightSegments,a.openEnded,a.thetaStart,a.thetaLength)}}class M extends f{constructor(e=[],f=[],c=1,b=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:f,radius:c,detail:b};const d=[],g=[];function h(l,m,h,n){const d=n+1,a=[];for(let b=0;b<=d;b++){a[b]=[];const j=l.clone().lerp(h,b/d),o=m.clone().lerp(h,b/d),k=d-b;for(let e=0;e<=k;e++)0===e&&b===d?a[b][e]=j:a[b][e]=j.clone().lerp(o,e/k)}for(let c=0;c<d;c++)for(let g=0;g<2*(d-c)-1;g++){const f=Math.floor(g/2);g%2==0?(i(a[c][f+1]),i(a[c+1][f]),i(a[c][f])):(i(a[c][f+1]),i(a[c+1][f+1]),i(a[c+1][f]))}}function i(a){d.push(a.x,a.y,a.z)}function k(c,a){const b=3*c;a.x=e[b+0],a.y=e[b+1],a.z=e[b+2]}function l(a,b,c,d){d<0&&1===a.x&&(g[b]=a.x-1),0===c.x&&0===c.z&&(g[b]=d/2/Math.PI+.5)}function m(a){return Math.atan2(a.z,-a.x)}function n(a){return Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))}(function(g){const c=new a,d=new a,e=new a;for(let b=0;b<f.length;b+=3)k(f[b+0],c),k(f[b+1],d),k(f[b+2],e),h(c,d,e,g)})(b),function(e){const c=new a;for(let b=0;b<d.length;b+=3)c.x=d[b+0],c.y=d[b+1],c.z=d[b+2],c.normalize().multiplyScalar(e),d[b+0]=c.x,d[b+1]=c.y,d[b+2]=c.z}(c),function(){const b=new a;for(let c=0;c<d.length;c+=3){b.x=d[c+0],b.y=d[c+1],b.z=d[c+2];const e=m(b)/2/Math.PI+.5,f=n(b)/Math.PI+.5;g.push(e,1-f)}(function(){const e=new a,f=new a,h=new a,k=new a,n=new j,o=new j,p=new j;for(let b=0,c=0;b<d.length;b+=9,c+=6){e.set(d[b+0],d[b+1],d[b+2]),f.set(d[b+3],d[b+4],d[b+5]),h.set(d[b+6],d[b+7],d[b+8]),n.set(g[c+0],g[c+1]),o.set(g[c+2],g[c+3]),p.set(g[c+4],g[c+5]),k.copy(e).add(f).add(h).divideScalar(3);const i=m(k);l(n,c+0,e,i),l(o,c+2,f,i),l(p,c+4,h,i)}})(),function(){for(let a=0;a<g.length;a+=6){const b=g[a+0],c=g[a+2],d=g[a+4],e=Math.max(b,c,d),f=Math.min(b,c,d);e>.9&&f<.1&&(b<.2&&(g[a+0]+=1),c<.2&&(g[a+2]+=1),d<.2&&(g[a+4]+=1))}}()}(),this.setAttribute("position",new c1(d,3)),this.setAttribute("normal",new c1(d.slice(),3)),this.setAttribute("uv",new c1(g,2)),0===b?this.computeVertexNormals():this.normalizeNormals()}static fromJSON(a){return new M(a.vertices,a.indices,a.radius,a.details)}}class ga extends M{constructor(c=1,d=0){const a=(1+Math.sqrt(5))/2,b=1/a;super([-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-b,-a,0,-b,a,0,b,-a,0,b,a,-b,-a,0,-b,a,0,b,-a,0,b,a,0,-a,0,-b,a,0,-b,-a,0,b,a,0,b],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],c,d),this.type="DodecahedronGeometry",this.parameters={radius:c,detail:d}}static fromJSON(a){return new ga(a.radius,a.detail)}}new a,new a,new a,new t;class o{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(a,b){const c=this.getUtoTmapping(a);return this.getPoint(c,b)}getPoints(b=5){const c=[];for(let a=0;a<=b;a++)c.push(this.getPoint(a/b));return c}getSpacedPoints(b=5){const c=[];for(let a=0;a<=b;a++)c.push(this.getPointAt(a/b));return c}getLength(){const a=this.getLengths();return a[a.length-1]}getLengths(b=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===b+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const a=[];let d,e=this.getPoint(0),f=0;a.push(0);for(let c=1;c<=b;c++)f+=(d=this.getPoint(c/b)).distanceTo(e),a.push(f),e=d;return this.cacheArcLengths=a,a}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(i,j){const b=this.getLengths();let a=0;const d=b.length;let e;e=j||i*b[d-1];let f=0,c=d-1,g;for(;f<=c;)if((g=b[a=Math.floor(f+(c-f)/2)]-e)<0)f=a+1;else if(g>0)c=a-1;else{c=a;break}if(b[a=c]===e)return a/(d-1);const h=b[a],k=b[a+1];return(a+(e-h)/(k-h))/(d-1)}getTangent(d,h){const e=1e-4;let b=d-e,c=d+e;b<0&&(b=0),c>1&&(c=1);const f=this.getPoint(b),i=this.getPoint(c),g=h||(f.isVector2?new j:new a);return g.copy(i).sub(f).normalize(),g}getTangentAt(a,b){const c=this.getUtoTmapping(a);return this.getTangent(c,b)}computeFrenetFrames(g,q){const k=new a,b=[],d=[],h=[],i=new a,n=new c;for(let l=0;l<=g;l++){const r=l/g;b[l]=this.getTangentAt(r,new a)}d[0]=new a,h[0]=new a;let j=Number.MAX_VALUE;const o=Math.abs(b[0].x),p=Math.abs(b[0].y),s=Math.abs(b[0].z);o<=j&&(j=o,k.set(1,0,0)),p<=j&&(j=p,k.set(0,1,0)),s<=j&&k.set(0,0,1),i.crossVectors(b[0],k).normalize(),d[0].crossVectors(b[0],i),h[0].crossVectors(b[0],d[0]);for(let e=1;e<=g;e++){if(d[e]=d[e-1].clone(),h[e]=h[e-1].clone(),i.crossVectors(b[e-1],b[e]),i.length()>Number.EPSILON){i.normalize();const t=Math.acos(aA(b[e-1].dot(b[e]),-1,1));d[e].applyMatrix4(n.makeRotationAxis(i,t))}h[e].crossVectors(b[e],d[e])}if(!0===q){let m=Math.acos(aA(d[0].dot(d[g]),-1,1));m/=g,b[0].dot(i.crossVectors(d[0],d[g]))>0&&(m=-m);for(let f=1;f<=g;f++)d[f].applyMatrix4(n.makeRotationAxis(b[f],m*f)),h[f].crossVectors(b[f],d[f])}return{tangents:b,normals:d,binormals:h}}clone(){return new this.constructor().copy(this)}copy(a){return this.arcLengthDivisions=a.arcLengthDivisions,this}toJSON(){const a={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return a.arcLengthDivisions=this.arcLengthDivisions,a.type=this.type,a}fromJSON(a){return this.arcLengthDivisions=a.arcLengthDivisions,this}}class S extends o{constructor(a=0,b=0,c=1,d=1,e=0,f=2*Math.PI,g=!1,h=0){super(),this.type="EllipseCurve",this.aX=a,this.aY=b,this.xRadius=c,this.yRadius=d,this.aStartAngle=e,this.aEndAngle=f,this.aClockwise=g,this.aRotation=h}getPoint(l,m){const n=m||new j,b=2*Math.PI;let a=this.aEndAngle-this.aStartAngle;const e=Math.abs(a)<Number.EPSILON;for(;a<0;)a+=b;for(;a>b;)a-=b;a<Number.EPSILON&&(a=e?0:b),!0!==this.aClockwise||e||(a===b?a=-b:a-=b);const f=this.aStartAngle+l*a;let c=this.aX+this.xRadius*Math.cos(f),d=this.aY+this.yRadius*Math.sin(f);if(0!==this.aRotation){const g=Math.cos(this.aRotation),h=Math.sin(this.aRotation),i=c-this.aX,k=d-this.aY;c=i*g-k*h+this.aX,d=i*h+k*g+this.aY}return n.set(c,d)}copy(a){return super.copy(a),this.aX=a.aX,this.aY=a.aY,this.xRadius=a.xRadius,this.yRadius=a.yRadius,this.aStartAngle=a.aStartAngle,this.aEndAngle=a.aEndAngle,this.aClockwise=a.aClockwise,this.aRotation=a.aRotation,this}toJSON(){const a=super.toJSON();return a.aX=this.aX,a.aY=this.aY,a.xRadius=this.xRadius,a.yRadius=this.yRadius,a.aStartAngle=this.aStartAngle,a.aEndAngle=this.aEndAngle,a.aClockwise=this.aClockwise,a.aRotation=this.aRotation,a}fromJSON(a){return super.fromJSON(a),this.aX=a.aX,this.aY=a.aY,this.xRadius=a.xRadius,this.yRadius=a.yRadius,this.aStartAngle=a.aStartAngle,this.aEndAngle=a.aEndAngle,this.aClockwise=a.aClockwise,this.aRotation=a.aRotation,this}}S.prototype.isEllipseCurve=!0;class aj extends S{constructor(b,c,a,d,e,f){super(b,c,a,a,d,e,f),this.type="ArcCurve"}}function T(){let a=0,b=0,c=0,d=0;return{initCatmullRom:function(l,i,j,m,k){var e,g,f,h;e=i,g=j,f=k*(j-l),h=k*(m-i),a=e,b=f,c=-3*e+3*g-2*f-h,d=2*e-2*g+f+h},initNonuniformCatmullRom:function(l,f,g,m,n,e,o){var h,j,i,k;let p=(f-l)/n-(g-l)/(n+e)+(g-f)/e,q=(g-f)/e-(m-f)/(e+o)+(m-g)/o;p*=e,q*=e,h=f,j=g,i=p,k=q,a=h,b=i,c=-3*h+3*j-2*i-k,d=2*h-2*j+i+k},calc:function(e){const f=e*e;return a+b*e+c*f+d*(f*e)}}}aj.prototype.isArcCurve=!0;const gb=new a,gc=new T,gd=new T,ge=new T;class ak extends o{constructor(a=[],b=!1,c="centripetal",d=.5){super(),this.type="CatmullRomCurve3",this.points=a,this.closed=b,this.curveType=c,this.tension=d}getPoint(p,q=new a){const n=q,d=this.points,b=d.length,o=(b-(this.closed?0:1))*p;let c=Math.floor(o),j=o-c;this.closed?c+=c>0?0:(Math.floor(Math.abs(c)/b)+1)*b:0===j&&c===b-1&&(c=b-2,j=1);let e,f;this.closed||c>0?e=d[(c-1)%b]:(gb.subVectors(d[0],d[1]).add(d[0]),e=gb);const g=d[c%b],h=d[(c+1)%b];if(this.closed||c+2<b?f=d[(c+2)%b]:(gb.subVectors(d[b-1],d[b-2]).add(d[b-1]),f=gb),"centripetal"===this.curveType||"chordal"===this.curveType){const m="chordal"===this.curveType?.5:.25;let k=Math.pow(e.distanceToSquared(g),m),i=Math.pow(g.distanceToSquared(h),m),l=Math.pow(h.distanceToSquared(f),m);i<1e-4&&(i=1),k<1e-4&&(k=i),l<1e-4&&(l=i),gc.initNonuniformCatmullRom(e.x,g.x,h.x,f.x,k,i,l),gd.initNonuniformCatmullRom(e.y,g.y,h.y,f.y,k,i,l),ge.initNonuniformCatmullRom(e.z,g.z,h.z,f.z,k,i,l)}else"catmullrom"===this.curveType&&(gc.initCatmullRom(e.x,g.x,h.x,f.x,this.tension),gd.initCatmullRom(e.y,g.y,h.y,f.y,this.tension),ge.initCatmullRom(e.z,g.z,h.z,f.z,this.tension));return n.set(gc.calc(j),gd.calc(j),ge.calc(j)),n}copy(a){super.copy(a),this.points=[];for(let b=0,c=a.points.length;b<c;b++){const d=a.points[b];this.points.push(d.clone())}return this.closed=a.closed,this.curveType=a.curveType,this.tension=a.tension,this}toJSON(){const a=super.toJSON();a.points=[];for(let b=0,c=this.points.length;b<c;b++){const d=this.points[b];a.points.push(d.toArray())}return a.closed=this.closed,a.curveType=this.curveType,a.tension=this.tension,a}fromJSON(b){super.fromJSON(b),this.points=[];for(let c=0,d=b.points.length;c<d;c++){const e=b.points[c];this.points.push(new a().fromArray(e))}return this.closed=b.closed,this.curveType=b.curveType,this.tension=b.tension,this}}function gf(a,g,b,c,h){const d=(c-g)*.5,e=(h-b)*.5,f=a*a;return(2*b-2*c+d+e)*(a*f)+(-3*b+3*c-2*d-e)*f+d*a+b}function gg(a,d,e,f){var b,c;return function(b,c){const a=1-b;return a*a*c}(a,d)+2*(1-(b=a))*b*e+(c=a)*c*f}function gh(a,d,e,f,g){var b,c;return function(b,c){const a=1-b;return a*a*a*c}(a,d)+function(a,c){const b=1-a;return 3*b*b*a*c}(a,e)+3*(1-(b=a))*b*b*f+(c=a)*c*c*g}ak.prototype.isCatmullRomCurve3=!0;class al extends o{constructor(a=new j,b=new j,c=new j,d=new j){super(),this.type="CubicBezierCurve",this.v0=a,this.v1=b,this.v2=c,this.v3=d}getPoint(a,g=new j){const b=g,c=this.v0,d=this.v1,e=this.v2,f=this.v3;return b.set(gh(a,c.x,d.x,e.x,f.x),gh(a,c.y,d.y,e.y,f.y)),b}copy(a){return super.copy(a),this.v0.copy(a.v0),this.v1.copy(a.v1),this.v2.copy(a.v2),this.v3.copy(a.v3),this}toJSON(){const a=super.toJSON();return a.v0=this.v0.toArray(),a.v1=this.v1.toArray(),a.v2=this.v2.toArray(),a.v3=this.v3.toArray(),a}fromJSON(a){return super.fromJSON(a),this.v0.fromArray(a.v0),this.v1.fromArray(a.v1),this.v2.fromArray(a.v2),this.v3.fromArray(a.v3),this}}al.prototype.isCubicBezierCurve=!0;class am extends o{constructor(b=new a,c=new a,d=new a,e=new a){super(),this.type="CubicBezierCurve3",this.v0=b,this.v1=c,this.v2=d,this.v3=e}getPoint(b,h=new a){const g=h,c=this.v0,d=this.v1,e=this.v2,f=this.v3;return g.set(gh(b,c.x,d.x,e.x,f.x),gh(b,c.y,d.y,e.y,f.y),gh(b,c.z,d.z,e.z,f.z)),g}copy(a){return super.copy(a),this.v0.copy(a.v0),this.v1.copy(a.v1),this.v2.copy(a.v2),this.v3.copy(a.v3),this}toJSON(){const a=super.toJSON();return a.v0=this.v0.toArray(),a.v1=this.v1.toArray(),a.v2=this.v2.toArray(),a.v3=this.v3.toArray(),a}fromJSON(a){return super.fromJSON(a),this.v0.fromArray(a.v0),this.v1.fromArray(a.v1),this.v2.fromArray(a.v2),this.v3.fromArray(a.v3),this}}am.prototype.isCubicBezierCurve3=!0;class an extends o{constructor(a=new j,b=new j){super(),this.type="LineCurve",this.v1=a,this.v2=b}getPoint(b,c=new j){const a=c;return 1===b?a.copy(this.v2):(a.copy(this.v2).sub(this.v1),a.multiplyScalar(b).add(this.v1)),a}getPointAt(a,b){return this.getPoint(a,b)}getTangent(c,b){const a=b||new j;return a.copy(this.v2).sub(this.v1).normalize(),a}copy(a){return super.copy(a),this.v1.copy(a.v1),this.v2.copy(a.v2),this}toJSON(){const a=super.toJSON();return a.v1=this.v1.toArray(),a.v2=this.v2.toArray(),a}fromJSON(a){return super.fromJSON(a),this.v1.fromArray(a.v1),this.v2.fromArray(a.v2),this}}an.prototype.isLineCurve=!0;class ao extends o{constructor(a=new j,b=new j,c=new j){super(),this.type="QuadraticBezierCurve",this.v0=a,this.v1=b,this.v2=c}getPoint(a,f=new j){const b=f,c=this.v0,d=this.v1,e=this.v2;return b.set(gg(a,c.x,d.x,e.x),gg(a,c.y,d.y,e.y)),b}copy(a){return super.copy(a),this.v0.copy(a.v0),this.v1.copy(a.v1),this.v2.copy(a.v2),this}toJSON(){const a=super.toJSON();return a.v0=this.v0.toArray(),a.v1=this.v1.toArray(),a.v2=this.v2.toArray(),a}fromJSON(a){return super.fromJSON(a),this.v0.fromArray(a.v0),this.v1.fromArray(a.v1),this.v2.fromArray(a.v2),this}}ao.prototype.isQuadraticBezierCurve=!0;class ap extends o{constructor(b=new a,c=new a,d=new a){super(),this.type="QuadraticBezierCurve3",this.v0=b,this.v1=c,this.v2=d}getPoint(b,g=new a){const f=g,c=this.v0,d=this.v1,e=this.v2;return f.set(gg(b,c.x,d.x,e.x),gg(b,c.y,d.y,e.y),gg(b,c.z,d.z,e.z)),f}copy(a){return super.copy(a),this.v0.copy(a.v0),this.v1.copy(a.v1),this.v2.copy(a.v2),this}toJSON(){const a=super.toJSON();return a.v0=this.v0.toArray(),a.v1=this.v1.toArray(),a.v2=this.v2.toArray(),a}fromJSON(a){return super.fromJSON(a),this.v0.fromArray(a.v0),this.v1.fromArray(a.v1),this.v2.fromArray(a.v2),this}}ap.prototype.isQuadraticBezierCurve3=!0;class aq extends o{constructor(a=[]){super(),this.type="SplineCurve",this.points=a}getPoint(k,l=new j){const c=l,a=this.points,d=(a.length-1)*k,b=Math.floor(d),e=d-b,f=a[0===b?b:b-1],g=a[b],h=a[b>a.length-2?a.length-1:b+1],i=a[b>a.length-3?a.length-1:b+2];return c.set(gf(e,f.x,g.x,h.x,i.x),gf(e,f.y,g.y,h.y,i.y)),c}copy(a){super.copy(a),this.points=[];for(let b=0,c=a.points.length;b<c;b++){const d=a.points[b];this.points.push(d.clone())}return this}toJSON(){const a=super.toJSON();a.points=[];for(let b=0,c=this.points.length;b<c;b++){const d=this.points[b];a.points.push(d.toArray())}return a}fromJSON(a){super.fromJSON(a),this.points=[];for(let b=0,c=a.points.length;b<c;b++){const d=a.points[b];this.points.push(new j().fromArray(d))}return this}}aq.prototype.isSplineCurve=!0;var gi=Object.freeze({__proto__:null,ArcCurve:aj,CatmullRomCurve3:ak,CubicBezierCurve:al,CubicBezierCurve3:am,EllipseCurve:S,LineCurve:an,LineCurve3:class extends o{constructor(b=new a,c=new a){super(),this.type="LineCurve3",this.isLineCurve3=!0,this.v1=b,this.v2=c}getPoint(c,d=new a){const b=d;return 1===c?b.copy(this.v2):(b.copy(this.v2).sub(this.v1),b.multiplyScalar(c).add(this.v1)),b}getPointAt(a,b){return this.getPoint(a,b)}copy(a){return super.copy(a),this.v1.copy(a.v1),this.v2.copy(a.v2),this}toJSON(){const a=super.toJSON();return a.v1=this.v1.toArray(),a.v2=this.v2.toArray(),a}fromJSON(a){return super.fromJSON(a),this.v1.fromArray(a.v1),this.v2.fromArray(a.v2),this}},QuadraticBezierCurve:ao,QuadraticBezierCurve3:ap,SplineCurve:aq});class a9 extends o{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(a){this.curves.push(a)}closePath(){const a=this.curves[0].getPoint(0),b=this.curves[this.curves.length-1].getPoint(1);a.equals(b)||this.curves.push(new an(b,a))}getPoint(f,g){const c=f*this.getLength(),b=this.getCurveLengths();let a=0;for(;a<b.length;){if(b[a]>=c){const h=b[a]-c,d=this.curves[a],e=d.getLength(),i=0===e?0:1-h/e;return d.getPointAt(i,g)}a++}return null}getLength(){const a=this.getCurveLengths();return a[a.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const a=[];let c=0;for(let b=0,d=this.curves.length;b<d;b++)c+=this.curves[b].getLength(),a.push(c);return this.cacheLengths=a,a}getSpacedPoints(c=40){const a=[];for(let b=0;b<=c;b++)a.push(this.getPoint(b/c));return this.autoClose&&a.push(a[0]),a}getPoints(c=12){const b=[];let d;for(let e=0,h=this.curves;e<h.length;e++){const a=h[e],j=a&&a.isEllipseCurve?2*c:a&&(a.isLineCurve||a.isLineCurve3)?1:a&&a.isSplineCurve?c*a.points.length:c,i=a.getPoints(j);for(let f=0;f<i.length;f++){const g=i[f];d&&d.equals(g)||(b.push(g),d=g)}}return this.autoClose&&b.length>1&&!b[b.length-1].equals(b[0])&&b.push(b[0]),b}copy(a){super.copy(a),this.curves=[];for(let b=0,c=a.curves.length;b<c;b++){const d=a.curves[b];this.curves.push(d.clone())}return this.autoClose=a.autoClose,this}toJSON(){const a=super.toJSON();a.autoClose=this.autoClose,a.curves=[];for(let b=0,c=this.curves.length;b<c;b++){const d=this.curves[b];a.curves.push(d.toJSON())}return a}fromJSON(a){super.fromJSON(a),this.autoClose=a.autoClose,this.curves=[];for(let b=0,d=a.curves.length;b<d;b++){const c=a.curves[b];this.curves.push(new gi[c.type]().fromJSON(c))}return this}}class ar extends a9{constructor(a){super(),this.type="Path",this.currentPoint=new j,a&&this.setFromPoints(a)}setFromPoints(a){this.moveTo(a[0].x,a[0].y);for(let b=1,c=a.length;b<c;b++)this.lineTo(a[b].x,a[b].y);return this}moveTo(a,b){return this.currentPoint.set(a,b),this}lineTo(a,b){const c=new an(this.currentPoint.clone(),new j(a,b));return this.curves.push(c),this.currentPoint.set(a,b),this}quadraticCurveTo(c,d,a,b){const e=new ao(this.currentPoint.clone(),new j(c,d),new j(a,b));return this.curves.push(e),this.currentPoint.set(a,b),this}bezierCurveTo(c,d,e,f,a,b){const g=new al(this.currentPoint.clone(),new j(c,d),new j(e,f),new j(a,b));return this.curves.push(g),this.currentPoint.set(a,b),this}splineThru(a){const b=[this.currentPoint.clone()].concat(a),c=new aq(b);return this.curves.push(c),this.currentPoint.copy(a[a.length-1]),this}arc(a,b,c,d,e,f){const g=this.currentPoint.x,h=this.currentPoint.y;return this.absarc(a+g,b+h,c,d,e,f),this}absarc(b,c,a,d,e,f){return this.absellipse(b,c,a,a,d,e,f),this}ellipse(a,b,c,d,e,f,g,h){const i=this.currentPoint.x,j=this.currentPoint.y;return this.absellipse(a+i,b+j,c,d,e,f,g,h),this}absellipse(c,d,e,f,g,h,i,j){const a=new S(c,d,e,f,g,h,i,j);if(this.curves.length>0){const b=a.getPoint(0);b.equals(this.currentPoint)||this.lineTo(b.x,b.y)}this.curves.push(a);const k=a.getPoint(1);return this.currentPoint.copy(k),this}copy(a){return super.copy(a),this.currentPoint.copy(a.currentPoint),this}toJSON(){const a=super.toJSON();return a.currentPoint=this.currentPoint.toArray(),a}fromJSON(a){return super.fromJSON(a),this.currentPoint.fromArray(a.currentPoint),this}}class U extends ar{constructor(a){super(a),this.uuid=az(),this.type="Shape",this.holes=[]}getPointsHoles(c){const b=[];for(let a=0,d=this.holes.length;a<d;a++)b[a]=this.holes[a].getPoints(c);return b}extractPoints(a){return{shape:this.getPoints(a),holes:this.getPointsHoles(a)}}copy(a){super.copy(a),this.holes=[];for(let b=0,c=a.holes.length;b<c;b++){const d=a.holes[b];this.holes.push(d.clone())}return this}toJSON(){const a=super.toJSON();a.uuid=this.uuid,a.holes=[];for(let b=0,c=this.holes.length;b<c;b++){const d=this.holes[b];a.holes.push(d.toJSON())}return a}fromJSON(a){super.fromJSON(a),this.uuid=a.uuid,this.holes=[];for(let b=0,c=a.holes.length;b<c;b++){const d=a.holes[b];this.holes.push(new ar().fromJSON(d))}return this}}const gj={triangulate:function(a,h,b=2){const n=h&&h.length,o=n?h[0]*b:a.length;let c=gk(a,0,o,b,!0);const m=[];if(!c||c.next===c.prev)return m;let d,e,i,j,f,g,k;if(n&&(c=gr(a,h,c,b)),a.length>80*b){d=i=a[0],e=j=a[1];for(let l=b;l<o;l+=b)f=a[l],g=a[l+1],f<d&&(d=f),g<e&&(e=g),f>i&&(i=f),g>j&&(j=g);k=0!==(k=Math.max(i-d,j-e))?1/k:0}return gm(c,m,b,d,e,k),m}};function gk(c,e,f,d,g){let a,b;if(g===gM(c,e,f,d)>0)for(a=e;a<f;a+=d)b=gJ(a,c[a],c[a+1],b);else for(a=f-d;a>=e;a-=d)b=gJ(a,c[a],c[a+1],b);return b&&gB(b,b.next)&&(gK(b),b=b.next),b}function gl(c,b){if(!c)return c;b||(b=c);let a=c,d;do if(d=!1,!a.steiner&&(gB(a,a.next)||0===gA(a.prev,a,a.next))){if(gK(a),(a=b=a.prev)===a.next)break;d=!0}else a=a.next;while(d||a!==b)return b}function gm(a,b,c,e,f,d,h){if(!a)return;!h&&d&&gw(a,e,f,d);let i=a,j,g;for(;a.prev!==a.next;){if(j=a.prev,g=a.next,d?go(a,e,f,d):gn(a)){b.push(j.i/c),b.push(a.i/c),b.push(g.i/c),gK(a),a=g.next,i=g.next;continue}if((a=g)===i){h?1===h?gm(a=gp(gl(a),b,c),b,c,e,f,d,2):2===h&&gq(a,b,c,e,f,d):gm(gl(a),b,c,e,f,d,1);break}}}function gn(d){const e=d.prev,f=d,g=d.next;if(gA(e,f,g)>=0)return!1;let a=d.next.next;for(;a!==d.prev;){var h,i,j,k,l,m,b,c;if(h=e.x,i=e.y,j=f.x,k=f.y,l=g.x,m=g.y,b=a.x,c=a.y,(l-b)*(i-c)-(h-b)*(m-c)>=0&&(h-b)*(k-c)-(j-b)*(i-c)>=0&&(j-b)*(m-c)-(l-b)*(k-c)>=0&&gA(a.prev,a,a.next)>=0)return!1;a=a.next}return!0}function go(j,Q,R,S){var f,g,T,U,V,h,i,W,X,Y,s,t,u,v,w,x,k,l,y,z,A,B,C,D,m,n,E,F,G,H,I,J,o,p,K,L,M,N,O,P,q,r;const d=j.prev,e=j,a=j.next;if(gA(d,e,a)>=0)return!1;const _=d.x<e.x?d.x<a.x?d.x:a.x:e.x<a.x?e.x:a.x,aa=d.y<e.y?d.y<a.y?d.y:a.y:e.y<a.y?e.y:a.y,ab=d.x>e.x?d.x>a.x?d.x:a.x:e.x>a.x?e.x:a.x,ac=d.y>e.y?d.y>a.y?d.y:a.y:e.y>a.y?e.y:a.y,Z=(f=_,g=aa,T=Q,U=R,f=32767*(f-T)*(V=S),g=32767*(g-U)*V,f=(f|f<<8)&16711935,f=(f|f<<4)&252645135,f=(f|f<<2)&858993459,f=(f|f<<1)&1431655765,g=(g|g<<8)&16711935,g=(g|g<<4)&252645135,g=(g|g<<2)&858993459,g=(g|g<<1)&1431655765,f|g<<1),$=(h=ab,i=ac,W=Q,X=R,h=32767*(h-W)*(Y=S),i=32767*(i-X)*Y,h=(h|h<<8)&16711935,h=(h|h<<4)&252645135,h=(h|h<<2)&858993459,h=(h|h<<1)&1431655765,i=(i|i<<8)&16711935,i=(i|i<<4)&252645135,i=(i|i<<2)&858993459,i=(i|i<<1)&1431655765,h|i<<1);let b=j.prevZ,c=j.nextZ;for(;b&&b.z>=Z&&c&&c.z<=$;){if(b!==j.prev&&b!==j.next&&(s=d.x,t=d.y,u=e.x,v=e.y,w=a.x,x=a.y,k=b.x,l=b.y,(w-k)*(t-l)-(s-k)*(x-l)>=0&&(s-k)*(v-l)-(u-k)*(t-l)>=0&&(u-k)*(x-l)-(w-k)*(v-l)>=0)&&gA(b.prev,b,b.next)>=0)return!1;if(b=b.prevZ,c!==j.prev&&c!==j.next&&(y=d.x,z=d.y,A=e.x,B=e.y,C=a.x,D=a.y,m=c.x,n=c.y,(C-m)*(z-n)-(y-m)*(D-n)>=0&&(y-m)*(B-n)-(A-m)*(z-n)>=0&&(A-m)*(D-n)-(C-m)*(B-n)>=0)&&gA(c.prev,c,c.next)>=0)return!1;c=c.nextZ}for(;b&&b.z>=Z;){if(b!==j.prev&&b!==j.next&&(E=d.x,F=d.y,G=e.x,H=e.y,I=a.x,J=a.y,o=b.x,p=b.y,(I-o)*(F-p)-(E-o)*(J-p)>=0&&(E-o)*(H-p)-(G-o)*(F-p)>=0&&(G-o)*(J-p)-(I-o)*(H-p)>=0)&&gA(b.prev,b,b.next)>=0)return!1;b=b.prevZ}for(;c&&c.z<=$;){if(c!==j.prev&&c!==j.next&&(K=d.x,L=d.y,M=e.x,N=e.y,O=a.x,P=a.y,q=c.x,r=c.y,(O-q)*(L-r)-(K-q)*(P-r)>=0&&(K-q)*(N-r)-(M-q)*(L-r)>=0&&(M-q)*(P-r)-(O-q)*(N-r)>=0)&&gA(c.prev,c,c.next)>=0)return!1;c=c.nextZ}return!0}function gp(d,e,f){let a=d;do{const c=a.prev,b=a.next.next;!gB(c,b)&&gC(c,a,a.next,b)&&gG(c,b)&&gG(b,c)&&(e.push(c.i/f),e.push(a.i/f),e.push(b.i/f),gK(a),gK(a.next),a=d=b),a=a.next}while(a!==d)return gl(a)}function gq(d,e,f,g,h,i){let a=d;do{let b=a.next.next;for(;b!==a.prev;){if(a.i!==b.i&&gz(a,b)){let c=gI(a,b);a=gl(a,a.next),c=gl(c,c.next),gm(a,e,f,g,h,i),gm(c,e,f,g,h,i);return}b=b.next}a=a.next}while(a!==d)}function gr(h,e,b,f){const d=[];let a,g,i,j,c;for(a=0,g=e.length;a<g;a++)i=e[a]*f,j=a<g-1?e[a+1]*f:h.length,c=gk(h,i,j,f,!1),c===c.next&&(c.steiner=!0),d.push(gy(c));for(d.sort(gs),a=0;a<d.length;a++)gt(d[a],b),b=gl(b,b.next);return b}function gs(a,b){return a.x-b.x}function gt(b,a){if(a=gu(b,a)){const c=gI(a,b);gl(a,a.next),gl(c,c.next)}}function gu(j,s){let a=s;const d=j.x,c=j.y;let g=-1/0,b;do{if(c<=a.y&&c>=a.next.y&&a.next.y!==a.y){const h=a.x+(c-a.y)*(a.next.x-a.x)/(a.next.y-a.y);if(h<=d&&h>g){if(g=h,h===d){if(c===a.y)return a;if(c===a.next.y)return a.next}b=a.x<a.next.x?a:a.next}}a=a.next}while(a!==s)if(!b)return null;if(d===g)return b;const u=b,t=b.x,k=b.y;let l=1/0,i;a=b;do{var m,n,o,p,q,r,e,f;d>=a.x&&a.x>=t&&d!==a.x&&(m=c<k?d:g,n=c,o=t,p=k,q=c<k?g:d,r=c,e=a.x,f=a.y,(q-e)*(n-f)-(m-e)*(r-f)>=0&&(m-e)*(p-f)-(o-e)*(n-f)>=0&&(o-e)*(r-f)-(q-e)*(p-f)>=0)&&(i=Math.abs(c-a.y)/(d-a.x),gG(a,j)&&(i<l||i===l&&(a.x>b.x||a.x===b.x&&gv(b,a)))&&(b=a,l=i)),a=a.next}while(a!==u)return b}function gv(a,b){return 0>gA(a.prev,a,b.prev)&&0>gA(b.next,a,a.next)}function gw(e,h,i,j){let c=e;do{var a,b,f,g,d;null===c.z&&(c.z=(a=c.x,b=c.y,f=h,g=i,d=j,a=32767*(a-f)*d,b=32767*(b-g)*d,a=(a|a<<8)&16711935,a=(a|a<<4)&252645135,a=(a|a<<2)&858993459,a=(a|a<<1)&1431655765,b=(b|b<<8)&16711935,b=(b|b<<4)&252645135,b=(b|b<<2)&858993459,b=(b|b<<1)&1431655765,a|b<<1)),c.prevZ=c.prev,c.nextZ=c.next,c=c.next}while(c!==e)c.prevZ.nextZ=null,c.prevZ=null,gx(c)}function gx(f){let h,b,a,c,d,i,e,g,j=1;do{for(b=f,f=null,d=null,i=0;b;){for(i++,a=b,e=0,h=0;h<j&&(e++,a=a.nextZ);h++);for(g=j;e>0||g>0&&a;)0!==e&&(0===g||!a||b.z<=a.z)?(c=b,b=b.nextZ,e--):(c=a,a=a.nextZ,g--),d?d.nextZ=c:f=c,c.prevZ=d,d=c;b=a}d.nextZ=null,j*=2}while(i>1)return f}function gy(c){let a=c,b=c;do(a.x<b.x||a.x===b.x&&a.y<b.y)&&(b=a),a=a.next;while(a!==c)return b}function gz(a,b){return a.next.i!==b.i&&a.prev.i!==b.i&&!gF(a,b)&&(gG(a,b)&&gG(b,a)&&gH(a,b)&&(gA(a.prev,a,b.prev)||gA(a,b.prev,b))||gB(a,b)&&gA(a.prev,a,a.next)>0&&gA(b.prev,b,b.next)>0)}function gA(b,a,c){return(a.y-b.y)*(c.x-a.x)-(a.x-b.x)*(c.y-a.y)}function gB(a,b){return a.x===b.x&&a.y===b.y}function gC(a,b,c,d){const e=gE(gA(a,b,c)),f=gE(gA(a,b,d)),g=gE(gA(c,d,a)),h=gE(gA(c,d,b));return e!==f&&g!==h|| !!(0===e&&gD(a,c,b))|| !!(0===f&&gD(a,d,b))|| !!(0===g&&gD(c,a,d))||!!(0===h&&gD(c,b,d))}function gD(a,b,c){return b.x<=Math.max(a.x,c.x)&&b.x>=Math.min(a.x,c.x)&&b.y<=Math.max(a.y,c.y)&&b.y>=Math.min(a.y,c.y)}function gE(a){return a>0?1:a<0?-1:0}function gF(b,c){let a=b;do{if(a.i!==b.i&&a.next.i!==b.i&&a.i!==c.i&&a.next.i!==c.i&&gC(a,a.next,b,c))return!0;a=a.next}while(a!==b)return!1}function gG(a,b){return 0>gA(a.prev,a,a.next)?gA(a,b,a.next)>=0&&gA(a,a.prev,b)>=0:0>gA(a,b,a.prev)||0>gA(a,a.next,b)}function gH(b,e){let a=b,c=!1;const f=(b.x+e.x)/2,d=(b.y+e.y)/2;do a.y>d!=a.next.y>d&&a.next.y!==a.y&&f<(a.next.x-a.x)*(d-a.y)/(a.next.y-a.y)+a.x&&(c=!c),a=a.next;while(a!==b)return c}function gI(a,b){const d=new gL(a.i,a.x,a.y),c=new gL(b.i,b.x,b.y),e=a.next,f=b.prev;return a.next=b,b.prev=a,d.next=e,e.prev=d,c.next=d,d.prev=c,f.next=c,c.prev=f,c}function gJ(c,d,e,b){const a=new gL(c,d,e);return b?(a.next=b.next,a.prev=b,b.next.prev=a,b.next=a):(a.prev=a,a.next=a),a}function gK(a){a.next.prev=a.prev,a.prev.next=a.next,a.prevZ&&(a.prevZ.nextZ=a.nextZ),a.nextZ&&(a.nextZ.prevZ=a.prevZ)}function gL(a,b,c){this.i=a,this.x=b,this.y=c,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function gM(b,g,d,e){let f=0;for(let a=g,c=d-e;a<d;a+=e)f+=(b[c]-b[a])*(b[a+1]+b[c+1]),c=a;return f}class gN{static area(a){const d=a.length;let e=0;for(let c=d-1,b=0;b<d;c=b++)e+=a[c].x*a[b].y-a[b].x*a[c].y;return .5*e}static isClockWise(a){return 0>gN.area(a)}static triangulateShape(d,a){const e=[],f=[],g=[];gO(d),gP(e,d);let h=d.length;a.forEach(gO);for(let b=0;b<a.length;b++)f.push(h),h+=a[b].length,gP(e,a[b]);const i=gj.triangulate(e,f);for(let c=0;c<i.length;c+=3)g.push(i.slice(c,c+3));return g}}function gO(a){const b=a.length;b>2&&a[b-1].equals(a[0])&&a.pop()}function gP(c,b){for(let a=0;a<b.length;a++)c.push(b[a].x),c.push(b[a].y)}class V extends f{constructor(b=new U([new j(.5,.5),new j(-0.5,.5),new j(-0.5,-0.5),new j(.5,-0.5)]),d={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:b,options:d},b=Array.isArray(b)?b:[b];const i=this,e=[],f=[];for(let c=0,g=b.length;c<g;c++){const h=b[c];k(h)}function k(aq){const aE=[],ar=void 0!==d.curveSegments?d.curveSegments:12,l=void 0!==d.steps?d.steps:1;let x=void 0!==d.depth?d.depth:1,y=void 0===d.bevelEnabled||d.bevelEnabled,z=void 0!==d.bevelThickness?d.bevelThickness:.2,A=void 0!==d.bevelSize?d.bevelSize:z-.1,B=void 0!==d.bevelOffset?d.bevelOffset:0,o=void 0!==d.bevelSegments?d.bevelSegments:3;const W=d.extrudePath,aF=void 0!==d.UVGenerator?d.UVGenerator:gQ;void 0!==d.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),x=d.amount);let p,C=!1,q,r,s,g;W&&(p=W.getSpacedPoints(l),C=!0,y=!1,q=W.computeFrenetFrames(l,!1),r=new a,s=new a,g=new a),y||(o=0,z=0,A=0,B=0);const ab=aq.extractPoints(ar);let b=ab.shape;const c=ab.holes,as=!gN.isClockWise(b);if(as){b=b.reverse();for(let D=0,at=c.length;D<at;D++){const ac=c[D];gN.isClockWise(ac)&&(c[D]=ac.reverse())}}const au=gN.triangulateShape(b,c),h=b;for(let X=0,av=c.length;X<av;X++){const aw=c[X];b=b.concat(aw)}function m(b,a,c){return a||console.error("THREE.ExtrudeGeometry: vec does not exist"),a.clone().multiplyScalar(c).add(b)}const ad=b.length,aG=au.length;function ae(g,i,k){let d,e,h;const a=g.x-i.x,b=g.y-i.y,c=k.x-g.x,f=k.y-g.y,m=a*a+b*b,t=a*f-b*c;if(Math.abs(t)>Number.EPSILON){const n=Math.sqrt(m),o=Math.sqrt(c*c+f*f),p=i.x-b/n,q=i.y+a/n,u=k.x-f/o,v=k.y+c/o,r=((u-p)*f-(v-q)*c)/(a*f-b*c);d=p+a*r-g.x,e=q+b*r-g.y;const s=d*d+e*e;if(s<=2)return new j(d,e);h=Math.sqrt(s/2)}else{let l=!1;a>Number.EPSILON?c>Number.EPSILON&&(l=!0):a< -Number.EPSILON?c< -Number.EPSILON&&(l=!0):Math.sign(b)===Math.sign(f)&&(l=!0),l?(d=-b,e=a,h=Math.sqrt(m)):(d=a,e=b,h=Math.sqrt(m/2))}return new j(d/h,e/h)}const E=[];for(let t=0,F=h.length,G=F-1,H=t+1;t<F;t++,G++,H++)G===F&&(G=0),H===F&&(H=0),E[t]=ae(h[t],h[G],h[H]);const Y=[];let k,I=E.concat();for(let Z=0,ax=c.length;Z<ax;Z++){const J=c[Z];k=[];for(let u=0,K=J.length,L=K-1,M=u+1;u<K;u++,L++,M++)L===K&&(L=0),M===K&&(M=0),k[u]=ae(J[u],J[L],J[M]);Y.push(k),I=I.concat(k)}for(let $=0;$<o;$++){const af=$/o,ag=z*Math.cos(af*Math.PI/2),ah=A*Math.sin(af*Math.PI/2)+B;for(let N=0,ay=h.length;N<ay;N++){const ai=m(h[N],E[N],ah);aI(ai.x,ai.y,-ag)}for(let O=0,az=c.length;O<az;O++){const aj=c[O];k=Y[O];for(let P=0,aA=aj.length;P<aA;P++){const ak=m(aj[P],k[P],ah);aI(ak.x,ak.y,-ag)}}}const al=A+B;for(let v=0;v<ad;v++){const Q=y?m(b[v],I[v],al):b[v];C?(s.copy(q.normals[0]).multiplyScalar(Q.x),r.copy(q.binormals[0]).multiplyScalar(Q.y),g.copy(p[0]).add(s).add(r),aI(g.x,g.y,g.z)):aI(Q.x,Q.y,0)}for(let n=1;n<=l;n++)for(let w=0;w<ad;w++){const R=y?m(b[w],I[w],al):b[w];C?(s.copy(q.normals[n]).multiplyScalar(R.x),r.copy(q.binormals[n]).multiplyScalar(R.y),g.copy(p[n]).add(s).add(r),aI(g.x,g.y,g.z)):aI(R.x,R.y,x/l*n)}for(let _=o-1;_>=0;_--){const am=_/o,aa=z*Math.cos(am*Math.PI/2),an=A*Math.sin(am*Math.PI/2)+B;for(let S=0,aB=h.length;S<aB;S++){const ao=m(h[S],E[S],an);aI(ao.x,ao.y,x+aa)}for(let T=0,aC=c.length;T<aC;T++){const ap=c[T];k=Y[T];for(let U=0,aD=ap.length;U<aD;U++){const V=m(ap[U],k[U],an);C?aI(V.x,V.y+p[l-1].y,p[l-1].x+aa):aI(V.x,V.y,x+aa)}}}function aH(e,a){let d=e.length;for(;--d>=0;){const f=d;let b=d-1;b<0&&(b=e.length-1);for(let c=0,i=l+2*o;c<i;c++){const g=ad*c,h=ad*(c+1),j=a+f+g,k=a+b+g,m=a+b+h,n=a+f+h;aK(j,k,m,n)}}}function aI(a,b,c){aE.push(a),aE.push(b),aE.push(c)}function aJ(c,d,f){aL(c),aL(d),aL(f);const a=e.length/3,b=aF.generateTopUV(i,e,a-3,a-2,a-1);aM(b[0]),aM(b[1]),aM(b[2])}function aK(f,c,g,d){aL(f),aL(c),aL(d),aL(c),aL(g),aL(d);const b=e.length/3,a=aF.generateSideWallUV(i,e,b-6,b-3,b-2,b-1);aM(a[0]),aM(a[1]),aM(a[3]),aM(a[1]),aM(a[2]),aM(a[3])}function aL(a){e.push(aE[3*a+0]),e.push(aE[3*a+1]),e.push(aE[3*a+2])}function aM(a){f.push(a.x),f.push(a.y)}(function(){const m=e.length/3;if(y){let n=0,a=ad*n;for(let b=0;b<aG;b++){const c=au[b];aJ(c[2]+a,c[1]+a,c[0]+a)}a=ad*(n=l+2*o);for(let d=0;d<aG;d++){const f=au[d];aJ(f[0]+a,f[1]+a,f[2]+a)}}else{for(let g=0;g<aG;g++){const h=au[g];aJ(h[2],h[1],h[0])}for(let j=0;j<aG;j++){const k=au[j];aJ(k[0]+ad*l,k[1]+ad*l,k[2]+ad*l)}}i.addGroup(m,e.length/3-m,0)})(),function(){const d=e.length/3;let a=0;aH(h,a),a+=h.length;for(let b=0,g=c.length;b<g;b++){const f=c[b];aH(f,a),a+=f.length}i.addGroup(d,e.length/3-d,1)}()}this.setAttribute("position",new c1(e,3)),this.setAttribute("uv",new c1(f,2)),this.computeVertexNormals()}toJSON(){const a=super.toJSON(),b=this.parameters.shapes,c=this.parameters.options;return gR(b,c,a)}static fromJSON(a,e){const d=[];for(let b=0,f=a.shapes.length;b<f;b++){const g=e[a.shapes[b]];d.push(g)}const c=a.options.extrudePath;return void 0!==c&&(a.options.extrudePath=new gi[c.type]().fromJSON(c)),new V(d,a.options)}}const gQ={generateTopUV:function(l,a,b,c,d){const e=a[3*b],f=a[3*b+1],g=a[3*c],h=a[3*c+1],i=a[3*d],k=a[3*d+1];return[new j(e,f),new j(g,h),new j(i,k)]},generateSideWallUV:function(s,a,b,c,d,e){const f=a[3*b],g=a[3*b+1],h=a[3*b+2],i=a[3*c],k=a[3*c+1],l=a[3*c+2],o=a[3*d],p=a[3*d+1],m=a[3*d+2],q=a[3*e],r=a[3*e+1],n=a[3*e+2];return Math.abs(g-k)<Math.abs(f-i)?[new j(f,1-h),new j(i,1-l),new j(o,1-m),new j(q,1-n)]:[new j(g,1-h),new j(k,1-l),new j(p,1-m),new j(r,1-n)]}};function gR(b,d,a){if(a.shapes=[],Array.isArray(b))for(let c=0,e=b.length;c<e;c++){const f=b[c];a.shapes.push(f.uuid)}else a.shapes.push(b.uuid);return void 0!==d.extrudePath&&(a.options.extrudePath=d.extrudePath.toJSON()),a}class gS extends M{constructor(b=1,c=0){const a=(1+Math.sqrt(5))/2;super([-1,a,0,1,a,0,-1,-a,0,1,-a,0,0,-1,a,0,1,a,0,-1,-a,0,1,-a,a,0,-1,a,0,1,-a,0,-1,-a,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],b,c),this.type="IcosahedronGeometry",this.parameters={radius:b,detail:c}}static fromJSON(a){return new gS(a.radius,a.detail)}}class gT extends f{constructor(c=[new j(0,.5),new j(.5,0),new j(0,-0.5)],e=12,t=0,i=2*Math.PI){super(),this.type="LatheGeometry",this.parameters={points:c,segments:e,phiStart:t,phiLength:i},e=Math.floor(e),i=aA(i,0,2*Math.PI);const q=[],u=[],v=[],A=1/e,f=new a,k=new j;for(let l=0;l<=e;l++){const w=t+l*A*i,B=Math.sin(w),C=Math.cos(w);for(let g=0;g<=c.length-1;g++)f.x=c[g].x*B,f.y=c[g].y,f.z=c[g].x*C,u.push(f.x,f.y,f.z),k.x=l/e,k.y=g/(c.length-1),v.push(k.x,k.y)}for(let r=0;r<e;r++)for(let s=0;s<c.length-1;s++){const m=s+r*c.length,D=m,x=m+c.length,E=m+c.length+1,y=m+1;q.push(D,x,y),q.push(x,E,y)}if(this.setIndex(q),this.setAttribute("position",new c1(u,3)),this.setAttribute("uv",new c1(v,2)),this.computeVertexNormals(),i===2*Math.PI){const d=this.attributes.normal.array,n=new a,o=new a,p=new a,h=e*c.length*3;for(let z=0,b=0;z<c.length;z++,b+=3)n.x=d[b+0],n.y=d[b+1],n.z=d[b+2],o.x=d[h+b+0],o.y=d[h+b+1],o.z=d[h+b+2],p.addVectors(n,o).normalize(),d[b+0]=d[h+b+0]=p.x,d[b+1]=d[h+b+1]=p.y,d[b+2]=d[h+b+2]=p.z}}static fromJSON(a){return new gT(a.points,a.segments,a.phiStart,a.phiLength)}}class gU extends M{constructor(a=1,b=0){super([1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],a,b),this.type="OctahedronGeometry",this.parameters={radius:a,detail:b}}static fromJSON(a){return new gU(a.radius,a.detail)}}class gV extends f{constructor(h=.5,e=1,b=8,d=1,o=0,p=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:h,outerRadius:e,thetaSegments:b,phiSegments:d,thetaStart:o,thetaLength:p},b=Math.max(3,b),d=Math.max(1,d);const i=[],q=[],r=[],s=[];let k=h;const x=(e-h)/d,c=new a,f=new j;for(let t=0;t<=d;t++){for(let l=0;l<=b;l++){const u=o+l/b*p;c.x=k*Math.cos(u),c.y=k*Math.sin(u),q.push(c.x,c.y,c.z),r.push(0,0,1),f.x=(c.x/e+1)/2,f.y=(c.y/e+1)/2,s.push(f.x,f.y)}k+=x}for(let m=0;m<d;m++){const y=m*(b+1);for(let n=0;n<b;n++){const g=n+y,z=g,v=g+b+1,A=g+b+2,w=g+1;i.push(z,v,w),i.push(v,A,w)}}this.setIndex(i),this.setAttribute("position",new c1(q,3)),this.setAttribute("normal",new c1(r,3)),this.setAttribute("uv",new c1(s,2))}static fromJSON(a){return new gV(a.innerRadius,a.outerRadius,a.thetaSegments,a.phiSegments,a.thetaStart,a.thetaLength)}}class gW extends f{constructor(a=new U([new j(0,.5),new j(-0.5,-0.5),new j(.5,-0.5)]),e=12){super(),this.type="ShapeGeometry",this.parameters={shapes:a,curveSegments:e};const f=[],g=[],h=[],i=[];let d=0,c=0;if(!1===Array.isArray(a))k(a);else for(let b=0;b<a.length;b++)k(a[b]),this.addGroup(d,c,b),d+=c,c=0;function k(s){const k=g.length/3,p=s.extractPoints(e);let a=p.shape;const b=p.holes;!1===gN.isClockWise(a)&&(a=a.reverse());for(let d=0,t=b.length;d<t;d++){const q=b[d];!0===gN.isClockWise(q)&&(b[d]=q.reverse())}const r=gN.triangulateShape(a,b);for(let l=0,u=b.length;l<u;l++){const v=b[l];a=a.concat(v)}for(let m=0,w=a.length;m<w;m++){const j=a[m];g.push(j.x,j.y,0),h.push(0,0,1),i.push(j.x,j.y)}for(let n=0,x=r.length;n<x;n++){const o=r[n],y=o[0]+k,z=o[1]+k,A=o[2]+k;f.push(y,z,A),c+=3}}this.setIndex(f),this.setAttribute("position",new c1(g,3)),this.setAttribute("normal",new c1(h,3)),this.setAttribute("uv",new c1(i,2))}toJSON(){const a=super.toJSON(),b=this.parameters.shapes;return gX(b,a)}static fromJSON(a,d){const c=[];for(let b=0,e=a.shapes.length;b<e;b++){const f=d[a.shapes[b]];c.push(f)}return new gW(c,a.curveSegments)}}function gX(a,b){if(b.shapes=[],Array.isArray(a))for(let c=0,d=a.length;c<d;c++){const e=a[c];b.shapes.push(e.uuid)}else b.shapes.push(a.uuid);return b}class gY extends f{constructor(k=1,b=32,c=16,n=0,o=2*Math.PI,e=0,h=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:k,widthSegments:b,heightSegments:c,phiStart:n,phiLength:o,thetaStart:e,thetaLength:h},b=Math.max(3,Math.floor(b)),c=Math.max(2,Math.floor(c));const t=Math.min(e+h,Math.PI);let A=0;const i=[],f=new a,l=new a,p=[],u=[],v=[],w=[];for(let j=0;j<=c;j++){const x=[],m=j/c;let q=0;0==j&&0==e?q=.5/b:j==c&&t==Math.PI&&(q=-0.5/b);for(let r=0;r<=b;r++){const s=r/b;f.x=-k*Math.cos(n+s*o)*Math.sin(e+m*h),f.y=k*Math.cos(e+m*h),f.z=k*Math.sin(n+s*o)*Math.sin(e+m*h),u.push(f.x,f.y,f.z),l.copy(f).normalize(),v.push(l.x,l.y,l.z),w.push(s+q,1-m),x.push(A++)}i.push(x)}for(let d=0;d<c;d++)for(let g=0;g<b;g++){const B=i[d][g+1],y=i[d][g],C=i[d+1][g],z=i[d+1][g+1];(0!==d||e>0)&&p.push(B,y,z),(d!==c-1||t<Math.PI)&&p.push(y,C,z)}this.setIndex(p),this.setAttribute("position",new c1(u,3)),this.setAttribute("normal",new c1(v,3)),this.setAttribute("uv",new c1(w,2))}static fromJSON(a){return new gY(a.radius,a.widthSegments,a.heightSegments,a.phiStart,a.phiLength,a.thetaStart,a.thetaLength)}}class gZ extends M{constructor(a=1,b=0){super([1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],a,b),this.type="TetrahedronGeometry",this.parameters={radius:a,detail:b}}static fromJSON(a){return new gZ(a.radius,a.detail)}}class g$ extends f{constructor(g=1,h=.4,c=8,b=6,q=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:g,tube:h,radialSegments:c,tubularSegments:b,arc:q},c=Math.floor(c),b=Math.floor(b);const m=[],r=[],s=[],n=[],o=new a,d=new a,i=new a;for(let j=0;j<=c;j++)for(let k=0;k<=b;k++){const l=k/b*q,p=j/c*Math.PI*2;d.x=(g+h*Math.cos(p))*Math.cos(l),d.y=(g+h*Math.cos(p))*Math.sin(l),d.z=h*Math.sin(p),r.push(d.x,d.y,d.z),o.x=g*Math.cos(l),o.y=g*Math.sin(l),i.subVectors(d,o).normalize(),s.push(i.x,i.y,i.z),n.push(k/b),n.push(j/c)}for(let e=1;e<=c;e++)for(let f=1;f<=b;f++){const v=(b+1)*e+f-1,t=(b+1)*(e-1)+f-1,w=(b+1)*(e-1)+f,u=(b+1)*e+f;m.push(v,t,u),m.push(t,w,u)}this.setIndex(m),this.setAttribute("position",new c1(r,3)),this.setAttribute("normal",new c1(s,3)),this.setAttribute("uv",new c1(n,2))}static fromJSON(a){return new g$(a.radius,a.tube,a.radialSegments,a.tubularSegments,a.arc)}}class g_ extends f{constructor(n=1,o=.4,c=64,b=8,j=2,p=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:n,tube:o,tubularSegments:c,radialSegments:b,p:j,q:p},c=Math.floor(c),b=Math.floor(b);const q=[],w=[],x=[],r=[],d=new a,k=new a,e=new a,s=new a,g=new a,t=new a,f=new a;for(let l=0;l<=c;++l){const y=l/c*j*Math.PI*2;E(y,j,p,n,e),E(y+.01,j,p,n,s),t.subVectors(s,e),f.addVectors(s,e),g.crossVectors(t,f),f.crossVectors(g,t),g.normalize(),f.normalize();for(let m=0;m<=b;++m){const z=m/b*Math.PI*2,u=-o*Math.cos(z),v=o*Math.sin(z);d.x=e.x+(u*f.x+v*g.x),d.y=e.y+(u*f.y+v*g.y),d.z=e.z+(u*f.z+v*g.z),w.push(d.x,d.y,d.z),k.subVectors(d,e).normalize(),x.push(k.x,k.y,k.z),r.push(l/c),r.push(m/b)}}for(let h=1;h<=c;h++)for(let i=1;i<=b;i++){const C=(b+1)*(h-1)+(i-1),A=(b+1)*h+(i-1),D=(b+1)*h+i,B=(b+1)*(h-1)+i;q.push(C,A,B),q.push(A,D,B)}function E(a,f,g,b,c){const d=g/f*a,e=Math.cos(d);c.x=b*(2+e)*.5*Math.cos(a),c.y=b*(2+e)*Math.sin(a)*.5,c.z=b*Math.sin(d)*.5}this.setIndex(q),this.setAttribute("position",new c1(w,3)),this.setAttribute("normal",new c1(x,3)),this.setAttribute("uv",new c1(r,2))}static fromJSON(a){return new g_(a.radius,a.tube,a.tubularSegments,a.radialSegments,a.p,a.q)}}class g0 extends f{constructor(c=new ap(new a(-1,-1,0),new a(-1,1,0),new a(1,1,0)),d=64,f=1,g=8,e=!1){super(),this.type="TubeGeometry",this.parameters={path:c,tubularSegments:d,radius:f,radialSegments:g,closed:e};const b=c.computeFrenetFrames(d,e);this.tangents=b.tangents,this.normals=b.normals,this.binormals=b.binormals;const m=new a,n=new a,o=new j;let p=new a;const h=[],i=[],k=[],l=[];function q(a){p=c.getPointAt(a/d,p);const e=b.normals[a],j=b.binormals[a];for(let k=0;k<=g;k++){const q=k/g*Math.PI*2,l=Math.sin(q),o=-Math.cos(q);n.x=o*e.x+l*j.x,n.y=o*e.y+l*j.y,n.z=o*e.z+l*j.z,n.normalize(),i.push(n.x,n.y,n.z),m.x=p.x+f*n.x,m.y=p.y+f*n.y,m.z=p.z+f*n.z,h.push(m.x,m.y,m.z)}}(function(){for(let a=0;a<d;a++)q(a);q(!1===e?d:0),function(){for(let a=0;a<=d;a++)for(let b=0;b<=g;b++)o.x=a/d,o.y=b/g,k.push(o.x,o.y)}(),function(){for(let a=1;a<=d;a++)for(let b=1;b<=g;b++){const f=(g+1)*(a-1)+(b-1),c=(g+1)*a+(b-1),h=(g+1)*a+b,e=(g+1)*(a-1)+b;l.push(f,c,e),l.push(c,h,e)}}()})(),this.setIndex(l),this.setAttribute("position",new c1(h,3)),this.setAttribute("normal",new c1(i,3)),this.setAttribute("uv",new c1(k,2))}toJSON(){const a=super.toJSON();return a.path=this.parameters.path.toJSON(),a}static fromJSON(a){return new g0(new gi[a.path.type]().fromJSON(a.path),a.tubularSegments,a.radius,a.radialSegments,a.closed)}}(class extends n{constructor(a){super(),this.type="ShadowMaterial",this.color=new g(0),this.transparent=!0,this.setValues(a)}copy(a){return super.copy(a),this.color.copy(a.color),this}}).prototype.isShadowMaterial=!0;class as extends n{constructor(a){super(),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new g(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new g(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=bN,this.normalScale=new j(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(a)}copy(a){return super.copy(a),this.defines={STANDARD:""},this.color.copy(a.color),this.roughness=a.roughness,this.metalness=a.metalness,this.map=a.map,this.lightMap=a.lightMap,this.lightMapIntensity=a.lightMapIntensity,this.aoMap=a.aoMap,this.aoMapIntensity=a.aoMapIntensity,this.emissive.copy(a.emissive),this.emissiveMap=a.emissiveMap,this.emissiveIntensity=a.emissiveIntensity,this.bumpMap=a.bumpMap,this.bumpScale=a.bumpScale,this.normalMap=a.normalMap,this.normalMapType=a.normalMapType,this.normalScale.copy(a.normalScale),this.displacementMap=a.displacementMap,this.displacementScale=a.displacementScale,this.displacementBias=a.displacementBias,this.roughnessMap=a.roughnessMap,this.metalnessMap=a.metalnessMap,this.alphaMap=a.alphaMap,this.envMap=a.envMap,this.envMapIntensity=a.envMapIntensity,this.refractionRatio=a.refractionRatio,this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this.wireframeLinecap=a.wireframeLinecap,this.wireframeLinejoin=a.wireframeLinejoin,this.flatShading=a.flatShading,this}}as.prototype.isMeshStandardMaterial=!0;class ba extends as{constructor(a){super(),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new j(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return aA(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(a){this.ior=(1+.4*a)/(1-.4*a)}}),this.sheenColor=new g(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=.01,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationColor=new g(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new g(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._transmission=0,this.setValues(a)}get sheen(){return this._sheen}set sheen(a){this._sheen>0!=a>0&&this.version++,this._sheen=a}get clearcoat(){return this._clearcoat}set clearcoat(a){this._clearcoat>0!=a>0&&this.version++,this._clearcoat=a}get transmission(){return this._transmission}set transmission(a){this._transmission>0!=a>0&&this.version++,this._transmission=a}copy(a){return super.copy(a),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=a.clearcoat,this.clearcoatMap=a.clearcoatMap,this.clearcoatRoughness=a.clearcoatRoughness,this.clearcoatRoughnessMap=a.clearcoatRoughnessMap,this.clearcoatNormalMap=a.clearcoatNormalMap,this.clearcoatNormalScale.copy(a.clearcoatNormalScale),this.ior=a.ior,this.sheen=a.sheen,this.sheenColor.copy(a.sheenColor),this.sheenColorMap=a.sheenColorMap,this.sheenRoughness=a.sheenRoughness,this.sheenRoughnessMap=a.sheenRoughnessMap,this.transmission=a.transmission,this.transmissionMap=a.transmissionMap,this.thickness=a.thickness,this.thicknessMap=a.thicknessMap,this.attenuationDistance=a.attenuationDistance,this.attenuationColor.copy(a.attenuationColor),this.specularIntensity=a.specularIntensity,this.specularIntensityMap=a.specularIntensityMap,this.specularColor.copy(a.specularColor),this.specularColorMap=a.specularColorMap,this}}ba.prototype.isMeshPhysicalMaterial=!0,(class extends n{constructor(a){super(),this.type="MeshPhongMaterial",this.color=new g(16777215),this.specular=new g(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new g(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=bN,this.normalScale=new j(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(a)}copy(a){return super.copy(a),this.color.copy(a.color),this.specular.copy(a.specular),this.shininess=a.shininess,this.map=a.map,this.lightMap=a.lightMap,this.lightMapIntensity=a.lightMapIntensity,this.aoMap=a.aoMap,this.aoMapIntensity=a.aoMapIntensity,this.emissive.copy(a.emissive),this.emissiveMap=a.emissiveMap,this.emissiveIntensity=a.emissiveIntensity,this.bumpMap=a.bumpMap,this.bumpScale=a.bumpScale,this.normalMap=a.normalMap,this.normalMapType=a.normalMapType,this.normalScale.copy(a.normalScale),this.displacementMap=a.displacementMap,this.displacementScale=a.displacementScale,this.displacementBias=a.displacementBias,this.specularMap=a.specularMap,this.alphaMap=a.alphaMap,this.envMap=a.envMap,this.combine=a.combine,this.reflectivity=a.reflectivity,this.refractionRatio=a.refractionRatio,this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this.wireframeLinecap=a.wireframeLinecap,this.wireframeLinejoin=a.wireframeLinejoin,this.flatShading=a.flatShading,this}}).prototype.isMeshPhongMaterial=!0,(class extends n{constructor(a){super(),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new g(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new g(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=bN,this.normalScale=new j(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(a)}copy(a){return super.copy(a),this.color.copy(a.color),this.map=a.map,this.gradientMap=a.gradientMap,this.lightMap=a.lightMap,this.lightMapIntensity=a.lightMapIntensity,this.aoMap=a.aoMap,this.aoMapIntensity=a.aoMapIntensity,this.emissive.copy(a.emissive),this.emissiveMap=a.emissiveMap,this.emissiveIntensity=a.emissiveIntensity,this.bumpMap=a.bumpMap,this.bumpScale=a.bumpScale,this.normalMap=a.normalMap,this.normalMapType=a.normalMapType,this.normalScale.copy(a.normalScale),this.displacementMap=a.displacementMap,this.displacementScale=a.displacementScale,this.displacementBias=a.displacementBias,this.alphaMap=a.alphaMap,this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this.wireframeLinecap=a.wireframeLinecap,this.wireframeLinejoin=a.wireframeLinejoin,this}}).prototype.isMeshToonMaterial=!0,(class extends n{constructor(a){super(),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=bN,this.normalScale=new j(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.flatShading=!1,this.setValues(a)}copy(a){return super.copy(a),this.bumpMap=a.bumpMap,this.bumpScale=a.bumpScale,this.normalMap=a.normalMap,this.normalMapType=a.normalMapType,this.normalScale.copy(a.normalScale),this.displacementMap=a.displacementMap,this.displacementScale=a.displacementScale,this.displacementBias=a.displacementBias,this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this.flatShading=a.flatShading,this}}).prototype.isMeshNormalMaterial=!0,(class extends n{constructor(a){super(),this.type="MeshLambertMaterial",this.color=new g(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new g(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(a)}copy(a){return super.copy(a),this.color.copy(a.color),this.map=a.map,this.lightMap=a.lightMap,this.lightMapIntensity=a.lightMapIntensity,this.aoMap=a.aoMap,this.aoMapIntensity=a.aoMapIntensity,this.emissive.copy(a.emissive),this.emissiveMap=a.emissiveMap,this.emissiveIntensity=a.emissiveIntensity,this.specularMap=a.specularMap,this.alphaMap=a.alphaMap,this.envMap=a.envMap,this.combine=a.combine,this.reflectivity=a.reflectivity,this.refractionRatio=a.refractionRatio,this.wireframe=a.wireframe,this.wireframeLinewidth=a.wireframeLinewidth,this.wireframeLinecap=a.wireframeLinecap,this.wireframeLinejoin=a.wireframeLinejoin,this}}).prototype.isMeshLambertMaterial=!0,(class extends n{constructor(a){super(),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new g(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=bN,this.normalScale=new j(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.setValues(a)}copy(a){return super.copy(a),this.defines={MATCAP:""},this.color.copy(a.color),this.matcap=a.matcap,this.map=a.map,this.bumpMap=a.bumpMap,this.bumpScale=a.bumpScale,this.normalMap=a.normalMap,this.normalMapType=a.normalMapType,this.normalScale.copy(a.normalScale),this.displacementMap=a.displacementMap,this.displacementScale=a.displacementScale,this.displacementBias=a.displacementBias,this.alphaMap=a.alphaMap,this.flatShading=a.flatShading,this}}).prototype.isMeshMatcapMaterial=!0,(class extends a3{constructor(a){super(),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(a)}copy(a){return super.copy(a),this.scale=a.scale,this.dashSize=a.dashSize,this.gapSize=a.gapSize,this}}).prototype.isLineDashedMaterial=!0;const g1={arraySlice:function(a,c,b){return g1.isTypedArray(a)?new a.constructor(a.subarray(c,void 0!==b?b:a.length)):a.slice(c,b)},convertArray:function(a,b,c){return a&&(c||a.constructor!==b)?"number"==typeof b.BYTES_PER_ELEMENT?new b(a):Array.prototype.slice.call(a):a},isTypedArray:function(a){return ArrayBuffer.isView(a)&&!(a instanceof DataView)},getKeyframeOrder:function(d){const c=d.length,b=new Array(c);for(let a=0;a!==c;++a)b[a]=a;return b.sort(function(a,b){return d[a]-d[b]}),b},sortedArray:function(a,c,h){const d=a.length,e=new a.constructor(d);for(let f=0,g=0;g!==d;++f){const i=h[f]*c;for(let b=0;b!==c;++b)e[g++]=a[i+b]}return e},flattenJSON:function(c,g,d,e){let f=1,a=c[0];for(;void 0!==a&& void 0===a[e];)a=c[f++];if(void 0===a)return;let b=a[e];if(void 0!==b)if(Array.isArray(b))do void 0!==(b=a[e])&&(g.push(a.time),d.push.apply(d,b)),a=c[f++];while(void 0!==a)else if(void 0!==b.toArray)do void 0!==(b=a[e])&&(g.push(a.time),b.toArray(d,d.length)),a=c[f++];while(void 0!==a)else do void 0!==(b=a[e])&&(g.push(a.time),d.push(b)),a=c[f++];while(void 0!==a)},subclip:function(n,o,p,q,r=30){const a=n.clone();a.name=o;const j=[];for(let e=0;e<a.tracks.length;++e){const b=a.tracks[e],k=b.getValueSize(),f=[],l=[];for(let c=0;c<b.times.length;++c){const m=b.times[c]*r;if(!(m<p)&&!(m>=q)){f.push(b.times[c]);for(let g=0;g<k;++g)l.push(b.values[c*k+g])}}0!==f.length&&(b.times=g1.convertArray(f,b.times.constructor),b.values=g1.convertArray(l,b.values.constructor),j.push(b))}a.tracks=j;let h=1/0;for(let d=0;d<a.tracks.length;++d)h>a.tracks[d].times[0]&&(h=a.tracks[d].times[0]);for(let i=0;i<a.tracks.length;++i)a.tracks[i].shift(-1*h);return a.resetDuration(),a},makeClipAdditive:function(f,u=0,q=f,i=30){i<=0&&(i=30);const v=q.tracks.length,j=u/i;for(let k=0;k<v;++k){const a=q.tracks[k],g=a.ValueTypeName;if("bool"===g||"string"===g)continue;const b=f.tracks.find(function(b){return b.name===a.name&&b.ValueTypeName===g});if(void 0===b)continue;let c=0;const e=a.getValueSize();a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(c=e/3);let l=0;const m=b.getValueSize();b.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(l=m/3);const r=a.times.length-1;let d;if(j<=a.times[0]){const w=c,x=e-c;d=g1.arraySlice(a.values,w,x)}else if(j>=a.times[r]){const s=r*e+c,y=s+e-c;d=g1.arraySlice(a.values,s,y)}else{const t=a.createInterpolant(),z=c,A=e-c;t.evaluate(j),d=g1.arraySlice(t.resultBuffer,z,A)}if("quaternion"===g){const B=new p().fromArray(d).normalize().conjugate();B.toArray(d)}const C=b.times.length;for(let n=0;n<C;++n){const o=n*m+l;if("quaternion"===g)p.multiplyQuaternionsFlat(b.values,o,d,0,b.values,o);else{const D=m-2*l;for(let h=0;h<D;++h)b.values[o+h]-=d[h]}}}return f.blendMode=2501,f}};class u{constructor(d,a,b,c){this.parameterPositions=d,this._cachedIndex=0,this.resultBuffer=void 0!==c?c:new a.constructor(b),this.sampleValues=a,this.valueSize=b,this.settings=null,this.DefaultSettings_={}}evaluate(c){const d=this.parameterPositions;let a=this._cachedIndex,e=d[a],b=d[a-1];validate_interval:{seek:{let f;linear_scan:{forward_scan:if(!(c<e)){for(let i=a+2;;){if(void 0===e){if(c<b)break forward_scan;return a=d.length,this._cachedIndex=a,this.afterEnd_(a-1,c,b)}if(a===i)break;if(b=e,c<(e=d[++a]))break seek}f=d.length;break linear_scan}if(!(c>=b)){const h=d[1];c<h&&(a=2,b=h);for(let j=a-2;;){if(void 0===b)return this._cachedIndex=0,this.beforeStart_(0,c,e);if(a===j)break;if(e=b,c>=(b=d[--a-1]))break seek}f=a,a=0;break linear_scan}break validate_interval}for(;a<f;){const g=a+f>>>1;c<d[g]?f=g:a=g+1}if(e=d[a],b=d[a-1],void 0===b)return this._cachedIndex=0,this.beforeStart_(0,c,e);if(void 0===e)return a=d.length,this._cachedIndex=a,this.afterEnd_(a-1,b,c)}this._cachedIndex=a,this.intervalChanged_(a,b,e)}return this.interpolate_(a,b,c,e)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(d){const b=this.resultBuffer,e=this.sampleValues,c=this.valueSize,f=d*c;for(let a=0;a!==c;++a)b[a]=e[f+a];return b}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}u.prototype.beforeStart_=u.prototype.copySampleValue_,u.prototype.afterEnd_=u.prototype.copySampleValue_;class g2 extends u{constructor(a,b,c,d){super(a,b,c,d),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:2400,endingEnd:2400}}intervalChanged_(c,d,e){const a=this.parameterPositions;let b=c-2,f=c+1,g=a[b],h=a[f];if(void 0===g)switch(this.getSettings_().endingStart){case 2401:b=c,g=2*d-e;break;case 2402:b=a.length-2,g=d+a[b]-a[b+1];break;default:b=c,g=e}if(void 0===h)switch(this.getSettings_().endingEnd){case 2401:f=c,h=2*e-d;break;case 2402:f=1,h=e+a[1]-a[0];break;default:f=c-1,h=d}const i=(e-d)*.5,j=this.valueSize;this._weightPrev=i/(d-g),this._weightNext=i/(h-e),this._offsetPrev=b*j,this._offsetNext=f*j}interpolate_(l,i,m,n){const j=this.resultBuffer,e=this.sampleValues,h=this.valueSize,k=l*h,o=k-h,p=this._offsetPrev,q=this._offsetNext,b=this._weightPrev,f=this._weightNext,c=(m-i)/(n-i),d=c*c,g=d*c,r=-b*g+2*b*d-b*c,s=(1+b)*g+(-1.5-2*b)*d+(-0.5+b)*c+1,t=(-1-f)*g+(1.5+f)*d+.5*c,u=f*g-f*d;for(let a=0;a!==h;++a)j[a]=r*e[p+a]+s*e[o+a]+t*e[k+a]+u*e[q+a];return j}}class g3 extends u{constructor(a,b,c,d){super(a,b,c,d)}interpolate_(h,c,i,j){const d=this.resultBuffer,e=this.sampleValues,b=this.valueSize,f=h*b,k=f-b,g=(i-c)/(j-c),l=1-g;for(let a=0;a!==b;++a)d[a]=e[k+a]*l+e[f+a]*g;return d}}class g4 extends u{constructor(a,b,c,d){super(a,b,c,d)}interpolate_(a){return this.copySampleValue_(a-1)}}class r{constructor(a,b,c,d){if(void 0===a)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===b||0===b.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+a);this.name=a,this.times=g1.convertArray(b,this.TimeBufferType),this.values=g1.convertArray(c,this.ValueBufferType),this.setInterpolation(d||this.DefaultInterpolation)}static toJSON(a){const c=a.constructor;let b;if(c.toJSON!==this.toJSON)b=c.toJSON(a);else{b={name:a.name,times:g1.convertArray(a.times,Array),values:g1.convertArray(a.values,Array)};const d=a.getInterpolation();d!==a.DefaultInterpolation&&(b.interpolation=d)}return b.type=a.ValueTypeName,b}InterpolantFactoryMethodDiscrete(a){return new g4(this.times,this.values,this.getValueSize(),a)}InterpolantFactoryMethodLinear(a){return new g3(this.times,this.values,this.getValueSize(),a)}InterpolantFactoryMethodSmooth(a){return new g2(this.times,this.values,this.getValueSize(),a)}setInterpolation(b){let a;switch(b){case $:a=this.InterpolantFactoryMethodDiscrete;break;case _:a=this.InterpolantFactoryMethodLinear;break;case 2302:a=this.InterpolantFactoryMethodSmooth;break}if(void 0===a){const c="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant)if(b!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(c);return console.warn("THREE.KeyframeTrack:",c),this}return this.createInterpolant=a,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return $;case this.InterpolantFactoryMethodLinear:return _;case this.InterpolantFactoryMethodSmooth:return 2302}}getValueSize(){return this.values.length/this.times.length}shift(b){if(0!==b){const c=this.times;for(let a=0,d=c.length;a!==d;++a)c[a]+=b}return this}scale(b){if(1!==b){const c=this.times;for(let a=0,d=c.length;a!==d;++a)c[a]*=b}return this}trim(f,g){const c=this.times,d=c.length;let b=0,a=d-1;for(;b!==d&&c[b]<f;)++b;for(;-1!==a&&c[a]>g;)--a;if(++a,0!==b||a!==d){b>=a&&(b=(a=Math.max(a,1))-1);const e=this.getValueSize();this.times=g1.arraySlice(c,b,a),this.values=g1.arraySlice(this.values,b*e,a*e)}return this}validate(){let a=!0;const g=this.getValueSize();g-Math.floor(g)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),a=!1);const h=this.times,d=this.values,i=h.length;0===i&&(console.error("THREE.KeyframeTrack: Track is empty.",this),a=!1);let e=null;for(let c=0;c!==i;c++){const b=h[c];if("number"==typeof b&&isNaN(b)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,c,b),a=!1;break}if(null!==e&&e>b){console.error("THREE.KeyframeTrack: Out of order keys.",this,c,b,e),a=!1;break}e=b}if(void 0!==d&&g1.isTypedArray(d))for(let f=0,k=d.length;f!==k;++f){const j=d[f];if(isNaN(j)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,f,j),a=!1;break}}return a}optimize(){const a=g1.arraySlice(this.times),d=g1.arraySlice(this.values),b=this.getValueSize(),n=2302===this.getInterpolation(),g=a.length-1;let c=1;for(let e=1;e<g;++e){let j=!1;const l=a[e],o=a[e+1];if(l!==o&&(1!==e||l!==a[0]))if(n)j=!0;else{const k=e*b,p=k-b,q=k+b;for(let f=0;f!==b;++f){const m=d[k+f];if(m!==d[p+f]||m!==d[q+f]){j=!0;break}}}if(j){if(e!==c){a[c]=a[e];const r=e*b,s=c*b;for(let h=0;h!==b;++h)d[s+h]=d[r+h]}++c}}if(g>0){a[c]=a[g];for(let t=g*b,u=c*b,i=0;i!==b;++i)d[u+i]=d[t+i];++c}return c!==a.length?(this.times=g1.arraySlice(a,0,c),this.values=g1.arraySlice(d,0,c*b)):(this.times=a,this.values=d),this}clone(){const b=g1.arraySlice(this.times,0),c=g1.arraySlice(this.values,0),d=this.constructor,a=new d(this.name,b,c);return a.createInterpolant=this.createInterpolant,a}}r.prototype.TimeBufferType=Float32Array,r.prototype.ValueBufferType=Float32Array,r.prototype.DefaultInterpolation=_;class G extends r{}G.prototype.ValueTypeName="bool",G.prototype.ValueBufferType=Array,G.prototype.DefaultInterpolation=$,G.prototype.InterpolantFactoryMethodLinear=void 0,G.prototype.InterpolantFactoryMethodSmooth=void 0;class bb extends r{}bb.prototype.ValueTypeName="color";class bc extends r{}bc.prototype.ValueTypeName="number";class g5 extends u{constructor(a,b,c,d){super(a,b,c,d)}interpolate_(f,c,g,h){const d=this.resultBuffer,e=this.sampleValues,b=this.valueSize,i=(g-c)/(h-c);let a=f*b;for(let j=a+b;a!==j;a+=4)p.slerpFlat(d,0,e,a-b,e,a,i);return d}}class W extends r{InterpolantFactoryMethodLinear(a){return new g5(this.times,this.values,this.getValueSize(),a)}}W.prototype.ValueTypeName="quaternion",W.prototype.DefaultInterpolation=_,W.prototype.InterpolantFactoryMethodSmooth=void 0;class H extends r{}H.prototype.ValueTypeName="string",H.prototype.ValueBufferType=Array,H.prototype.DefaultInterpolation=$,H.prototype.InterpolantFactoryMethodLinear=void 0,H.prototype.InterpolantFactoryMethodSmooth=void 0;class bd extends r{}bd.prototype.ValueTypeName="vector";class g6{constructor(a,b=-1,c,d=2500){this.name=a,this.tracks=c,this.duration=b,this.blendMode=d,this.uuid=az(),this.duration<0&&this.resetDuration()}static parse(a){const c=[],d=a.tracks,f=1/(a.fps||1);for(let b=0,g=d.length;b!==g;++b)c.push(g7(d[b]).scale(f));const e=new this(a.name,a.duration,c,a.blendMode);return e.uuid=a.uuid,e}static toJSON(a){const c=[],d=a.tracks,e={name:a.name,duration:a.duration,tracks:c,uuid:a.uuid,blendMode:a.blendMode};for(let b=0,f=d.length;b!==f;++b)c.push(r.toJSON(d[b]));return e}static CreateFromMorphTargetSequence(h,e,i,j){const d=e.length,f=[];for(let b=0;b<d;b++){let a=[],c=[];a.push((b+d-1)%d,b,(b+1)%d),c.push(0,1,0);const g=g1.getKeyframeOrder(a);a=g1.sortedArray(a,1,g),c=g1.sortedArray(c,1,g),j||0!==a[0]||(a.push(d),c.push(c[0])),f.push(new bc(".morphTargetInfluences["+e[b].name+"]",a,c).scale(1/i))}return new this(h,-1,f)}static findByName(c,e){let a=c;if(!Array.isArray(c)){const d=c;a=d.geometry&&d.geometry.animations||d.animations}for(let b=0;b<a.length;b++)if(a[b].name===e)return a[b];return null}static CreateClipsFromMorphTargetSequences(e,j,k){const a={},l=/^([\w-]*?)([\d]+)$/;for(let b=0,m=e.length;b<m;b++){const f=e[b],c=f.name.match(l);if(c&&c.length>1){const g=c[1];let d=a[g];d||(a[g]=d=[]),d.push(f)}}const h=[];for(const i in a)h.push(this.CreateFromMorphTargetSequence(i,a[i],j,k));return h}static parseAnimation(c,q){if(!c)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const f=function(d,e,b,f,g){if(0!==b.length){const a=[],c=[];g1.flattenJSON(b,a,c,f),0!==a.length&&g.push(new d(e,a,c))}},d=[],r=c.name||"default",s=c.fps||30,t=c.blendMode;let j=c.length|| -1;const k=c.hierarchy||[];for(let e=0;e<k.length;e++){const a=k[e].keys;if(a&&0!==a.length)if(a[0].morphTargets){const g={};let b;for(b=0;b<a.length;b++)if(a[b].morphTargets)for(let h=0;h<a[b].morphTargets.length;h++)g[a[b].morphTargets[h]]=-1;for(const l in g){const m=[],n=[];for(let o=0;o!==a[b].morphTargets.length;++o){const p=a[b];m.push(p.time),n.push(p.morphTarget===l?1:0)}d.push(new bc(".morphTargetInfluence["+l+"]",m,n))}j=g.length*(s||1)}else{const i=".bones["+q[e].name+"]";f(bd,i+".position",a,"pos",d),f(W,i+".quaternion",a,"rot",d),f(bd,i+".scale",a,"scl",d)}}if(0===d.length)return null;const u=new this(r,j,d,t);return u}resetDuration(){const d=this.tracks;let a=0;for(let b=0,e=d.length;b!==e;++b){const c=this.tracks[b];a=Math.max(a,c.times[c.times.length-1])}return this.duration=a,this}trim(){for(let a=0;a<this.tracks.length;a++)this.tracks[a].trim(0,this.duration);return this}validate(){let a=!0;for(let b=0;b<this.tracks.length;b++)a=a&&this.tracks[b].validate();return a}optimize(){for(let a=0;a<this.tracks.length;a++)this.tracks[a].optimize();return this}clone(){const b=[];for(let a=0;a<this.tracks.length;a++)b.push(this.tracks[a].clone());return new this.constructor(this.name,this.duration,b,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function g7(a){if(void 0===a.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const b=function(a){switch(a.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return bc;case"vector":case"vector2":case"vector3":case"vector4":return bd;case"color":return bb;case"quaternion":return W;case"bool":case"boolean":return G;case"string":return H}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+a)}(a.type);if(void 0===a.times){const c=[],d=[];g1.flattenJSON(a.keys,c,d,"value"),a.times=c,a.values=d}return void 0!==b.parse?b.parse(a):new b(a.name,a.times,a.values,a.interpolation)}const g8={enabled:!1,files:{},add:function(a,b){!1!==this.enabled&&(this.files[a]=b)},get:function(a){if(!1!==this.enabled)return this.files[a]},remove:function(a){delete this.files[a]},clear:function(){this.files={}}},g9=new class{constructor(a,b,c){const d=this;let e=!1,f=0,g=0,h;const i=[];this.onStart=void 0,this.onLoad=a,this.onProgress=b,this.onError=c,this.itemStart=function(a){g++,!1===e&& void 0!==d.onStart&&d.onStart(a,f,g),e=!0},this.itemEnd=function(a){f++,void 0!==d.onProgress&&d.onProgress(a,f,g),f===g&&(e=!1,void 0!==d.onLoad&&d.onLoad())},this.itemError=function(a){void 0!==d.onError&&d.onError(a)},this.resolveURL=function(a){return h?h(a):a},this.setURLModifier=function(a){return h=a,this},this.addHandler=function(a,b){return i.push(a,b),this},this.removeHandler=function(b){const a=i.indexOf(b);return -1!==a&&i.splice(a,2),this},this.getHandler=function(c){for(let a=0,d=i.length;a<d;a+=2){const b=i[a],e=i[a+1];if(b.global&&(b.lastIndex=0),b.test(c))return e}return null}}};class v{constructor(a){this.manager=void 0!==a?a:g9,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(a,b){const c=this;return new Promise(function(d,e){c.load(a,d,b,e)})}parse(){}setCrossOrigin(a){return this.crossOrigin=a,this}setWithCredentials(a){return this.withCredentials=a,this}setPath(a){return this.path=a,this}setResourcePath(a){return this.resourcePath=a,this}setRequestHeader(a){return this.requestHeader=a,this}}const ha={};class hb extends v{constructor(a){super(a)}load(a,b,c,d){void 0===a&&(a=""),void 0!==this.path&&(a=this.path+a),a=this.manager.resolveURL(a);const e=g8.get(a);if(void 0!==e)return this.manager.itemStart(a),setTimeout(()=>{b&&b(e),this.manager.itemEnd(a)},0),e;if(void 0!==ha[a]){ha[a].push({onLoad:b,onProgress:c,onError:d});return}ha[a]=[],ha[a].push({onLoad:b,onProgress:c,onError:d});const f=new Request(a,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"});fetch(f).then(b=>{if(200===b.status||0===b.status){0===b.status&&console.warn("THREE.FileLoader: HTTP Status 0 received.");const e=ha[a],f=b.body.getReader(),c=b.headers.get("Content-Length"),d=c?parseInt(c):0,g=0!==d;let h=0;return new ReadableStream({start(a){b();function b(){f.read().then(({done:j,value:f})=>{if(j)a.close();else{h+=f.byteLength;const k=new ProgressEvent("progress",{lengthComputable:g,loaded:h,total:d});for(let c=0,l=e.length;c<l;c++){const i=e[c];i.onProgress&&i.onProgress(k)}a.enqueue(f),b()}})}}})}throw Error(`fetch for "${b.url}" responded with ${b.status}: ${b.statusText}`)}).then(b=>{const a=new Response(b);switch(this.responseType){case"arraybuffer":return a.arrayBuffer();case"blob":return a.blob();case"document":return a.text().then(a=>{const b=new DOMParser;return b.parseFromString(a,this.mimeType)});case"json":return a.json();default:return a.text()}}).then(c=>{g8.add(a,c);const d=ha[a];delete ha[a];for(let b=0,f=d.length;b<f;b++){const e=d[b];e.onLoad&&e.onLoad(c)}this.manager.itemEnd(a)}).catch(e=>{const c=ha[a];delete ha[a];for(let b=0,f=c.length;b<f;b++){const d=c[b];d.onError&&d.onError(e)}this.manager.itemError(a),this.manager.itemEnd(a)}),this.manager.itemStart(a)}setResponseType(a){return this.responseType=a,this}setMimeType(a){return this.mimeType=a,this}}class hc extends v{constructor(a){super(a)}load(a,g,h,i){void 0!==this.path&&(a=this.path+a),a=this.manager.resolveURL(a);const c=this,d=g8.get(a);if(void 0!==d)return c.manager.itemStart(a),setTimeout(function(){g&&g(d),c.manager.itemEnd(a)},0),d;const b=bT("img");function e(){j(),g8.add(a,this),g&&g(this),c.manager.itemEnd(a)}function f(b){j(),i&&i(b),c.manager.itemError(a),c.manager.itemEnd(a)}function j(){b.removeEventListener("load",e,!1),b.removeEventListener("error",f,!1)}return b.addEventListener("load",e,!1),b.addEventListener("error",f,!1),"data:"!==a.substr(0,5)&& void 0!==this.crossOrigin&&(b.crossOrigin=this.crossOrigin),c.manager.itemStart(a),b.src=a,b}}class hd extends v{constructor(a){super(a)}load(c,f,g,h){const d=new ab,b=new hc(this.manager);b.setCrossOrigin(this.crossOrigin),b.setPath(this.path);let i=0;function e(a){b.load(c[a],function(b){d.images[a]=b,6== ++i&&(d.needsUpdate=!0,f&&f(d))},void 0,h)}for(let a=0;a<c.length;++a)e(a);return d}}class he extends v{constructor(a){super(a)}load(b,f,c,d){const e=new s,a=new hc(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(b,function(a){e.image=a,e.needsUpdate=!0,void 0!==f&&f(e)},c,d),e}}class x extends i{constructor(a,b=1){super(),this.type="Light",this.color=new g(a),this.intensity=b}dispose(){}copy(a){return super.copy(a),this.color.copy(a.color),this.intensity=a.intensity,this}toJSON(b){const a=super.toJSON(b);return a.object.color=this.color.getHex(),a.object.intensity=this.intensity,void 0!==this.groundColor&&(a.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(a.object.distance=this.distance),void 0!==this.angle&&(a.object.angle=this.angle),void 0!==this.decay&&(a.object.decay=this.decay),void 0!==this.penumbra&&(a.object.penumbra=this.penumbra),void 0!==this.shadow&&(a.object.shadow=this.shadow.toJSON()),a}}x.prototype.isLight=!0,(class extends x{constructor(a,b,c){super(a,c),this.type="HemisphereLight",this.position.copy(i.DefaultUp),this.updateMatrix(),this.groundColor=new g(b)}copy(a){return x.prototype.copy.call(this,a),this.groundColor.copy(a.groundColor),this}}).prototype.isHemisphereLight=!0;const hf=new c,hg=new a,hh=new a;class X{constructor(a){this.camera=a,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new j(512,512),this.map=null,this.mapPass=null,this.matrix=new c,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new aO,this._frameExtents=new j(1,1),this._viewportCount=1,this._viewports=[new D(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(c){const a=this.camera,b=this.matrix;hg.setFromMatrixPosition(c.matrixWorld),a.position.copy(hg),hh.setFromMatrixPosition(c.target.matrixWorld),a.lookAt(hh),a.updateMatrixWorld(),hf.multiplyMatrices(a.projectionMatrix,a.matrixWorldInverse),this._frustum.setFromProjectionMatrix(hf),b.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),b.multiply(a.projectionMatrix),b.multiply(a.matrixWorldInverse)}getViewport(a){return this._viewports[a]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(a){return this.camera=a.camera.clone(),this.bias=a.bias,this.radius=a.radius,this.mapSize.copy(a.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const a={};return 0!==this.bias&&(a.bias=this.bias),0!==this.normalBias&&(a.normalBias=this.normalBias),1!==this.radius&&(a.radius=this.radius),(512!==this.mapSize.x||512!==this.mapSize.y)&&(a.mapSize=this.mapSize.toArray()),a.camera=this.camera.toJSON(!1).object,delete a.camera.matrix,a}}class be extends X{constructor(){super(new P(50,1,.5,500)),this.focus=1}updateMatrices(b){const a=this.camera,c=2*ax*b.angle*this.focus,d=this.mapSize.width/this.mapSize.height,e=b.distance||a.far;(c!==a.fov||d!==a.aspect||e!==a.far)&&(a.fov=c,a.aspect=d,a.far=e,a.updateProjectionMatrix()),super.updateMatrices(b)}copy(a){return super.copy(a),this.focus=a.focus,this}}be.prototype.isSpotLightShadow=!0;class bf extends x{constructor(a,b,c=0,d=Math.PI/3,e=0,f=1){super(a,b),this.type="SpotLight",this.position.copy(i.DefaultUp),this.updateMatrix(),this.target=new i,this.distance=c,this.angle=d,this.penumbra=e,this.decay=f,this.shadow=new be}get power(){return this.intensity*Math.PI}set power(a){this.intensity=a/Math.PI}dispose(){this.shadow.dispose()}copy(a){return super.copy(a),this.distance=a.distance,this.angle=a.angle,this.penumbra=a.penumbra,this.decay=a.decay,this.target=a.target.clone(),this.shadow=a.shadow.clone(),this}}bf.prototype.isSpotLight=!0;const hi=new c,hj=new a,hk=new a;class bg extends X{constructor(){super(new P(90,1,.5,500)),this._frameExtents=new j(4,2),this._viewportCount=6,this._viewports=[new D(2,1,1,1),new D(0,1,1,1),new D(3,1,1,1),new D(1,1,1,1),new D(3,0,1,1),new D(1,0,1,1)],this._cubeDirections=[new a(1,0,0),new a(-1,0,0),new a(0,0,1),new a(0,0,-1),new a(0,1,0),new a(0,-1,0)],this._cubeUps=[new a(0,1,0),new a(0,1,0),new a(0,1,0),new a(0,1,0),new a(0,0,1),new a(0,0,-1)]}updateMatrices(b,c=0){const a=this.camera,e=this.matrix,d=b.distance||a.far;d!==a.far&&(a.far=d,a.updateProjectionMatrix()),hj.setFromMatrixPosition(b.matrixWorld),a.position.copy(hj),hk.copy(a.position),hk.add(this._cubeDirections[c]),a.up.copy(this._cubeUps[c]),a.lookAt(hk),a.updateMatrixWorld(),e.makeTranslation(-hj.x,-hj.y,-hj.z),hi.multiplyMatrices(a.projectionMatrix,a.matrixWorldInverse),this._frustum.setFromProjectionMatrix(hi)}}bg.prototype.isPointLightShadow=!0;class bh extends x{constructor(a,b,c=0,d=1){super(a,b),this.type="PointLight",this.distance=c,this.decay=d,this.shadow=new bg}get power(){return 4*this.intensity*Math.PI}set power(a){this.intensity=a/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(a){return super.copy(a),this.distance=a.distance,this.decay=a.decay,this.shadow=a.shadow.clone(),this}}bh.prototype.isPointLight=!0;class bi extends X{constructor(){super(new ae(-5,5,5,-5,.5,500))}}bi.prototype.isDirectionalLightShadow=!0;class bj extends x{constructor(a,b){super(a,b),this.type="DirectionalLight",this.position.copy(i.DefaultUp),this.updateMatrix(),this.target=new i,this.shadow=new bi}dispose(){this.shadow.dispose()}copy(a){return super.copy(a),this.target=a.target.clone(),this.shadow=a.shadow.clone(),this}}bj.prototype.isDirectionalLight=!0;class bk extends x{constructor(a,b){super(a,b),this.type="AmbientLight"}}bk.prototype.isAmbientLight=!0,(class extends x{constructor(a,b,c=10,d=10){super(a,b),this.type="RectAreaLight",this.width=c,this.height=d}get power(){return this.intensity*this.width*this.height*Math.PI}set power(a){this.intensity=a/(this.width*this.height*Math.PI)}copy(a){return super.copy(a),this.width=a.width,this.height=a.height,this}toJSON(b){const a=super.toJSON(b);return a.object.width=this.width,a.object.height=this.height,a}}).prototype.isRectAreaLight=!0;class bl{constructor(){this.coefficients=[];for(let b=0;b<9;b++)this.coefficients.push(new a)}set(b){for(let a=0;a<9;a++)this.coefficients[a].copy(b[a]);return this}zero(){for(let a=0;a<9;a++)this.coefficients[a].set(0,0,0);return this}getAt(f,a){const c=f.x,d=f.y,e=f.z,b=this.coefficients;return a.copy(b[0]).multiplyScalar(.282095),a.addScaledVector(b[1],.488603*d),a.addScaledVector(b[2],.488603*e),a.addScaledVector(b[3],.488603*c),a.addScaledVector(b[4],1.092548*(c*d)),a.addScaledVector(b[5],1.092548*(d*e)),a.addScaledVector(b[6],.315392*(3*e*e-1)),a.addScaledVector(b[7],1.092548*(c*e)),a.addScaledVector(b[8],.546274*(c*c-d*d)),a}getIrradianceAt(f,a){const c=f.x,d=f.y,e=f.z,b=this.coefficients;return a.copy(b[0]).multiplyScalar(.886227),a.addScaledVector(b[1],1.023328*d),a.addScaledVector(b[2],1.023328*e),a.addScaledVector(b[3],1.023328*c),a.addScaledVector(b[4],.858086*c*d),a.addScaledVector(b[5],.858086*d*e),a.addScaledVector(b[6],.743125*e*e-.247708),a.addScaledVector(b[7],.858086*c*e),a.addScaledVector(b[8],.429043*(c*c-d*d)),a}add(b){for(let a=0;a<9;a++)this.coefficients[a].add(b.coefficients[a]);return this}addScaledSH(b,c){for(let a=0;a<9;a++)this.coefficients[a].addScaledVector(b.coefficients[a],c);return this}scale(b){for(let a=0;a<9;a++)this.coefficients[a].multiplyScalar(b);return this}lerp(b,c){for(let a=0;a<9;a++)this.coefficients[a].lerp(b.coefficients[a],c);return this}equals(b){for(let a=0;a<9;a++)if(!this.coefficients[a].equals(b.coefficients[a]))return!1;return!0}copy(a){return this.set(a.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(b,c=0){const d=this.coefficients;for(let a=0;a<9;a++)d[a].fromArray(b,c+3*a);return this}toArray(b=[],c=0){const d=this.coefficients;for(let a=0;a<9;a++)d[a].toArray(b,c+3*a);return b}static getBasisAt(e,a){const b=e.x,c=e.y,d=e.z;a[0]=.282095,a[1]=.488603*c,a[2]=.488603*d,a[3]=.488603*b,a[4]=1.092548*b*c,a[5]=1.092548*c*d,a[6]=.315392*(3*d*d-1),a[7]=1.092548*b*d,a[8]=.546274*(b*b-c*c)}}bl.prototype.isSphericalHarmonics3=!0;class bm extends x{constructor(a=new bl,b=1){super(void 0,b),this.sh=a}copy(a){return super.copy(a),this.sh.copy(a.sh),this}fromJSON(a){return this.intensity=a.intensity,this.sh.fromArray(a.sh),this}toJSON(b){const a=super.toJSON(b);return a.object.sh=this.sh.toArray(),a}}bm.prototype.isLightProbe=!0;class hl{static decodeText(a){if("undefined"!=typeof TextDecoder)return new TextDecoder().decode(a);let b="";for(let c=0,d=a.length;c<d;c++)b+=String.fromCharCode(a[c]);try{return decodeURIComponent(escape(b))}catch(e){return b}}static extractUrlBase(a){const b=a.lastIndexOf("/");return -1===b?"./":a.substr(0,b+1)}static resolveURL(a,b){return"string"!=typeof a||""===a?"":(/^https?:\/\//i.test(b)&&/^\//.test(a)&&(b=b.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(a))?a:/^data:.*,.*$/i.test(a)?a:/^blob:.*$/i.test(a)?a:b+a}}(class extends f{constructor(){super(),this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(a){return super.copy(a),this.instanceCount=a.instanceCount,this}clone(){return new this.constructor().copy(this)}toJSON(){const a=super.toJSON(this);return a.instanceCount=this.instanceCount,a.isInstancedBufferGeometry=!0,a}}).prototype.isInstancedBufferGeometry=!0;class bn extends v{constructor(a){super(a),"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(a){return this.options=a,this}load(a,e,f,g){void 0===a&&(a=""),void 0!==this.path&&(a=this.path+a),a=this.manager.resolveURL(a);const c=this,d=g8.get(a);if(void 0!==d)return c.manager.itemStart(a),setTimeout(function(){e&&e(d),c.manager.itemEnd(a)},0),d;const b={};b.credentials="anonymous"===this.crossOrigin?"same-origin":"include",b.headers=this.requestHeader,fetch(a,b).then(function(a){return a.blob()}).then(function(a){return createImageBitmap(a,Object.assign(c.options,{colorSpaceConversion:"none"}))}).then(function(b){g8.add(a,b),e&&e(b),c.manager.itemEnd(a)}).catch(function(b){g&&g(b),c.manager.itemError(a),c.manager.itemEnd(a)}),c.manager.itemStart(a)}}bn.prototype.isImageBitmapLoader=!0;let hm;const hn={getContext:function(){return void 0===hm&&(hm=new(window.AudioContext||window.webkitAudioContext)),hm},setContext:function(a){hm=a}};class ho extends v{constructor(a){super(a)}load(b,e,c,d){const f=this,a=new hb(this.manager);a.setResponseType("arraybuffer"),a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(b,function(c){try{const g=c.slice(0),h=hn.getContext();h.decodeAudioData(g,function(a){e(a)})}catch(a){d?d(a):console.error(a),f.manager.itemError(b)}},c,d)}}(class extends bm{constructor(h,i,j=1){super(void 0,j);const b=new g().set(h),c=new g().set(i),d=new a(b.r,b.g,b.b),e=new a(c.r,c.g,c.b),f=Math.sqrt(Math.PI);this.sh.coefficients[0].copy(d).add(e).multiplyScalar(f),this.sh.coefficients[1].copy(d).sub(e).multiplyScalar(f*Math.sqrt(.75))}}).prototype.isHemisphereLightProbe=!0,(class extends bm{constructor(b,c=1){super(void 0,c);const a=new g().set(b);this.sh.coefficients[0].set(a.r,a.g,a.b).multiplyScalar(2*Math.sqrt(Math.PI))}}).prototype.isAmbientLightProbe=!0,new c,new c,new a,new p,new a,new a,new a,new p,new a,new a;class hp{constructor(e,f,a){this.binding=e,this.valueSize=a;let b,c,d;switch(f){case"quaternion":b=this._slerp,c=this._slerpAdditive,d=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*a),this._workIndex=5;break;case"string":case"bool":b=this._select,c=this._select,d=this._setAdditiveIdentityOther,this.buffer=new Array(5*a);break;default:b=this._lerp,c=this._lerpAdditive,d=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*a)}this._mixBufferRegion=b,this._mixBufferRegionAdditive=c,this._setIdentity=d,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(g,d){const e=this.buffer,b=this.valueSize,f=g*b+b;let a=this.cumulativeWeight;if(0===a){for(let c=0;c!==b;++c)e[f+c]=e[c];a=d}else{a+=d;const h=d/a;this._mixBufferRegion(e,f,0,h,b)}this.cumulativeWeight=a}accumulateAdditive(a){const c=this.buffer,b=this.valueSize,d=b*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(c,d,0,a,b),this.cumulativeWeightAdditive+=a}apply(f){const a=this.valueSize,b=this.buffer,d=f*a+a,e=this.cumulativeWeight,g=this.cumulativeWeightAdditive,h=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,e<1){const i=a*this._origIndex;this._mixBufferRegion(b,d,i,1-e,a)}g>0&&this._mixBufferRegionAdditive(b,d,this._addIndex*a,1,a);for(let c=a,j=a+a;c!==j;++c)if(b[c]!==b[c+a]){h.setValue(b,d);break}}saveOriginalState(){const e=this.binding,b=this.buffer,c=this.valueSize,d=c*this._origIndex;e.getValue(b,d);for(let a=c,f=d;a!==f;++a)b[a]=b[d+a%c];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const a=3*this.valueSize;this.binding.setValue(this.buffer,a)}_setAdditiveIdentityNumeric(){const b=this._addIndex*this.valueSize,c=b+this.valueSize;for(let a=b;a<c;a++)this.buffer[a]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const b=this._origIndex*this.valueSize,c=this._addIndex*this.valueSize;for(let a=0;a<this.valueSize;a++)this.buffer[c+a]=this.buffer[b+a]}_select(b,c,d,e,f){if(e>=.5)for(let a=0;a!==f;++a)b[c+a]=b[d+a]}_slerp(a,b,c,d){p.slerpFlat(a,b,a,b,a,c,d)}_slerpAdditive(a,b,d,e,f){const c=this._workIndex*f;p.multiplyQuaternionsFlat(a,c,a,b,a,d),p.slerpFlat(a,b,a,b,a,c,e)}_lerp(b,e,f,c,g){const h=1-c;for(let a=0;a!==g;++a){const d=e+a;b[d]=b[d]*h+b[f+a]*c}}_lerpAdditive(b,d,e,f,g){for(let a=0;a!==g;++a){const c=d+a;b[c]=b[c]+b[e+a]*f}}}const Y="\\[\\]\\.:\\/",hq=new RegExp("["+Y+"]","g"),Z="[^"+Y+"]",bo="[^"+Y.replace("\\.","")+"]",bp=/((?:WC+[\/:])*)/.source.replace("WC",Z),bq=/(WCOD+)?/.source.replace("WCOD",bo),br=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",Z),bs=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",Z),hr=new RegExp("^"+bp+bq+br+bs+"$"),hs=["material","materials","bones"];class h{constructor(a,b,c){this.path=b,this.parsedPath=c||h.parseTrackName(b),this.node=h.findNode(a,this.parsedPath.nodeName)||a,this.rootNode=a,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(a,b,c){return a&&a.isAnimationObjectGroup?new h.Composite(a,b,c):new h(a,b,c)}static sanitizeNodeName(a){return a.replace(/\s/g,"_").replace(hq,"")}static parseTrackName(d){const b=hr.exec(d);if(!b)throw new Error("PropertyBinding: Cannot parse trackName: "+d);const a={nodeName:b[2],objectName:b[3],objectIndex:b[4],propertyName:b[5],propertyIndex:b[6]},c=a.nodeName&&a.nodeName.lastIndexOf(".");if(void 0!==c&& -1!==c){const e=a.nodeName.substring(c+1);-1!==hs.indexOf(e)&&(a.nodeName=a.nodeName.substring(0,c),a.objectName=e)}if(null===a.propertyName||0===a.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+d);return a}static findNode(a,b){if(!b||""===b||"."===b|| -1===b||b===a.name||b===a.uuid)return a;if(a.skeleton){const c=a.skeleton.getBoneByName(b);if(void 0!==c)return c}if(a.children){const e=function(d){for(let c=0;c<d.length;c++){const a=d[c];if(a.name===b||a.uuid===b)return a;const f=e(a.children);if(f)return f}return null},d=e(a.children);if(d)return d}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(a,b){a[b]=this.targetObject[this.propertyName]}_getValue_array(c,d){const b=this.resolvedProperty;for(let a=0,e=b.length;a!==e;++a)c[d++]=b[a]}_getValue_arrayElement(a,b){a[b]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(a,b){this.resolvedProperty.toArray(a,b)}_setValue_direct(a,b){this.targetObject[this.propertyName]=a[b]}_setValue_direct_setNeedsUpdate(a,b){this.targetObject[this.propertyName]=a[b],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(a,b){this.targetObject[this.propertyName]=a[b],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(c,d){const b=this.resolvedProperty;for(let a=0,e=b.length;a!==e;++a)b[a]=c[d++]}_setValue_array_setNeedsUpdate(c,d){const b=this.resolvedProperty;for(let a=0,e=b.length;a!==e;++a)b[a]=c[d++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(c,d){const b=this.resolvedProperty;for(let a=0,e=b.length;a!==e;++a)b[a]=c[d++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(a,b){this.resolvedProperty[this.propertyIndex]=a[b]}_setValue_arrayElement_setNeedsUpdate(a,b){this.resolvedProperty[this.propertyIndex]=a[b],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(a,b){this.resolvedProperty[this.propertyIndex]=a[b],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(a,b){this.resolvedProperty.fromArray(a,b)}_setValue_fromArray_setNeedsUpdate(a,b){this.resolvedProperty.fromArray(a,b),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(a,b){this.resolvedProperty.fromArray(a,b),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(a,b){this.bind(),this.getValue(a,b)}_setValue_unbound(a,b){this.bind(),this.setValue(a,b)}bind(){let a=this.node;const c=this.parsedPath,g=c.objectName,i=c.propertyName;let d=c.propertyIndex;if(a||(a=h.findNode(this.rootNode,c.nodeName)||this.rootNode,this.node=a),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!a){console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");return}if(g){let e=c.objectIndex;switch(g){case"materials":if(!a.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!a.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}a=a.material.materials;break;case"bones":if(!a.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}a=a.skeleton.bones;for(let j=0;j<a.length;j++)if(a[j].name===e){e=j;break}break;default:if(void 0===a[g]){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}a=a[g]}if(void 0!==e){if(void 0===a[e]){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,a);return}a=a[e]}}const b=a[i];if(void 0===b){const l=c.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+l+"."+i+" but it wasn't found.",a);return}let k=this.Versioning.None;this.targetObject=a,void 0!==a.needsUpdate?k=this.Versioning.NeedsUpdate:void 0!==a.matrixWorldNeedsUpdate&&(k=this.Versioning.MatrixWorldNeedsUpdate);let f=this.BindingType.Direct;if(void 0!==d){if("morphTargetInfluences"===i){if(!a.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(a.geometry.isBufferGeometry){if(!a.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}void 0!==a.morphTargetDictionary[d]&&(d=a.morphTargetDictionary[d])}else{console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);return}}f=this.BindingType.ArrayElement,this.resolvedProperty=b,this.propertyIndex=d}else void 0!==b.fromArray&& void 0!==b.toArray?(f=this.BindingType.HasFromToArray,this.resolvedProperty=b):Array.isArray(b)?(f=this.BindingType.EntireArray,this.resolvedProperty=b):this.propertyName=i;this.getValue=this.GetterByBindingType[f],this.setValue=this.SetterByBindingTypeAndVersioning[f][k]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}h.Composite=class{constructor(a,b,c){const d=c||h.parseTrackName(b);this._targetGroup=a,this._bindings=a.subscribe_(b,d)}getValue(b,c){this.bind();const d=this._targetGroup.nCachedObjects_,a=this._bindings[d];void 0!==a&&a.getValue(b,c)}setValue(c,d){const b=this._bindings;for(let a=this._targetGroup.nCachedObjects_,e=b.length;a!==e;++a)b[a].setValue(c,d)}bind(){const b=this._bindings;for(let a=this._targetGroup.nCachedObjects_,c=b.length;a!==c;++a)b[a].bind()}unbind(){const b=this._bindings;for(let a=this._targetGroup.nCachedObjects_,c=b.length;a!==c;++a)b[a].unbind()}},h.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},h.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},h.prototype.GetterByBindingType=[h.prototype._getValue_direct,h.prototype._getValue_array,h.prototype._getValue_arrayElement,h.prototype._getValue_toArray,],h.prototype.SetterByBindingTypeAndVersioning=[[h.prototype._setValue_direct,h.prototype._setValue_direct_setNeedsUpdate,h.prototype._setValue_direct_setMatrixWorldNeedsUpdate,],[h.prototype._setValue_array,h.prototype._setValue_array_setNeedsUpdate,h.prototype._setValue_array_setMatrixWorldNeedsUpdate,],[h.prototype._setValue_arrayElement,h.prototype._setValue_arrayElement_setNeedsUpdate,h.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,],[h.prototype._setValue_fromArray,h.prototype._setValue_fromArray_setNeedsUpdate,h.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,]],(class{constructor(){this.uuid=az(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const b={};this._indicesByUUID=b;for(let a=0,c=arguments.length;a!==c;++a)b[arguments[a].uuid]=a;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={},this.stats={objects:{get total(){return this._objects.length},get inUse(){return this.total-this.nCachedObjects_}},get bindingsPerObject(){return this._bindings.length}}}add(){const b=this._objects,g=this._indicesByUUID,o=this._paths,p=this._parsedPaths,j=this._bindings,q=j.length;let r,t=b.length,k=this.nCachedObjects_;for(let l=0,u=arguments.length;l!==u;++l){const c=arguments[l],m=c.uuid;let a=g[m];if(void 0===a){a=t++,g[m]=a,b.push(c);for(let d=0,v=q;d!==v;++d)j[d].push(new h(c,o[d],p[d]))}else if(a<k){r=b[a];const e=--k,s=b[e];g[s.uuid]=a,b[a]=s,g[m]=e,b[e]=c;for(let f=0,w=q;f!==w;++f){const i=j[f],x=i[e];let n=i[a];i[a]=x,void 0===n&&(n=new h(c,o[f],p[f])),i[e]=n}}else b[a]!==r&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=k}remove(){const d=this._objects,e=this._indicesByUUID,i=this._bindings,m=i.length;let f=this.nCachedObjects_;for(let g=0,n=arguments.length;g!==n;++g){const j=arguments[g],k=j.uuid,a=e[k];if(void 0!==a&&a>=f){const b=f++,l=d[b];e[l.uuid]=a,d[a]=l,e[k]=b,d[b]=j;for(let h=0,o=m;h!==o;++h){const c=i[h],p=c[b],q=c[a];c[a]=p,c[b]=q}}}this.nCachedObjects_=f}uncache(){const a=this._objects,c=this._indicesByUUID,f=this._bindings,m=f.length;let g=this.nCachedObjects_,n=a.length;for(let h=0,t=arguments.length;h!==t;++h){const u=arguments[h],o=u.uuid,b=c[o];if(void 0!==b)if(delete c[o],b<g){const d=--g,p=a[d],q=--n,r=a[q];c[p.uuid]=b,a[b]=p,c[r.uuid]=d,a[d]=r,a.pop();for(let i=0,v=m;i!==v;++i){const e=f[i],w=e[d],x=e[q];e[b]=w,e[d]=x,e.pop()}}else{const j=--n,s=a[j];j>0&&(c[s.uuid]=b),a[b]=s,a.pop();for(let k=0,y=m;k!==y;++k){const l=f[k];l[b]=l[j],l.pop()}}}this.nCachedObjects_=g}subscribe_(a,g){const i=this._bindingsIndicesByPath;let b=i[a];const d=this._bindings;if(void 0!==b)return d[b];const j=this._paths,k=this._parsedPaths,e=this._objects,l=e.length,m=this.nCachedObjects_,f=new Array(l);b=d.length,i[a]=b,j.push(a),k.push(g),d.push(f);for(let c=m,n=e.length;c!==n;++c){const o=e[c];f[c]=new h(o,a,g)}return f}unsubscribe_(f){const g=this._bindingsIndicesByPath,a=g[f];if(void 0!==a){const d=this._paths,e=this._parsedPaths,b=this._bindings,c=b.length-1,h=b[c],i=f[c];g[i]=a,b[a]=h,b.pop(),e[a]=e[c],e.pop(),d[a]=d[c],d.pop()}}}).prototype.isAnimationObjectGroup=!0;class ht{constructor(h,b,i=null,j=b.blendMode){this._mixer=h,this._clip=b,this._localRoot=i,this.blendMode=j;const d=b.tracks,c=d.length,e=new Array(c),f={endingStart:2400,endingEnd:2400};for(let a=0;a!==c;++a){const g=d[a].createInterpolant(null);e[a]=g,g.settings=f}this._interpolantSettings=f,this._interpolants=e,this._propertyBindings=new Array(c),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(a){return this._startTime=a,this}setLoop(a,b){return this.loop=a,this.repetitions=b,this}setEffectiveWeight(a){return this.weight=a,this._effectiveWeight=this.enabled?a:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(a){return this._scheduleFading(a,0,1)}fadeOut(a){return this._scheduleFading(a,1,0)}crossFadeFrom(b,a,e){if(b.fadeOut(a),this.fadeIn(a),e){const c=this._clip.duration,d=b._clip.duration,f=d/c,g=c/d;b.warp(1,f,a),this.warp(g,1,a)}return this}crossFadeTo(a,b,c){return a.crossFadeFrom(this,b,c)}stopFading(){const a=this._weightInterpolant;return null!==a&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(a)),this}setEffectiveTimeScale(a){return this.timeScale=a,this._effectiveTimeScale=this.paused?0:a,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(a){return this.timeScale=this._clip.duration/a,this.stopWarping()}syncWith(a){return this.time=a.time,this.timeScale=a.timeScale,this.stopWarping()}halt(a){return this.warp(this._effectiveTimeScale,0,a)}warp(g,h,i){const b=this._mixer,c=b.time,d=this.timeScale;let a=this._timeScaleInterpolant;null===a&&(a=b._lendControlInterpolant(),this._timeScaleInterpolant=a);const e=a.parameterPositions,f=a.sampleValues;return e[0]=c,e[1]=c+i,f[0]=g/d,f[1]=h/d,this}stopWarping(){const a=this._timeScaleInterpolant;return null!==a&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(a)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(a,e,f,l){if(!this.enabled){this._updateWeight(a);return}const h=this._startTime;if(null!==h){const i=(a-h)*f;if(i<0||0===f)return;this._startTime=null,e=f*i}e*=this._updateTimeScale(a);const j=this._updateTime(e),g=this._updateWeight(a);if(g>0){const b=this._interpolants,k=this._propertyBindings;switch(this.blendMode){case 2501:for(let c=0,m=b.length;c!==m;++c)b[c].evaluate(j),k[c].accumulateAdditive(g);break;case 2500:default:for(let d=0,n=b.length;d!==n;++d)b[d].evaluate(j),k[d].accumulate(l,g)}}}_updateWeight(c){let a=0;if(this.enabled){a=this.weight;const b=this._weightInterpolant;if(null!==b){const d=b.evaluate(c)[0];a*=d,c>b.parameterPositions[1]&&(this.stopFading(),0===d&&(this.enabled=!1))}}return this._effectiveWeight=a,a}_updateTimeScale(c){let a=0;if(!this.paused){a=this.timeScale;const b=this._timeScaleInterpolant;if(null!==b){const d=b.evaluate(c)[0];a*=d,c>b.parameterPositions[1]&&(this.stopWarping(),0===a?this.paused=!0:this.timeScale=a)}}return this._effectiveTimeScale=a,a}_updateTime(d){const c=this._clip.duration,g=this.loop;let a=this.time+d,b=this._loopCount;const e=2202===g;if(0===d)return -1===b?a:e&&(1&b)==1?c-a:a;if(2200===g){-1===b&&(this._loopCount=0,this._setEndings(!0,!0,!1));handle_stop:{if(a>=c)a=c;else if(a<0)a=0;else{this.time=a;break handle_stop}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=a,this._mixer.dispatchEvent({type:"finished",action:this,direction:d<0?-1:1})}}else{if(-1===b&&(d>=0?(b=0,this._setEndings(!0,0===this.repetitions,e)):this._setEndings(0===this.repetitions,!0,e)),a>=c||a<0){const f=Math.floor(a/c);a-=c*f,b+=Math.abs(f);const h=this.repetitions-b;if(h<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,a=d>0?c:0,this.time=a,this._mixer.dispatchEvent({type:"finished",action:this,direction:d>0?1:-1});else{if(1===h){const i=d<0;this._setEndings(i,!i,e)}else this._setEndings(!1,!1,e);this._loopCount=b,this.time=a,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:f})}}else this.time=a;if(e&&(1&b)==1)return c-a}return a}_setEndings(b,c,d){const a=this._interpolantSettings;d?(a.endingStart=2401,a.endingEnd=2401):(b?a.endingStart=this.zeroSlopeAtStart?2401:2400:a.endingStart=2402,c?a.endingEnd=this.zeroSlopeAtEnd?2401:2400:a.endingEnd=2402)}_scheduleFading(f,g,h){const b=this._mixer,c=b.time;let a=this._weightInterpolant;null===a&&(a=b._lendControlInterpolant(),this._weightInterpolant=a);const d=a.parameterPositions,e=a.sampleValues;return d[0]=c,e[0]=g,d[1]=c+f,e[1]=h,this}}(class extends y{constructor(a){super(),this._root=a,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(c,j){const k=c._localRoot||this._root,l=c._clip.tracks,n=l.length,g=c._propertyBindings,o=c._interpolants,d=k.uuid,m=this._bindingsByRootAndName;let e=m[d];void 0===e&&(e={},m[d]=e);for(let b=0;b!==n;++b){const i=l[b],f=i.name;let a=e[f];if(void 0!==a)g[b]=a;else{if(void 0!==(a=g[b])){null===a._cacheIndex&&(++a.referenceCount,this._addInactiveBinding(a,d,f));continue}const p=j&&j._propertyBindings[b].binding.parsedPath;a=new hp(h.create(k,f,p),i.ValueTypeName,i.getValueSize()),++a.referenceCount,this._addInactiveBinding(a,d,f),g[b]=a}o[b].resultBuffer=a.buffer}}_activateAction(a){if(!this._isActiveAction(a)){if(null===a._cacheIndex){const g=(a._localRoot||this._root).uuid,d=a._clip.uuid,e=this._actionsByClip[d];this._bindAction(a,e&&e.knownActions[0]),this._addInactiveAction(a,d,g)}const f=a._propertyBindings;for(let b=0,h=f.length;b!==h;++b){const c=f[b];0==c.useCount++&&(this._lendBinding(c),c.saveOriginalState())}this._lendAction(a)}}_deactivateAction(a){if(this._isActiveAction(a)){const d=a._propertyBindings;for(let b=0,e=d.length;b!==e;++b){const c=d[b];0== --c.useCount&&(c.restoreOriginalState(),this._takeBackBinding(c))}this._takeBackAction(a)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0,this.stats={actions:{get total(){return this._actions.length},get inUse(){return this._nActiveActions}},bindings:{get total(){return this._bindings.length},get inUse(){return this._nActiveBindings}},controlInterpolants:{get total(){return this._controlInterpolants.length},get inUse(){return this._nActiveControlInterpolants}}}}_isActiveAction(b){const a=b._cacheIndex;return null!==a&&a<this._nActiveActions}_addInactiveAction(a,c,g){const d=this._actions,e=this._actionsByClip;let b=e[c];if(void 0===b)b={knownActions:[a],actionByRoot:{}},a._byClipCacheIndex=0,e[c]=b;else{const f=b.knownActions;a._byClipCacheIndex=f.length,f.push(a)}a._cacheIndex=d.length,d.push(a),b.actionByRoot[g]=a}_removeInactiveAction(a){const c=this._actions,d=c[c.length-1],e=a._cacheIndex;d._cacheIndex=e,c[e]=d,c.pop(),a._cacheIndex=null;const f=a._clip.uuid,g=this._actionsByClip,h=g[f],b=h.knownActions,i=b[b.length-1],j=a._byClipCacheIndex;i._byClipCacheIndex=j,b[j]=i,b.pop(),a._byClipCacheIndex=null;const k=h.actionByRoot,l=(a._localRoot||this._root).uuid;delete k[l],0===b.length&&delete g[f],this._removeInactiveBindingsForAction(a)}_removeInactiveBindingsForAction(d){const b=d._propertyBindings;for(let a=0,e=b.length;a!==e;++a){const c=b[a];0== --c.referenceCount&&this._removeInactiveBinding(c)}}_lendAction(a){const b=this._actions,d=a._cacheIndex,c=this._nActiveActions++,e=b[c];a._cacheIndex=c,b[c]=a,e._cacheIndex=d,b[d]=e}_takeBackAction(a){const b=this._actions,d=a._cacheIndex,c=--this._nActiveActions,e=b[c];a._cacheIndex=c,b[c]=a,e._cacheIndex=d,b[d]=e}_addInactiveBinding(b,c,f){const d=this._bindingsByRootAndName,e=this._bindings;let a=d[c];void 0===a&&(a={},d[c]=a),a[f]=b,b._cacheIndex=e.length,e.push(b)}_removeInactiveBinding(b){const a=this._bindings,c=b.binding,d=c.rootNode.uuid,i=c.path,e=this._bindingsByRootAndName,f=e[d],g=a[a.length-1],h=b._cacheIndex;g._cacheIndex=h,a[h]=g,a.pop(),delete f[i],0===Object.keys(f).length&&delete e[d]}_lendBinding(a){const b=this._bindings,d=a._cacheIndex,c=this._nActiveBindings++,e=b[c];a._cacheIndex=c,b[c]=a,e._cacheIndex=d,b[d]=e}_takeBackBinding(a){const b=this._bindings,d=a._cacheIndex,c=--this._nActiveBindings,e=b[c];a._cacheIndex=c,b[c]=a,e._cacheIndex=d,b[d]=e}_lendControlInterpolant(){const c=this._controlInterpolants,b=this._nActiveControlInterpolants++;let a=c[b];return void 0===a&&((a=new g3(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex=b,c[b]=a),a}_takeBackControlInterpolant(a){const b=this._controlInterpolants,d=a.__cacheIndex,c=--this._nActiveControlInterpolants,e=b[c];a.__cacheIndex=c,b[c]=a,e.__cacheIndex=d,b[d]=e}clipAction(b,h,c){const i=h||this._root,j=i.uuid;let a="string"==typeof b?g6.findByName(i,b):b;const k=null!==a?a.uuid:b,d=this._actionsByClip[k];let e=null;if(void 0===c&&(c=null!==a?a.blendMode:2500),void 0!==d){const f=d.actionByRoot[j];if(void 0!==f&&f.blendMode===c)return f;e=d.knownActions[0],null===a&&(a=e._clip)}if(null===a)return null;const g=new ht(this,a,h,c);return this._bindAction(g,e),this._addInactiveAction(g,k,j),g}existingAction(a,e){const b=e||this._root,f=b.uuid,c="string"==typeof a?g6.findByName(b,a):a,g=c?c.uuid:a,d=this._actionsByClip[g];return void 0!==d?d.actionByRoot[f]||null:null}stopAllAction(){const b=this._actions,c=this._nActiveActions;for(let a=c-1;a>=0;--a)b[a].stop();return this}update(a){a*=this.timeScale;const e=this._actions,f=this._nActiveActions,g=this.time+=a,h=Math.sign(a),d=this._accuIndex^=1;for(let b=0;b!==f;++b){const i=e[b];i._update(g,a,h,d)}const j=this._bindings,k=this._nActiveBindings;for(let c=0;c!==k;++c)j[c].apply(d);return this}setTime(b){this.time=0;for(let a=0;a<this._actions.length;a++)this._actions[a].time=0;return this.update(b)}getRoot(){return this._root}uncacheClip(j){const b=this._actions,d=j.uuid,e=this._actionsByClip,f=e[d];if(void 0!==f){const g=f.knownActions;for(let c=0,k=g.length;c!==k;++c){const a=g[c];this._deactivateAction(a);const h=a._cacheIndex,i=b[b.length-1];a._cacheIndex=null,a._byClipCacheIndex=null,i._cacheIndex=h,b[h]=i,b.pop(),this._removeInactiveBindingsForAction(a)}delete e[d]}}uncacheRoot(f){const c=f.uuid,d=this._actionsByClip;for(const g in d){const h=d[g].actionByRoot,a=h[c];void 0!==a&&(this._deactivateAction(a),this._removeInactiveAction(a))}const i=this._bindingsByRootAndName,b=i[c];if(void 0!==b)for(const j in b){const e=b[j];e.restoreOriginalState(),this._removeInactiveBinding(e)}}uncacheAction(b,c){const a=this.existingAction(b,c);null!==a&&(this._deactivateAction(a),this._removeInactiveAction(a))}}).prototype._controlInterpolantsResultBuffer=new Float32Array(1);class bt{constructor(a){"string"==typeof a&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),a=arguments[1]),this.value=a}clone(){return new bt(void 0===this.value.clone?this.value:this.value.clone())}}function hu(a,b,d,f){if(a.layers.test(b.layers)&&a.raycast(b,d),!0===f){const e=a.children;for(let c=0,g=e.length;c<g;c++)hu(e[c],b,d,!0)}}(class extends Q{constructor(a,b,c=1){super(a,b),this.meshPerAttribute=c}copy(a){return super.copy(a),this.meshPerAttribute=a.meshPerAttribute,this}clone(b){const a=super.clone(b);return a.meshPerAttribute=this.meshPerAttribute,a}toJSON(b){const a=super.toJSON(b);return a.isInstancedInterleavedBuffer=!0,a.meshPerAttribute=this.meshPerAttribute,a}}).prototype.isInstancedInterleavedBuffer=!0,(class{constructor(a,b,c,d,e){this.buffer=a,this.type=b,this.itemSize=c,this.elementSize=d,this.count=e,this.version=0}set needsUpdate(a){!0===a&&this.version++}setBuffer(a){return this.buffer=a,this}setType(a,b){return this.type=a,this.elementSize=b,this}setItemSize(a){return this.itemSize=a,this}setCount(a){return this.count=a,this}}).prototype.isGLBufferAttribute=!0;class hv{constructor(a=1,b=0,c=0){return this.radius=a,this.phi=b,this.theta=c,this}set(a,b,c){return this.radius=a,this.phi=b,this.theta=c,this}copy(a){return this.radius=a.radius,this.phi=a.phi,this.theta=a.theta,this}makeSafe(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this}setFromVector3(a){return this.setFromCartesianCoords(a.x,a.y,a.z)}setFromCartesianCoords(a,b,c){return this.radius=Math.sqrt(a*a+b*b+c*c),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(a,c),this.phi=Math.acos(aA(b/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}const hw=new j;class I{constructor(a=new j(Infinity,Infinity),b=new j(-1/0,-1/0)){this.min=a,this.max=b}set(a,b){return this.min.copy(a),this.max.copy(b),this}setFromPoints(b){this.makeEmpty();for(let a=0,c=b.length;a<c;a++)this.expandByPoint(b[a]);return this}setFromCenterAndSize(a,c){const b=hw.copy(c).multiplyScalar(.5);return this.min.copy(a).sub(b),this.max.copy(a).add(b),this}clone(){return new this.constructor().copy(this)}copy(a){return this.min.copy(a.min),this.max.copy(a.max),this}makeEmpty(){return this.min.x=this.min.y=Infinity,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(a){return this.isEmpty()?a.set(0,0):a.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(a){return this.isEmpty()?a.set(0,0):a.subVectors(this.max,this.min)}expandByPoint(a){return this.min.min(a),this.max.max(a),this}expandByVector(a){return this.min.sub(a),this.max.add(a),this}expandByScalar(a){return this.min.addScalar(-a),this.max.addScalar(a),this}containsPoint(a){return!(a.x<this.min.x)&&!(a.x>this.max.x)&&!(a.y<this.min.y)&&!(a.y>this.max.y)}containsBox(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y}getParameter(a,b){return b.set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(a){return!(a.max.x<this.min.x)&&!(a.min.x>this.max.x)&&!(a.max.y<this.min.y)&&!(a.min.y>this.max.y)}clampPoint(a,b){return b.copy(a).clamp(this.min,this.max)}distanceToPoint(a){const b=hw.copy(a).clamp(this.min,this.max);return b.sub(a).length()}intersect(a){return this.min.max(a.min),this.max.min(a.max),this}union(a){return this.min.min(a.min),this.max.max(a.max),this}translate(a){return this.min.add(a),this.max.add(a),this}equals(a){return a.min.equals(this.min)&&a.max.equals(this.max)}}I.prototype.isBox2=!0;const hx=new a,hy=new a,hz=(new a,new a),hA=new c,hB=new c;function hC(a){const b=[];a&&a.isBone&&b.push(a);for(let c=0;c<a.children.length;c++)b.push.apply(b,hC(a.children[c]));return b}new a,new g,new g,new a,new a,new a,new a,new K,new m,new a;const bu=new Float32Array(1);new Int32Array(bu.buffer),o.create=function(a,b){return console.log("THREE.Curve.create() has been deprecated"),a.prototype=Object.create(o.prototype),a.prototype.constructor=a,a.prototype.getPoint=b,a},ar.prototype.fromPoints=function(a){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(a)},(class extends a4{constructor(n=10,h=10,i=4473924,j=8947848){i=new g(i),j=new g(j);const o=h/2,p=n/h,b=n/2,k=[],c=[];for(let l=0,a=0,d=-b;l<=h;l++,d+=p){k.push(-b,0,d,b,0,d),k.push(d,0,-b,d,0,b);const e=l===o?i:j;e.toArray(c,a),a+=3,e.toArray(c,a),a+=3,e.toArray(c,a),a+=3,e.toArray(c,a),a+=3}const m=new f;m.setAttribute("position",new c1(k,3)),m.setAttribute("color",new c1(c,3));const q=new a3({vertexColors:!0,toneMapped:!1});super(m,q),this.type="GridHelper"}}).prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},(class extends a4{constructor(a){const b=hC(a),c=new f,d=[],e=[],h=new g(0,0,1),i=new g(0,1,0);for(let j=0;j<b.length;j++){const k=b[j];k.parent&&k.parent.isBone&&(d.push(0,0,0),d.push(0,0,0),e.push(h.r,h.g,h.b),e.push(i.r,i.g,i.b))}c.setAttribute("position",new c1(d,3)),c.setAttribute("color",new c1(e,3));const l=new a3({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(c,l),this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=a,this.bones=b,this.matrix=a.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(g){const d=this.bones,e=this.geometry,f=e.getAttribute("position");hB.copy(this.root.matrixWorld).invert();for(let b=0,c=0;b<d.length;b++){const a=d[b];a.parent&&a.parent.isBone&&(hA.multiplyMatrices(hB,a.matrixWorld),hz.setFromMatrixPosition(hA),f.setXYZ(c,hz.x,hz.y,hz.z),hA.multiplyMatrices(hB,a.parent.matrixWorld),hz.setFromMatrixPosition(hA),f.setXYZ(c+1,hz.x,hz.y,hz.z),c+=2)}e.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(g)}}).prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},v.prototype.extractUrlBase=function(a){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),hl.extractUrlBase(a)},v.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},I.prototype.center=function(a){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(a)},I.prototype.empty=function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},I.prototype.isIntersectionBox=function(a){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(a)},I.prototype.size=function(a){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(a)},m.prototype.center=function(a){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(a)},m.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},m.prototype.isIntersectionBox=function(a){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(a)},m.prototype.isIntersectionSphere=function(a){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(a)},m.prototype.size=function(a){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(a)},E.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()},aO.prototype.setFromMatrix=function(a){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(a)},(class{constructor(b=new a,c=new a){this.start=b,this.end=c}set(a,b){return this.start.copy(a),this.end.copy(b),this}copy(a){return this.start.copy(a.start),this.end.copy(a.end),this}getCenter(a){return a.addVectors(this.start,this.end).multiplyScalar(.5)}delta(a){return a.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(a,b){return this.delta(b).multiplyScalar(a).add(this.start)}closestPointToPointParameter(b,c){hx.subVectors(b,this.start),hy.subVectors(this.end,this.start);const d=hy.dot(hy),e=hy.dot(hx);let a=e/d;return c&&(a=aA(a,0,1)),a}closestPointToPoint(a,b,c){const d=this.closestPointToPointParameter(a,b);return this.delta(c).multiplyScalar(d).add(this.start)}applyMatrix4(a){return this.start.applyMatrix4(a),this.end.applyMatrix4(a),this}equals(a){return a.start.equals(this.start)&&a.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}).prototype.center=function(a){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(a)},l.prototype.flattenToArrayOffset=function(a,b){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(a,b)},l.prototype.multiplyVector3=function(a){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),a.applyMatrix3(this)},l.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},l.prototype.applyToBufferAttribute=function(a){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),a.applyMatrix3(this)},l.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")},l.prototype.getInverse=function(a){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(a).invert()},c.prototype.extractPosition=function(a){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(a)},c.prototype.flattenToArrayOffset=function(a,b){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(a,b)},c.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),new a().setFromMatrixColumn(this,3)},c.prototype.setRotationFromQuaternion=function(a){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(a)},c.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},c.prototype.multiplyVector3=function(a){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),a.applyMatrix4(this)},c.prototype.multiplyVector4=function(a){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),a.applyMatrix4(this)},c.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},c.prototype.rotateAxis=function(a){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),a.transformDirection(this)},c.prototype.crossVector=function(a){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),a.applyMatrix4(this)},c.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")},c.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},c.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},c.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},c.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},c.prototype.applyToBufferAttribute=function(a){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),a.applyMatrix4(this)},c.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},c.prototype.makeFrustum=function(a,b,c,d,e,f){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(a,b,d,c,e,f)},c.prototype.getInverse=function(a){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(a).invert()},ac.prototype.isIntersectionLine=function(a){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(a)},p.prototype.multiplyVector3=function(a){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),a.applyQuaternion(this)},p.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()},z.prototype.isIntersectionBox=function(a){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(a)},z.prototype.isIntersectionPlane=function(a){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(a)},z.prototype.isIntersectionSphere=function(a){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(a)},t.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},t.prototype.barycoordFromPoint=function(a,b){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(a,b)},t.prototype.midpoint=function(a){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(a)},t.prototypenormal=function(a){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(a)},t.prototype.plane=function(a){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(a)},t.barycoordFromPoint=function(a,b,c,d,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),t.getBarycoord(a,b,c,d,e)},t.normal=function(a,b,c,d){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),t.getNormal(a,b,c,d)},U.prototype.extractAllPoints=function(a){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(a)},U.prototype.extrude=function(a){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new V(this,a)},U.prototype.makeGeometry=function(a){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new gW(this,a)},j.prototype.fromAttribute=function(a,b,c){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(a,b,c)},j.prototype.distanceToManhattan=function(a){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(a)},j.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},a.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},a.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},a.prototype.getPositionFromMatrix=function(a){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(a)},a.prototype.getScaleFromMatrix=function(a){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(a)},a.prototype.getColumnFromMatrix=function(a,b){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(b,a)},a.prototype.applyProjection=function(a){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(a)},a.prototype.fromAttribute=function(a,b,c){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(a,b,c)},a.prototype.distanceToManhattan=function(a){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(a)},a.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},D.prototype.fromAttribute=function(a,b,c){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(a,b,c)},D.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},i.prototype.getChildByName=function(a){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(a)},i.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},i.prototype.translate=function(a,b){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(b,a)},i.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},i.prototype.applyMatrix=function(a){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(a)},Object.defineProperties(i.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(a){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=a}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),F.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")},Object.defineProperties(F.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),0},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}}),ai.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},P.prototype.setLens=function(b,a){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==a&&(this.filmGauge=a),this.setFocalLength(b)},Object.defineProperties(x.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(a){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=a}},shadowCameraLeft:{set:function(a){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=a}},shadowCameraRight:{set:function(a){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=a}},shadowCameraTop:{set:function(a){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=a}},shadowCameraBottom:{set:function(a){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=a}},shadowCameraNear:{set:function(a){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=a}},shadowCameraFar:{set:function(a){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=a}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(a){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=a}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(a){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=a}},shadowMapHeight:{set:function(a){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=a}}}),Object.defineProperties(q.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),35048===this.usage},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(35048)}}}),q.prototype.setDynamic=function(a){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===a?35048:35044),this},q.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},q.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},f.prototype.addIndex=function(a){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(a)},f.prototype.addAttribute=function(b,a){return(console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),a&&a.isBufferAttribute||a&&a.isInterleavedBufferAttribute)?"index"===b?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(a),this):this.setAttribute(b,a):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(b,new q(arguments[1],arguments[2])))},f.prototype.addDrawCall=function(a,b,c){void 0!==c&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(a,b)},f.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},f.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},f.prototype.removeAttribute=function(a){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(a)},f.prototype.applyMatrix=function(a){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(a)},Object.defineProperties(f.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Q.prototype.setDynamic=function(a){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===a?35048:35044),this},Q.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},V.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")},V.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")},V.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")},ah.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")},bt.prototype.onUpdate=function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this},Object.defineProperties(n.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new g}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(a){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===a}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(a){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=a}},vertexTangents:{get:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")},set:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")}}}),Object.defineProperties(O.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(a){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=a}}}),e.prototype.clearTarget=function(a,b,c,d){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(a),this.clear(b,c,d)},e.prototype.animate=function(a){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(a)},e.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},e.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},e.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},e.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},e.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},e.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},e.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},e.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},e.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},e.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},e.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},e.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},e.prototype.enableScissorTest=function(a){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(a)},e.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},e.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},e.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},e.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},e.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},e.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},e.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},e.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},e.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},e.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()},Object.defineProperties(e.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=a}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=a}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(a){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=!0===a?av:3e3}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}}}),Object.defineProperties(aV.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(J.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(a){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=a}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(a){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=a}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(a){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=a}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(a){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=a}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(a){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=a}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(a){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=a}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(a){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=a}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(a){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=a}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(a){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=a}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(a){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=a}}}),(class extends i{constructor(a){super(),this.type="Audio",this.listener=a,this.context=a.context,this.gain=this.context.createGain(),this.gain.connect(a.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(a){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=a,this.connect(),this}setMediaElementSource(a){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(a),this.connect(),this}setMediaStreamSource(a){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(a),this.connect(),this}setBuffer(a){return this.buffer=a,this.sourceType="buffer",this.autoplay&&this.play(),this}play(b=0){if(!0===this.isPlaying){console.warn("THREE.Audio: Audio is already playing.");return}if(!1===this.hasPlaybackControl){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+b;const a=this.context.createBufferSource();return a.buffer=this.buffer,a.loop=this.loop,a.loopStart=this.loopStart,a.loopEnd=this.loopEnd,a.onended=this.onEnded.bind(this),a.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=a,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1===this.hasPlaybackControl){console.warn("THREE.Audio: this Audio has no playback control.");return}return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(){if(!1===this.hasPlaybackControl){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let a=1,b=this.filters.length;a<b;a++)this.filters[a-1].connect(this.filters[a]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let a=1,b=this.filters.length;a<b;a++)this.filters[a-1].disconnect(this.filters[a]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(a){return a||(a=[]),!0===this._connected?(this.disconnect(),this.filters=a.slice(),this.connect()):this.filters=a.slice(),this}setDetune(a){if(this.detune=a,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(a){return this.setFilters(a?[a]:[])}setPlaybackRate(a){if(!1===this.hasPlaybackControl){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=a,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(a){if(!1===this.hasPlaybackControl){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=a,!0===this.isPlaying&&(this.source.loop=this.loop),this}setLoopStart(a){return this.loopStart=a,this}setLoopEnd(a){return this.loopEnd=a,this}getVolume(){return this.gain.gain.value}setVolume(a){return this.gain.gain.setTargetAtTime(a,this.context.currentTime,.01),this}}).prototype.load=function(a){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const c=this,b=new ho;return b.load(a,function(a){c.setBuffer(a)}),this},(class{constructor(a,b=2048){this.analyser=a.context.createAnalyser(),this.analyser.fftSize=b,this.data=new Uint8Array(this.analyser.frequencyBinCount),a.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let c=0;const a=this.getFrequencyData();for(let b=0;b<a.length;b++)c+=a[b];return c/a.length}}).prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},aa.prototype.updateCubeMap=function(a,b){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(a,b)},aa.prototype.clear=function(a,b,c,d){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(a,b,c,d)},C.crossOrigin=void 0,C.loadTexture=function(d,a,e,f){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const b=new he;b.setCrossOrigin(this.crossOrigin);const c=b.load(d,e,void 0,f);return a&&(c.mapping=a),c},C.loadTextureCube=function(d,a,e,f){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const b=new hd;b.setCrossOrigin(this.crossOrigin);const c=b.load(d,e,void 0,f);return a&&(c.mapping=a),c},C.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},C.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"134"}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__="134")}}])